{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Almog Draw Library }Almog Draw Library}
{\comment Generated by doxygen1.9.1.}
{\creatim \yr2025\mo10\dy28\hr23\min1\sec15}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Almog Draw Library}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Oct 28 2025 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Curve} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Curve_ada} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Figure} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b game_state_t} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Grid} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mat2D} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mat2D_Minor} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mat2D_uint32} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Offset_zoom_param} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Point} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Quad} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Quad_mesh} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAME \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Tri} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Tri_mesh} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Almog_Draw_Library.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Immediate-mode 2D/3D raster helpers for drawing onto {\b Mat2D_uint32} pixel buffers })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Almog_Dynamic_Array.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header-only C macros that implement a simple dynamic array })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b display.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b example1.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Matrix2D.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A single-header C library for simple 2D matrix operations on doubles and uint32_t, including allocation, basic arithmetic, linear algebra, and helpers (LUP, inverse, determinant, DCM, etc.) })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b temp.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Curve Struct Reference\par \pard\plain 
{\tc\tcl2 \v Curve}
{\xe \v Curve}
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Curve:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCurve__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 60} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Curve}
{\xe \v Curve\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve::capacity}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v color\:Curve}
{\xe \v Curve\:color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Curve::color}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curve_add_to_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v elements\:Curve}
{\xe \v Curve\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point}* Curve::elements}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, {\b adl_grid_draw()}, and {\b setup()}.}\par
}
{\xe \v length\:Curve}
{\xe \v Curve\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve::length}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, {\b adl_grid_draw()}, and {\b setup()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Curve_ada Struct Reference\par \pard\plain 
{\tc\tcl2 \v Curve_ada}
{\xe \v Curve_ada}
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Curve_ada:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCurve__ada__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 70} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Curve_ada}
{\xe \v Curve_ada\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve_ada::capacity}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 72} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v elements\:Curve_ada}
{\xe \v Curve_ada\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve}* Curve_ada::elements}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 73} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, and {\b adl_grid_draw()}.}\par
}
{\xe \v length\:Curve_ada}
{\xe \v Curve_ada\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve_ada::length}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 71} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, and {\b adl_grid_draw()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Figure Struct Reference\par \pard\plain 
{\tc\tcl2 \v Figure}
{\xe \v Figure}
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Figure:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structFigure__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b min_x_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b max_x_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b min_y_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b max_y_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b x_axis_head_size}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b y_axis_head_size}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Offset_zoom_param} {\b offset_zoom_param}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve_ada} {\b src_curve_array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b top_left_position}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_uint32} {\b pixels_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b inv_z_buffer_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b background_color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw_axis}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw_max_min_values}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 118} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v background_color\:Figure}
{\xe \v Figure\:background_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Figure::background_color}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 134} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, and {\b setup()}.}\par
}
{\xe \v inv_z_buffer_mat\:Figure}
{\xe \v Figure\:inv_z_buffer_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Figure::inv_z_buffer_mat}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 133} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, and {\b adl_figure_alloc()}.}\par
}
{\xe \v max_x\:Figure}
{\xe \v Figure\:max_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::max_x}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 124} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v max_x_pixel\:Figure}
{\xe \v Figure\:max_x_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::max_x_pixel}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 120} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v max_y\:Figure}
{\xe \v Figure\:max_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::max_y}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 126} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v max_y_pixel\:Figure}
{\xe \v Figure\:max_y_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::max_y_pixel}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 122} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_x\:Figure}
{\xe \v Figure\:min_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::min_x}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 123} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_x_pixel\:Figure}
{\xe \v Figure\:min_x_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::min_x_pixel}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 119} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_y\:Figure}
{\xe \v Figure\:min_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::min_y}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 125} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_y_pixel\:Figure}
{\xe \v Figure\:min_y_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::min_y_pixel}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 121} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v offset_zoom_param\:Figure}
{\xe \v Figure\:offset_zoom_param}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Offset_zoom_param} Figure::offset_zoom_param}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 129} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v pixels_mat\:Figure}
{\xe \v Figure\:pixels_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_uint32} Figure::pixels_mat}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 132} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b adl_figure_copy_to_screen()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v src_curve_array\:Figure}
{\xe \v Figure\:src_curve_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve_ada} Figure::src_curve_array}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 130} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, and {\b adl_figure_alloc()}.}\par
}
{\xe \v to_draw_axis\:Figure}
{\xe \v Figure\:to_draw_axis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Figure::to_draw_axis}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 135} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, and {\b setup()}.}\par
}
{\xe \v to_draw_max_min_values\:Figure}
{\xe \v Figure\:to_draw_max_min_values}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Figure::to_draw_max_min_values}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 136} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, and {\b setup()}.}\par
}
{\xe \v top_left_position\:Figure}
{\xe \v Figure\:top_left_position}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Figure::top_left_position}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 131} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_figure_alloc()}, and {\b adl_figure_copy_to_screen()}.}\par
}
{\xe \v x_axis_head_size\:Figure}
{\xe \v Figure\:x_axis_head_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::x_axis_head_size}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 127} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_axis_draw_on_figure()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v y_axis_head_size\:Figure}
{\xe \v Figure\:y_axis_head_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::y_axis_head_size}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 128} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_axis_draw_on_figure()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
game_state_t Struct Reference\par \pard\plain 
{\tc\tcl2 \v game_state_t}
{\xe \v game_state_t}
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
Collaboration diagram for game_state_t:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structgame__state__t__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b game_is_running}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b delta_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b elapsed_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b const_fps}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b fps}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b frame_target_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_render}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_update}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b previous_frame_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b left_button_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_limit_fps}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_clear_renderer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b space_bar_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b w_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b s_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b a_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b d_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b e_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b q_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Window * {\b window}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b window_w}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b window_h}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Renderer * {\b renderer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TTF_Font * {\b font}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Surface * {\b window_surface}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Texture * {\b window_texture}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_uint32} {\b window_pixels_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b inv_z_buffer_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Offset_zoom_param} {\b offset_zoom_param}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 38} of file {\b display.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v a_was_pressed\:game_state_t}
{\xe \v game_state_t\:a_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::a_was_pressed}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 55} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v const_fps\:game_state_t}
{\xe \v game_state_t\:const_fps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::const_fps}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, {\b setup()}, and {\b update_window()}.}\par
}
{\xe \v d_was_pressed\:game_state_t}
{\xe \v game_state_t\:d_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::d_was_pressed}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 56} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v delta_time\:game_state_t}
{\xe \v game_state_t\:delta_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::delta_time}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, and {\b update_window()}.}\par
}
{\xe \v e_was_pressed\:game_state_t}
{\xe \v game_state_t\:e_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::e_was_pressed}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 57} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v elapsed_time\:game_state_t}
{\xe \v game_state_t\:elapsed_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::elapsed_time}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b update_window()}.}\par
}
{\xe \v font\:game_state_t}
{\xe \v game_state_t\:font}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TTF_Font* game_state_t::font}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v fps\:game_state_t}
{\xe \v game_state_t\:fps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::fps}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b update_window()}.}\par
}
{\xe \v frame_target_time\:game_state_t}
{\xe \v game_state_t\:frame_target_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::frame_target_time}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, and {\b update_window()}.}\par
}
{\xe \v game_is_running\:game_state_t}
{\xe \v game_state_t\:game_is_running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::game_is_running}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 39} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v inv_z_buffer_mat\:game_state_t}
{\xe \v game_state_t\:inv_z_buffer_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} game_state_t::inv_z_buffer_mat}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 70} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b render()}, {\b render_window()}, and {\b setup_window()}.}\par
}
{\xe \v left_button_pressed\:game_state_t}
{\xe \v game_state_t\:left_button_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::left_button_pressed}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 48} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v offset_zoom_param\:game_state_t}
{\xe \v game_state_t\:offset_zoom_param}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Offset_zoom_param} game_state_t::offset_zoom_param}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 72} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, {\b process_input_window()}, and {\b render()}.}\par
}
{\xe \v previous_frame_time\:game_state_t}
{\xe \v game_state_t\:previous_frame_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t game_state_t::previous_frame_time}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v q_was_pressed\:game_state_t}
{\xe \v game_state_t\:q_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::q_was_pressed}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 58} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v renderer\:game_state_t}
{\xe \v game_state_t\:renderer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Renderer* game_state_t::renderer}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b display.c}.}\par
{
\ql
Referenced by {\b destroy_window()}, {\b initialize_window()}, and {\b main()}.}\par
}
{\xe \v s_was_pressed\:game_state_t}
{\xe \v game_state_t\:s_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::s_was_pressed}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 54} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v space_bar_was_pressed\:game_state_t}
{\xe \v game_state_t\:space_bar_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::space_bar_was_pressed}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v to_clear_renderer\:game_state_t}
{\xe \v game_state_t\:to_clear_renderer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_clear_renderer}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b render_window()}.}\par
}
{\xe \v to_limit_fps\:game_state_t}
{\xe \v game_state_t\:to_limit_fps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_limit_fps}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, {\b setup()}, and {\b update_window()}.}\par
}
{\xe \v to_render\:game_state_t}
{\xe \v game_state_t\:to_render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_render}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v to_update\:game_state_t}
{\xe \v game_state_t\:to_update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_update}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v w_was_pressed\:game_state_t}
{\xe \v game_state_t\:w_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::w_was_pressed}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v window\:game_state_t}
{\xe \v game_state_t\:window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Window* game_state_t::window}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 60} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b destroy_window()}, {\b initialize_window()}, {\b main()}, {\b render_window()}, {\b setup_window()}, and {\b update_window()}.}\par
}
{\xe \v window_h\:game_state_t}
{\xe \v game_state_t\:window_h}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::window_h}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b initialize_window()}, {\b main()}, {\b setup_window()}, and {\b update_window()}.}\par
}
{\xe \v window_pixels_mat\:game_state_t}
{\xe \v game_state_t\:window_pixels_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_uint32} game_state_t::window_pixels_mat}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b destroy_window()}, {\b render()}, {\b render_window()}, and {\b setup_window()}.}\par
}
{\xe \v window_surface\:game_state_t}
{\xe \v game_state_t\:window_surface}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Surface* game_state_t::window_surface}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 66} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b destroy_window()}, and {\b setup_window()}.}\par
}
{\xe \v window_texture\:game_state_t}
{\xe \v game_state_t\:window_texture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Texture* game_state_t::window_texture}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 67} of file {\b display.c}.}\par
{
\ql
Referenced by {\b destroy_window()}.}\par
}
{\xe \v window_w\:game_state_t}
{\xe \v game_state_t\:window_w}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::window_w}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b initialize_window()}, {\b main()}, {\b setup_window()}, and {\b update_window()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b display.c}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Grid Struct Reference\par \pard\plain 
{\tc\tcl2 \v Grid}
{\xe \v Grid}
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Grid:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structGrid__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve_ada} {\b curves}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_e1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_e1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_e2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_e2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b num_samples_e1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b num_samples_e2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b de1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b de2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b plane} [3]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 139} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v curves\:Grid}
{\xe \v Grid\:curves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve_ada} Grid::curves}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 140} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}, and {\b adl_grid_draw()}.}\par
}
{\xe \v de1\:Grid}
{\xe \v Grid\:de1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::de1}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 147} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v de2\:Grid}
{\xe \v Grid\:de2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::de2}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 148} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v max_e1\:Grid}
{\xe \v Grid\:max_e1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::max_e1}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 142} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v max_e2\:Grid}
{\xe \v Grid\:max_e2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::max_e2}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 144} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v min_e1\:Grid}
{\xe \v Grid\:min_e1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::min_e1}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 141} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v min_e2\:Grid}
{\xe \v Grid\:min_e2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::min_e2}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 143} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v num_samples_e1\:Grid}
{\xe \v Grid\:num_samples_e1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Grid::num_samples_e1}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 145} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v num_samples_e2\:Grid}
{\xe \v Grid\:num_samples_e2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Grid::num_samples_e2}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 146} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v plane\:Grid}
{\xe \v Grid\:plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Grid::plane[3]}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 149} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mat2D Struct Reference\par \pard\plain 
{\tc\tcl2 \v Mat2D}
{\xe \v Mat2D}
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles. }}\par
{
{\f2 #include <Matrix2D.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cols}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b stride_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
rows: number of rows (height)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cols: number of columns (width)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
stride_r: number of elements between successive rows in memory (for contiguous storage, stride_r == cols)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
elements: pointer to contiguous storage of size rows * cols \par}
\par
}{
Definition at line {\b 81} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cols\:Mat2D}
{\xe \v Mat2D\:cols}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D::cols}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 83} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b mat2D_add()}, {\b mat2D_add_col_to_col()}, {\b mat2D_add_row_time_factor_to_row()}, {\b mat2D_add_row_to_row()}, {\b mat2D_alloc()}, {\b mat2D_calc_norma()}, {\b mat2D_col_is_all_digit()}, {\b mat2D_copy()}, {\b mat2D_copy_mat_to_mat_at_window()}, {\b mat2D_cross()}, {\b mat2D_det()}, {\b mat2D_det_2x2_mat()}, {\b mat2D_dot()}, {\b mat2D_dot_product()}, {\b mat2D_fill()}, {\b mat2D_fill_sequence()}, {\b mat2D_get_col()}, {\b mat2D_get_row()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, {\b mat2D_mat_is_all_digit()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_mult()}, {\b mat2D_mult_row()}, {\b mat2D_offset2d()}, {\b mat2D_print()}, {\b mat2D_print_as_col()}, {\b mat2D_rand()}, {\b mat2D_row_is_all_digit()}, {\b mat2D_set_identity()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, {\b mat2D_set_rot_mat_z()}, {\b mat2D_solve_linear_sys_LUP_decomposition()}, {\b mat2D_sub()}, {\b mat2D_sub_col_to_col()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_sub_row_to_row()}, {\b mat2D_swap_rows()}, {\b mat2D_transpose()}, {\b mat2D_triangulate()}, {\b render()}, and {\b render_window()}.}\par
}
{\xe \v elements\:Mat2D}
{\xe \v Mat2D\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double* Mat2D::elements}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 85} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b mat2D_alloc()}, {\b mat2D_free()}, {\b mat2D_print_as_col()}, and {\b render_window()}.}\par
}
{\xe \v rows\:Mat2D}
{\xe \v Mat2D\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D::rows}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 82} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b mat2D_add()}, {\b mat2D_add_col_to_col()}, {\b mat2D_add_row_to_row()}, {\b mat2D_alloc()}, {\b mat2D_calc_norma()}, {\b mat2D_copy()}, {\b mat2D_copy_mat_to_mat_at_window()}, {\b mat2D_cross()}, {\b mat2D_det()}, {\b mat2D_det_2x2_mat()}, {\b mat2D_dot()}, {\b mat2D_dot_product()}, {\b mat2D_fill()}, {\b mat2D_fill_sequence()}, {\b mat2D_get_col()}, {\b mat2D_get_row()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, {\b mat2D_mat_is_all_digit()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_mult()}, {\b mat2D_offset2d()}, {\b mat2D_print()}, {\b mat2D_print_as_col()}, {\b mat2D_rand()}, {\b mat2D_set_identity()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, {\b mat2D_set_rot_mat_z()}, {\b mat2D_solve_linear_sys_LUP_decomposition()}, {\b mat2D_sub()}, {\b mat2D_sub_col_to_col()}, {\b mat2D_sub_row_to_row()}, {\b mat2D_transpose()}, {\b mat2D_triangulate()}, {\b render()}, and {\b render_window()}.}\par
}
{\xe \v stride_r\:Mat2D}
{\xe \v Mat2D\:stride_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D::stride_r}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 84} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_alloc()}, and {\b mat2D_offset2d()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matrix2D.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mat2D_Minor Struct Reference\par \pard\plain 
{\tc\tcl2 \v Mat2D_Minor}
{\xe \v Mat2D_Minor}
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix. }}\par
{
{\f2 #include <Matrix2D.h>}}\par
Collaboration diagram for Mat2D_Minor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structMat2D__Minor__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cols}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b stride_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t * {\b rows_list}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t * {\b cols_list}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b ref_mat}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a minor by excluding one row and one column of a reference matrix. It holds index lists mapping into the reference matrix, without owning the data of the reference matrix itself.\par
Memory ownership:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
rows_list and cols_list are heap-allocated by minor allocators and must be freed with mat2D_minor_free.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The underlying matrix data (ref_mat.elements) is not owned by the minor and must not be freed by the minor functions. \par}
\par
}{
Definition at line {\b 119} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cols\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:cols}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_Minor::cols}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 121} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_det_2x2_mat_minor()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, {\b mat2D_minor_det()}, and {\b mat2D_minor_print()}.}\par
}
{\xe \v cols_list\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:cols_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t* Mat2D_Minor::cols_list}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 124} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, and {\b mat2D_minor_free()}.}\par
}
{\xe \v ref_mat\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:ref_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Mat2D_Minor::ref_mat}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 125} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, and {\b mat2D_minor_alloc_fill_from_mat_minor()}.}\par
}
{\xe \v rows\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_Minor::rows}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 120} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_det_2x2_mat_minor()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, {\b mat2D_minor_det()}, and {\b mat2D_minor_print()}.}\par
}
{\xe \v rows_list\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:rows_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t* Mat2D_Minor::rows_list}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 123} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, and {\b mat2D_minor_free()}.}\par
}
{\xe \v stride_r\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:stride_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_Minor::stride_r}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 122} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, and {\b mat2D_minor_alloc_fill_from_mat_minor()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matrix2D.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mat2D_uint32 Struct Reference\par \pard\plain 
{\tc\tcl2 \v Mat2D_uint32}
{\xe \v Mat2D_uint32}
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t. }}\par
{
{\f2 #include <Matrix2D.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cols}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b stride_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
rows: number of rows (height)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cols: number of columns (width)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
stride_r: number of elements between successive rows in memory (for contiguous storage, stride_r == cols)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
elements: pointer to contiguous storage of size rows * cols \par}
\par
}{
Definition at line {\b 98} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cols\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:cols}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_uint32::cols}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 100} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_figure_alloc()}, {\b adl_figure_copy_to_screen()}, {\b adl_line_draw()}, {\b adl_point_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b mat2D_alloc_uint32()}, {\b mat2D_fill_uint32()}, {\b mat2D_offset2d_uint32()}, and {\b render_window()}.}\par
}
{\xe \v elements\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t* Mat2D_uint32::elements}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 102} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b copy_mat_to_surface_RGB()}, {\b mat2D_alloc_uint32()}, {\b mat2D_free_uint32()}, and {\b render_window()}.}\par
}
{\xe \v rows\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_uint32::rows}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 99} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_figure_alloc()}, {\b adl_figure_copy_to_screen()}, {\b adl_line_draw()}, {\b adl_max_min_values_draw_on_figure()}, {\b adl_point_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b mat2D_alloc_uint32()}, {\b mat2D_fill_uint32()}, {\b mat2D_offset2d_uint32()}, and {\b render_window()}.}\par
}
{\xe \v stride_r\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:stride_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_uint32::stride_r}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 101} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_alloc_uint32()}, and {\b mat2D_offset2d_uint32()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matrix2D.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Offset_zoom_param Struct Reference\par \pard\plain 
{\tc\tcl2 \v Offset_zoom_param}
{\xe \v Offset_zoom_param}
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b zoom_multiplier}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b offset_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b offset_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mouse_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mouse_y}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 40} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v mouse_x\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:mouse_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Offset_zoom_param::mouse_x}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v mouse_y\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:mouse_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Offset_zoom_param::mouse_y}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v offset_x\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:offset_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Offset_zoom_param::offset_x}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_line_draw()}, {\b adl_point_draw()}, and {\b process_input_window()}.}\par
}
{\xe \v offset_y\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:offset_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Offset_zoom_param::offset_y}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_line_draw()}, {\b adl_point_draw()}, and {\b process_input_window()}.}\par
}
{\xe \v zoom_multiplier\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:zoom_multiplier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Offset_zoom_param::zoom_multiplier}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_line_draw()}, {\b adl_point_draw()}, {\b main()}, and {\b process_input_window()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Point Struct Reference\par \pard\plain 
{\tc\tcl2 \v Point}
{\xe \v Point}
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b z}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b w}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 50} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v w\:Point}
{\xe \v Point\:w}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::w}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 54} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v x\:Point}
{\xe \v Point\:x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::x}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 51} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_copy_to_screen()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tan_half_angle()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v y\:Point}
{\xe \v Point\:y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::y}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_copy_to_screen()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tan_half_angle()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v z\:Point}
{\xe \v Point\:z}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::z}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Quad Struct Reference\par \pard\plain 
{\tc\tcl2 \v Quad}
{\xe \v Quad}
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Quad:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structQuad__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b points} [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b normals} [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b colors} [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b light_intensity} [4]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 91} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v colors\:Quad}
{\xe \v Quad\:colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Quad::colors[4]}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 94} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_fill_interpolate_color_mean_value()}, and {\b setup()}.}\par
}
{\xe \v light_intensity\:Quad}
{\xe \v Quad\:light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Quad::light_intensity[4]}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 96} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, and {\b setup()}.}\par
}
{\xe \v normals\:Quad}
{\xe \v Quad\:normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Quad::normals[4]}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 93} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v points\:Quad}
{\xe \v Quad\:points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Quad::points[4]}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 92} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, and {\b setup()}.}\par
}
{\xe \v to_draw\:Quad}
{\xe \v Quad\:to_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Quad::to_draw}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 95} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_mesh_draw()}, {\b adl_quad_mesh_fill()}, {\b adl_quad_mesh_fill_interpolate_color()}, {\b adl_quad_mesh_fill_interpolate_normal()}, and {\b setup()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Quad_mesh Struct Reference\par \pard\plain 
{\tc\tcl2 \v Quad_mesh}
{\xe \v Quad_mesh}
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Quad_mesh:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structQuad__mesh__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 111} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Quad_mesh}
{\xe \v Quad_mesh\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Quad_mesh::capacity}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v elements\:Quad_mesh}
{\xe \v Quad_mesh\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad}* Quad_mesh::elements}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 114} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_draw()}, {\b adl_quad_mesh_fill()}, {\b adl_quad_mesh_fill_interpolate_color()}, and {\b adl_quad_mesh_fill_interpolate_normal()}.}\par
}
{\xe \v length\:Quad_mesh}
{\xe \v Quad_mesh\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Quad_mesh::length}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 112} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_draw()}, {\b adl_quad_mesh_fill()}, {\b adl_quad_mesh_fill_interpolate_color()}, and {\b adl_quad_mesh_fill_interpolate_normal()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Tri Struct Reference\par \pard\plain 
{\tc\tcl2 \v Tri}
{\xe \v Tri}
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Tri:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structTri__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b points} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b tex_points} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b normals} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b colors} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b light_intensity} [3]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 79} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v colors\:Tri}
{\xe \v Tri\:colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Tri::colors[3]}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 83} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b setup()}.}\par
}
{\xe \v light_intensity\:Tri}
{\xe \v Tri\:light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Tri::light_intensity[3]}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 85} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, and {\b setup()}.}\par
}
{\xe \v normals\:Tri}
{\xe \v Tri\:normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Tri::normals[3]}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 82} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v points\:Tri}
{\xe \v Tri\:points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Tri::points[3]}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 80} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, and {\b setup()}.}\par
}
{\xe \v tex_points\:Tri}
{\xe \v Tri\:tex_points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Tri::tex_points[3]}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 81} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v to_draw\:Tri}
{\xe \v Tri\:to_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Tri::to_draw}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 84} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, and {\b setup()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Tri_mesh Struct Reference\par \pard\plain 
{\tc\tcl2 \v Tri_mesh}
{\xe \v Tri_mesh}
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Tri_mesh:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structTri__mesh__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 102} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Tri_mesh}
{\xe \v Tri_mesh\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Tri_mesh::capacity}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 104} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v elements\:Tri_mesh}
{\xe \v Tri_mesh\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri}* Tri_mesh::elements}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 105} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v length\:Tri_mesh}
{\xe \v Tri_mesh\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Tri_mesh::length}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 103} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Almog_Draw_Library.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Draw_Library.h File Reference\par \pard\plain 
{\tc\tcl2 \v Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Immediate-mode 2D/3D raster helpers for drawing onto {\b Mat2D_uint32} pixel buffers. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <math.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <limits.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <float.h>}\par
{\f2 #include "./Matrix2D.h"}\par
{\f2 #include "./Almog_Dynamic_Array.h"}\par
{\f2 #include <assert.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Almog_Draw_Library.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Draw__Library_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Draw__Library_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Offset_zoom_param}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Point}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Curve}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Curve_ada}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Tri}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Quad}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Tri_mesh}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Quad_mesh}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Figure}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Grid}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_ASSERT}\~ assert\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b POINT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CURVE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CURVE_ADA}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TRI}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b QUAD}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TRI_MESH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b QUAD_MESH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HexARGB_RGBA}(x)\~ ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HexARGB_RGB_VAR}(x,  r,  g,  b)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HexARGB_RGBA_VAR}(x,  r,  g,  b,  a)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RGB_hexRGB}(r,  g,  b)\~ (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RGBA_hexARGB}(r,  g,  b,  a)\~ (int)(0x01000000l*(int)(fminf(a, 255)) + 0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RED_hexARGB}\~ 0xFFFF0000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GREEN_hexARGB}\~ 0xFF00FF00\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b BLUE_hexARGB}\~ 0xFF0000FF\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b PURPLE_hexARGB}\~ 0xFFFF00FF\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CYAN_hexARGB}\~ 0xFF00FFFF\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b YELLOW_hexARGB}\~ 0xFFFFFF00\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b edge_cross_point}(a1,  b,  a2,  p)\~ (b.x-a1.x)*(p.y-a2.y)-(b.y-a1.y)*(p.x-a2.x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b is_top_edge}(x,  y)\~ (y == 0 && x > 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b is_left_edge}(x,  y)\~ (y < 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b is_top_left}(ps,  pe)\~ ({\b is_top_edge}(pe.x-ps.x, pe.y-ps.y) || {\b is_left_edge}(pe.x-ps.x, pe.y-ps.y))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_POINT_VAL}\~ 1e5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_assert_point_is_valid}(p)\~ {\b ADL_ASSERT}(isfinite(p.x) && isfinite(p.y) && isfinite(p.z) && isfinite(p.w))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_assert_tri_is_valid}({\b tri})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_assert_quad_is_valid}(quad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_FIGURE_PADDING_PRECENTAGE}\~ 20\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_FIGURE_PADDING}\~ 70\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MIN_FIGURE_PADDING}\~ 20\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_HEAD_SIZE}\~ 15\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_FIGURE_HEAD_ANGLE_DEG}\~ 30\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_FIGURE_AXIS_COLOR}\~ 0xff000000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_CHARACTER_OFFSET}\~ 10\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MIN_CHARACTER_OFFSET}\~ 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_SENTENCE_LEN}\~ 256\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_ZOOM}\~ 1e3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_DEFAULT_OFFSET_ZOOM}\~ ({\b Offset_zoom_param})\{1,0,0,0,0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_offset_zoom_point}(p,  window_w,  window_h,  offset_zoom_param)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_offset2d}(i,  j,  ni)\~ (j) * (ni) + (i)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_point_draw} ({\b Mat2D_uint32} screen_mat, int x, int y, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a single pixel with alpha blending. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_line_draw} ({\b Mat2D_uint32} screen_mat, const float x1_input, const float y1_input, const float x2_input, const float y2_input, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an anti-aliased-like line by vertical spans (integer grid). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_lines_draw} (const {\b Mat2D_uint32} screen_mat, const {\b Point} *{\b points}, const size_t len, const uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a polyline connecting an array of points. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_lines_loop_draw} (const {\b Mat2D_uint32} screen_mat, const {\b Point} *{\b points}, const size_t len, const uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a closed polyline (loop). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_arrow_draw} ({\b Mat2D_uint32} screen_mat, int xs, int ys, int xe, int ye, float head_size, float angle_deg, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an arrow from start to end with a triangular head. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_character_draw} ({\b Mat2D_uint32} screen_mat, char c, int width_pixel, int hight_pixel, int x_top_left, int y_top_left, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a vector glyph for a single ASCII character. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_sentence_draw} ({\b Mat2D_uint32} screen_mat, const char sentence[], size_t len, const int x_top_left, const int y_top_left, const int hight_pixel, const uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a horizontal sentence using vector glyphs. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_rectangle_draw_min_max} ({\b Mat2D_uint32} screen_mat, int min_x, int max_x, int min_y, int max_y, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a rectangle outline defined by min/max corners (inclusive). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_rectangle_fill_min_max} ({\b Mat2D_uint32} screen_mat, int min_x, int max_x, int min_y, int max_y, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a rectangle defined by min/max corners (inclusive). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_draw} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a quad (four points, looped). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_fill} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad using mean-value (Barycentric) coordinates and flat base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_fill_interpolate_normal_mean_value} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-pixel light interpolation (mean value coords). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_fill_interpolate_color_mean_value} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-vertex colors (mean value coords). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_draw} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all quads in a mesh. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_fill} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh with a uniform base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_fill_interpolate_normal} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using interpolated lighting. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_fill_interpolate_color} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using per-vertex colors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_circle_draw} ({\b Mat2D_uint32} screen_mat, float center_x, float center_y, float r, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an approximate circle outline (1px thickness). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_circle_fill} ({\b Mat2D_uint32} screen_mat, float center_x, float center_y, float r, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a circle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_draw} ({\b Mat2D_uint32} screen_mat, {\b Tri} {\b tri}, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_fill_Pinedas_rasterizer} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Tri} {\b tri}, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with flat base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Tri} {\b tri}, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with per-vertex colors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Tri} {\b tri}, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle with interpolated lighting over a uniform color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_draw} ({\b Mat2D_uint32} screen_mat, {\b Tri_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all triangles in a mesh. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_fill_Pinedas_rasterizer} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Tri_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Tri_mesh} mesh, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Tri_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with interpolated lighting. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b adl_tan_half_angle} ({\b Point} vi, {\b Point} vj, {\b Point} p, float li, float lj)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute tan(alpha/2) for the angle at point p between segments p->vi and p->vj. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b adl_linear_map} (float s, float min_in, float max_in, float min_out, float max_out)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Affine map from one scalar range to another (no clamping). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad2tris} ({\b Quad} quad, {\b Tri} *tri1, {\b Tri} *tri2, char split_line[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Split a quad into two triangles along a chosen diagonal. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_linear_sRGB_to_okLab} (uint32_t hex_ARGB, float *L, float *a, float *b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to Oklab components. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_okLab_to_linear_sRGB} (float L, float a, float b, uint32_t *hex_ARGB)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert Oklab components to a linear sRGB ARGB color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_linear_sRGB_to_okLch} (uint32_t hex_ARGB, float *L, float *c, float *h_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to OkLch components. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_okLch_to_linear_sRGB} (float L, float c, float h_deg, uint32_t *hex_ARGB)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert OkLch components to a linear sRGB ARGB color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_interpolate_ARGBcolor_on_okLch} (uint32_t color1, uint32_t color2, float t, float num_of_rotations, uint32_t *color_out)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolate between two ARGB colors in OkLch space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Figure} {\b adl_figure_alloc} (size_t rows, size_t cols, {\b Point} top_left_position)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate and initialize a {\b Figure} with an internal pixel buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_figure_copy_to_screen} ({\b Mat2D_uint32} screen_mat, {\b Figure} figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Blit a {\b Figure}'s pixels onto a destination screen buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_axis_draw_on_figure} ({\b Figure} *figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw X/Y axes with arrowheads into a {\b Figure}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_max_min_values_draw_on_figure} ({\b Figure} figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw min/max numeric labels for the current data range. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_curve_add_to_figure} ({\b Figure} *figure, {\b Point} *src_points, size_t src_len, uint32_t color)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a curve (polyline) to a {\b Figure} and update its data bounds. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_curves_plot_on_figure} ({\b Figure} figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Render all added curves into a {\b Figure}'s pixel buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_2Dscalar_interp_on_figure} ({\b Figure} figure, double *x_2Dmat, double *y_2Dmat, double *scalar_2Dmat, int ni, int nj, char color_scale[], float num_of_rotations)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualize a scalar field on a {\b Figure} by colored quads. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Grid} {\b adl_cartesian_grid_create} (float min_e1, float max_e1, float min_e2, float max_e2, int num_samples_e1, int num_samples_e2, char plane[], float third_direction_position)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a Cartesian grid (as curves) on one of the principal planes. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_grid_draw} ({\b Mat2D_uint32} screen_mat, {\b Grid} grid, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a previously created {\b Grid} as line segments. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Immediate-mode 2D/3D raster helpers for drawing onto {\b Mat2D_uint32} pixel buffers. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Conventions{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pixel buffer: {\b Mat2D_uint32} with elements encoded as ARGB 0xAARRGGBB.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Coordinates: x grows to the right, y grows downward; origin is the top-left corner of the destination buffer.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Depth: Functions that accept inv_z_buffer perform a depth test using inverse-Z (larger values are closer). The buffer stores doubles.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Transform: Most drawing functions accept an {\b Offset_zoom_param} describing a pan/zoom transform that is applied about the screen center. Use ADL_DEFAULT_OFFSET_ZOOM for identity.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Colors: Unless noted otherwise, colors are ARGB in 0xAARRGGBB format.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Alpha: adl_point_draw alpha-blends source over destination and writes an opaque result (A = 255) to the pixel buffer.\par}
\par
This header contains function declarations and optional implementations (guarded by ALMOG_DRAW_LIBRARY_IMPLEMENTATION). \par
}{
Definition in file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ADL_ASSERT\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_assert_point_is_valid\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_assert_point_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_assert_point_is_valid( p)\~ {\b ADL_ASSERT}(isfinite(p.x) && isfinite(p.y) && isfinite(p.z) && isfinite(p.w))}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 243} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_assert_quad_is_valid\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_assert_quad_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_assert_quad_is_valid( quad)}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         adl_assert_point_is_valid(quad.points[0]);   \\\par
        adl_assert_point_is_valid(quad.points[1]);                                  \\\par
        adl_assert_point_is_valid(quad.points[2]);                                  \\\par
        adl_assert_point_is_valid(quad.points[3])\par
}
{
Definition at line {\b 247} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_assert_tri_is_valid\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_assert_tri_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_assert_tri_is_valid( {\b tri})}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         adl_assert_point_is_valid(tri.points[0]); \\\par
        adl_assert_point_is_valid(tri.points[1]);                              \\\par
        adl_assert_point_is_valid(tri.points[2])\par
}
{
Definition at line {\b 244} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_DEFAULT_OFFSET_ZOOM\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_DEFAULT_OFFSET_ZOOM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_DEFAULT_OFFSET_ZOOM\~ ({\b Offset_zoom_param})\{1,0,0,0,0\}}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 264} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_FIGURE_AXIS_COLOR\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_FIGURE_AXIS_COLOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_FIGURE_AXIS_COLOR\~ 0xff000000}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 257} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_FIGURE_HEAD_ANGLE_DEG\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_FIGURE_HEAD_ANGLE_DEG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_FIGURE_HEAD_ANGLE_DEG\~ 30}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 256} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_FIGURE_PADDING_PRECENTAGE\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_FIGURE_PADDING_PRECENTAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_FIGURE_PADDING_PRECENTAGE\~ 20}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 252} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_CHARACTER_OFFSET\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_CHARACTER_OFFSET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_CHARACTER_OFFSET\~ 10}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 259} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_FIGURE_PADDING\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_FIGURE_PADDING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_FIGURE_PADDING\~ 70}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 253} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_HEAD_SIZE\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_HEAD_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_HEAD_SIZE\~ 15}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 255} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_POINT_VAL\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_POINT_VAL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_POINT_VAL\~ 1e5}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 242} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_SENTENCE_LEN\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_SENTENCE_LEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_SENTENCE_LEN\~ 256}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 261} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_ZOOM\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_ZOOM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_ZOOM\~ 1e3}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 262} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MIN_CHARACTER_OFFSET\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MIN_CHARACTER_OFFSET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MIN_CHARACTER_OFFSET\~ 5}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 260} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MIN_FIGURE_PADDING\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MIN_FIGURE_PADDING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MIN_FIGURE_PADDING\~ 20}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 254} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_offset2d\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_offset2d}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_offset2d( i,  j,  ni)\~ (j) * (ni) + (i)}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2227} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_offset_zoom_point\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_offset_zoom_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_offset_zoom_point( p,  window_w,  window_h,  offset_zoom_param)}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     (p).x = ((p).x - (window_w)/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + (window_w)/2; \\\par
    (p).y = ((p).y - (window_h)/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + (window_h)/2\par
}
{
Definition at line {\b 265} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v BLUE_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:BLUE_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define BLUE_hexARGB\~ 0xFF0000FF}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 232} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v CURVE\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:CURVE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CURVE}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v CURVE_ADA\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:CURVE_ADA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CURVE_ADA}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v CYAN_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:CYAN_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CYAN_hexARGB\~ 0xFF00FFFF}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 234} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v edge_cross_point\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:edge_cross_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define edge_cross_point( a1,  b,  a2,  p)\~ (b.x-a1.x)*(p.y-a2.y)-(b.y-a1.y)*(p.x-a2.x)}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 237} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v GREEN_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:GREEN_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GREEN_hexARGB\~ 0xFF00FF00}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 231} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v HexARGB_RGB_VAR\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:HexARGB_RGB_VAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HexARGB_RGB_VAR( x,  r,  g,  b)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 157} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v HexARGB_RGBA\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:HexARGB_RGBA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HexARGB_RGBA( x)\~ ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 154} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v HexARGB_RGBA_VAR\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:HexARGB_RGBA_VAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HexARGB_RGBA_VAR( x,  r,  g,  b,  a)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 160} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v is_left_edge\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:is_left_edge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define is_left_edge( x,  y)\~ (y < 0)}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 239} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v is_top_edge\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:is_top_edge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define is_top_edge( x,  y)\~ (y == 0 && x > 0)}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 238} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v is_top_left\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:is_top_left}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define is_top_left( ps,  pe)\~ ({\b is_top_edge}(pe.x-ps.x, pe.y-ps.y) || {\b is_left_edge}(pe.x-ps.x, pe.y-ps.y))}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 240} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v POINT\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:POINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define POINT}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v PURPLE_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:PURPLE_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define PURPLE_hexARGB\~ 0xFFFF00FF}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 233} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v QUAD\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:QUAD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define QUAD}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 90} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v QUAD_MESH\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:QUAD_MESH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define QUAD_MESH}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 110} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v RED_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:RED_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RED_hexARGB\~ 0xFFFF0000}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 230} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v RGB_hexRGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:RGB_hexRGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RGB_hexRGB( r,  g,  b)\~ (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 163} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v RGBA_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:RGBA_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RGBA_hexARGB( r,  g,  b,  a)\~ (int)(0x01000000l*(int)(fminf(a, 255)) + 0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 166} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v TRI\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:TRI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TRI}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 78} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v TRI_MESH\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:TRI_MESH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TRI_MESH}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 101} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v YELLOW_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:YELLOW_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define YELLOW_hexARGB\~ 0xFFFFFF00}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 235} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v adl_2Dscalar_interp_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_2Dscalar_interp_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_2Dscalar_interp_on_figure ({\b Figure}  {\i figure}, double *  {\i x_2Dmat}, double *  {\i y_2Dmat}, double *  {\i scalar_2Dmat}, int  {\i ni}, int  {\i nj}, char  {\i color_scale}[], float  {\i num_of_rotations})}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualize a scalar field on a {\b Figure} by colored quads. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Treats x_2Dmat and y_2Dmat as a structured 2D grid of positions (column-major with stride ni) and colors each cell using scalar_2Dmat mapped through a two-color OkLch gradient. Also updates figure bounds from the provided data. Depth-tested inside the figure's buffers.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{{\b Figure} to render into (uses its own pixel buffers). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_2Dmat} \cell }{{\b Grid} X coordinates, size ni*nj. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_2Dmat} \cell }{{\b Grid} Y coordinates, size ni*nj. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scalar_2Dmat} \cell }{Scalar values per grid node, size ni*nj. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ni} \cell }{Number of samples along the first index (rows). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nj} \cell }{Number of samples along the second index (cols). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color_scale} \cell }{Two-letter code of endpoints ("b-c","b-g","b-r", "b-y","g-y","g-p","g-r","r-y"). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_of_rotations} \cell }{Hue turns for the OkLch interpolation (can be fractional/negative). \cell }
{\row }
}
}{
Definition at line {\b 2247} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_axis_draw_on_figure()}, {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_interpolate_ARGBcolor_on_okLch()}, {\b adl_linear_map()}, {\b adl_max_min_values_draw_on_figure()}, {\b adl_offset2d}, {\b adl_offset_zoom_point}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b Figure::background_color}, {\b BLUE_hexARGB}, {\b Quad::colors}, {\b Mat2D::cols}, {\b Mat2D_uint32::cols}, {\b CYAN_hexARGB}, {\b Mat2D::elements}, {\b GREEN_hexARGB}, {\b Figure::inv_z_buffer_mat}, {\b Quad::light_intensity}, {\b mat2D_fill_uint32()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Quad::points}, {\b PURPLE_hexARGB}, {\b RED_hexARGB}, {\b Mat2D::rows}, {\b Mat2D_uint32::rows}, {\b Quad::to_draw}, {\b Figure::to_draw_axis}, {\b Figure::to_draw_max_min_values}, {\b Point::w}, {\b Point::x}, {\b Point::y}, {\b YELLOW_hexARGB}, and {\b Point::z}.}\par
}
{\xe \v adl_arrow_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_arrow_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_arrow_draw ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i xs}, int  {\i ys}, int  {\i xe}, int  {\i ye}, float  {\i head_size}, float  {\i angle_deg}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an arrow from start to end with a triangular head. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The head is constructed by rotating around the arrow tip by +/- angle_deg and using head_size as a fraction of the shaft length.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
: This function is a bit complicated and expansive but this is what I could come up with\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xs} \cell }{Start X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ys} \cell }{Start Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xe} \cell }{End X (before pan/zoom), i.e., the arrow tip. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ye} \cell }{End Y (before pan/zoom), i.e., the arrow tip. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i head_size} \cell }{Head size as a fraction of total length in [0,1]. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Head wing rotation angle in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Arrow color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 451} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, {\b mat2D_add()}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_dot()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_set_rot_mat_z()}, and {\b mat2D_sub()}.}\par
{
\ql
Referenced by {\b adl_axis_draw_on_figure()}.}\par
}
{\xe \v adl_axis_draw_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_axis_draw_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_axis_draw_on_figure ({\b Figure} *  {\i figure})}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw X/Y axes with arrowheads into a {\b Figure}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uses the current figure's pixel extents and padding to place axes, and stores the computed head sizes for later label layout.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{[in,out] {\b Figure} to draw onto. \cell }
{\row }
}
}{
Definition at line {\b 2077} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_arrow_draw()}, {\b ADL_FIGURE_AXIS_COLOR}, {\b ADL_FIGURE_HEAD_ANGLE_DEG}, {\b ADL_FIGURE_PADDING_PRECENTAGE}, {\b ADL_MAX_FIGURE_PADDING}, {\b ADL_MAX_HEAD_SIZE}, {\b ADL_MIN_FIGURE_PADDING}, {\b Mat2D_uint32::cols}, {\b Figure::max_x_pixel}, {\b Figure::max_y_pixel}, {\b Figure::min_x_pixel}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D_uint32::rows}, {\b Figure::x_axis_head_size}, and {\b Figure::y_axis_head_size}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v adl_cartesian_grid_create\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_cartesian_grid_create}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Grid} adl_cartesian_grid_create (float  {\i min_e1}, float  {\i max_e1}, float  {\i min_e2}, float  {\i max_e2}, int  {\i num_samples_e1}, int  {\i num_samples_e2}, char  {\i plane}[], float  {\i third_direction_position})}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a Cartesian grid (as curves) on one of the principal planes. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Supported planes (case-insensitive): "XY","xy","XZ","xz","YX","yx","YZ","yz","ZX","zx","ZY","zy". The third_direction_position places the grid along the axis normal to the plane (e.g., Z for "XY").\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_e1} \cell }{Minimum coordinate along the first axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_e1} \cell }{Maximum coordinate along the first axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_e2} \cell }{Minimum coordinate along the second axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_e2} \cell }{Maximum coordinate along the second axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_samples_e1} \cell }{Number of segments along first axis. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_samples_e2} \cell }{Number of segments along second axis. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane} \cell }{Plane code string ("XY","xy","XZ","xz","YX","yx","YZ","yz","ZX","zx","ZY","zy"). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i third_direction_position} \cell }{Position along the axis normal to plane. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Grid} structure containing the generated curves and spacing. \par
}}}{
Definition at line {\b 2446} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Grid::curves}, {\b Grid::de1}, {\b Grid::de2}, {\b Grid::max_e1}, {\b Grid::max_e2}, {\b Grid::min_e1}, {\b Grid::min_e2}, {\b Grid::num_samples_e1}, {\b Grid::num_samples_e2}, {\b Grid::plane}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
}
{\xe \v adl_character_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_character_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_character_draw ({\b Mat2D_uint32}  {\i screen_mat}, char  {\i c}, int  {\i width_pixel}, int  {\i hight_pixel}, int  {\i x_top_left}, int  {\i y_top_left}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a vector glyph for a single ASCII character. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Only a limited set of characters is supported (A\'96Z, a\'96z, 0\'969, space, '.', ':', '-', '+'). Unsupported characters are rendered as a framed box with an 'X'. Coordinates are for the character's top-left corner.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{The character to draw. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i width_pixel} \cell }{Character box width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hight_pixel} \cell }{Character box height in pixels (spelled as in API). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_top_left} \cell }{X of top-left corner (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_top_left} \cell }{Y of top-left corner (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 519} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, {\b adl_rectangle_draw_min_max()}, and {\b adl_rectangle_fill_min_max()}.}\par
{
\ql
Referenced by {\b adl_sentence_draw()}, and {\b render()}.}\par
}
{\xe \v adl_circle_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_circle_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_circle_draw ({\b Mat2D_uint32}  {\i screen_mat}, float  {\i center_x}, float  {\i center_y}, float  {\i r}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an approximate circle outline (1px thickness). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The outline is approximated on the integer grid by sampling a band around radius r.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_x} \cell }{Circle center X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_y} \cell }{Circle center Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Circle radius in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1360} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}.}\par
}
{\xe \v adl_circle_fill\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_circle_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_circle_fill ({\b Mat2D_uint32}  {\i screen_mat}, float  {\i center_x}, float  {\i center_y}, float  {\i r}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a circle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_x} \cell }{Circle center X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_y} \cell }{Circle center Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Circle radius in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Fill color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1382} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}.}\par
}
{\xe \v adl_curve_add_to_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_curve_add_to_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_curve_add_to_figure ({\b Figure} *  {\i figure}, {\b Point} *  {\i src_points}, size_t  {\i src_len}, uint32_t  {\i color})}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a curve (polyline) to a {\b Figure} and update its data bounds. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The input points are copied into the figure's source curve array with the given color. {\b Figure} min/max bounds are updated to include them.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{[in,out] Target figure. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_points} \cell }{Array of source points (in data space). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_len} \cell }{Number of points. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{{\b Curve} color (0xAARRGGBB). \cell }
{\row }
}
}{
Definition at line {\b 2163} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Curve::color}, {\b Figure::max_x}, {\b Figure::max_y}, {\b Figure::min_x}, {\b Figure::min_y}, {\b Figure::src_curve_array}, {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v adl_curves_plot_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_curves_plot_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_curves_plot_on_figure ({\b Figure}  {\i figure})}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Render all added curves into a {\b Figure}'s pixel buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clears the pixel buffer to background_color, draws axes if enabled, maps data-space points to pixel-space using current min/max bounds, draws the polylines, and optionally draws min/max labels.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{{\b Figure} to render into (uses its own pixel buffer). \cell }
{\row }
}
}{
Definition at line {\b 2198} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_axis_draw_on_figure()}, {\b adl_line_draw()}, {\b adl_linear_map()}, {\b adl_max_min_values_draw_on_figure()}, {\b Figure::background_color}, {\b Curve::color}, {\b Mat2D::cols}, {\b Curve::elements}, {\b Curve_ada::elements}, {\b Mat2D::elements}, {\b Figure::inv_z_buffer_mat}, {\b Curve::length}, {\b Curve_ada::length}, {\b mat2D_fill_uint32()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D::rows}, {\b Figure::src_curve_array}, {\b Figure::to_draw_axis}, {\b Figure::to_draw_max_min_values}, {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b render()}.}\par
}
{\xe \v adl_figure_alloc\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_figure_alloc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Figure} adl_figure_alloc (size_t  {\i rows}, size_t  {\i cols}, {\b Point}  {\i top_left_position})}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate and initialize a {\b Figure} with an internal pixel buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the pixel buffer (rows x cols), an inverse-Z buffer (zeroed), an empty source curve array, and default padding/axes bounds. The background_color, to_draw_axis, and to_draw_max_min_values should be set by the caller before rendering.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{Height of the figure in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cols} \cell }{Width of the figure in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i top_left_position} \cell }{Target position when copying to a screen. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A new {\b Figure} with allocated buffers. \par
}}}{
Definition at line {\b 2014} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ada_init_array}, {\b ADL_ASSERT}, {\b adl_assert_point_is_valid}, {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b ADL_FIGURE_PADDING_PRECENTAGE}, {\b ADL_MAX_FIGURE_PADDING}, {\b Mat2D::cols}, {\b Mat2D_uint32::cols}, {\b Mat2D::elements}, {\b Figure::inv_z_buffer_mat}, {\b mat2D_alloc()}, {\b mat2D_alloc_uint32()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D::rows}, {\b Mat2D_uint32::rows}, {\b Figure::src_curve_array}, and {\b Figure::top_left_position}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v adl_figure_copy_to_screen\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_figure_copy_to_screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_figure_copy_to_screen ({\b Mat2D_uint32}  {\i screen_mat}, {\b Figure}  {\i figure})}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Blit a {\b Figure}'s pixels onto a destination screen buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs per-pixel blending using adl_point_draw and the identity transform. The figure's top_left_position is used as the destination offset.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{Source figure to copy from. \cell }
{\row }
}
}{
Definition at line {\b 2057} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b MAT2D_AT_UINT32}, {\b Figure::pixels_mat}, {\b Mat2D_uint32::rows}, {\b Figure::top_left_position}, {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b render()}.}\par
}
{\xe \v adl_grid_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_grid_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_grid_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Grid}  {\i grid}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a previously created {\b Grid} as line segments. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i grid} \cell }{{\b Grid} to draw (curves are 2-point polylines). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 2724} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_lines_draw()}, {\b Grid::curves}, {\b Curve::elements}, {\b Curve_ada::elements}, {\b Curve::length}, and {\b Curve_ada::length}.}\par
}
{\xe \v adl_interpolate_ARGBcolor_on_okLch\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_interpolate_ARGBcolor_on_okLch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_interpolate_ARGBcolor_on_okLch (uint32_t  {\i color1}, uint32_t  {\i color2}, float  {\i t}, float  {\i num_of_rotations}, uint32_t *  {\i color_out})}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolate between two ARGB colors in OkLch space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lightness and chroma are interpolated linearly. Hue is interpolated in degrees after adding 360*num_of_rotations to the second hue, allowing control over the winding direction.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color1} \cell }{Start color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color2} \cell }{End color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i t} \cell }{Interpolation factor in [0,1]. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_of_rotations} \cell }{Number of hue turns to add to color2 (can be fractional/negative). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color_out} \cell }{[out] Interpolated ARGB color (A=255). \cell }
{\row }
}
}{
Definition at line {\b 1986} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_linear_sRGB_to_okLch()}, and {\b adl_okLch_to_linear_sRGB()}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}.}\par
}
{\xe \v adl_line_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_line_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_line_draw ({\b Mat2D_uint32}  {\i screen_mat}, const float  {\i x1_input}, const float  {\i y1_input}, const float  {\i x2_input}, const float  {\i y2_input}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an anti-aliased-like line by vertical spans (integer grid). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The line is rasterized with a simple integer-span approach. Pan/zoom is applied about the screen center prior to rasterization.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x1_input} \cell }{Line start X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y1_input} \cell }{Line start Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x2_input} \cell }{Line end X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y2_input} \cell }{Line end Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 316} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ADL_ASSERT}, {\b ADL_MAX_POINT_VAL}, {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b Offset_zoom_param::offset_x}, {\b Offset_zoom_param::offset_y}, {\b Mat2D_uint32::rows}, and {\b Offset_zoom_param::zoom_multiplier}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b adl_character_draw()}, {\b adl_curves_plot_on_figure()}, {\b adl_lines_draw()}, {\b adl_lines_loop_draw()}, {\b adl_rectangle_draw_min_max()}, {\b adl_rectangle_fill_min_max()}, and {\b adl_tri_draw()}.}\par
}
{\xe \v adl_linear_map\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_linear_map}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float adl_linear_map (float  {\i s}, float  {\i min_in}, float  {\i max_in}, float  {\i min_out}, float  {\i max_out})}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Affine map from one scalar range to another (no clamping). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s} \cell }{Input value. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_in} \cell }{Input range minimum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_in} \cell }{Input range maximum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_out} \cell }{Output range minimum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_out} \cell }{Output range maximum. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Mapped value in the output range (may exceed if s is out-of-range). \par
}}}{
Definition at line {\b 1798} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, and {\b render()}.}\par
}
{\xe \v adl_linear_sRGB_to_okLab\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_linear_sRGB_to_okLab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_linear_sRGB_to_okLab (uint32_t  {\i hex_ARGB}, float *  {\i L}, float *  {\i a}, float *  {\i b})}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to Oklab components. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Oklab components are returned in ranges: L in [0,1], a in [-0.5,0.5], b in [-0.5,0.5] (typical). Input is assumed to be linear sRGB.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{Input color (0xAARRGGBB). Alpha is ignored. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{[out] Perceptual lightness. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{[out] First opponent axis. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{[out] Second opponent axis. \cell }
{\row }
}
}{
Definition at line {\b 1878} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b HexARGB_RGB_VAR}.}\par
{
\ql
Referenced by {\b adl_linear_sRGB_to_okLch()}.}\par
}
{\xe \v adl_linear_sRGB_to_okLch\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_linear_sRGB_to_okLch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_linear_sRGB_to_okLch (uint32_t  {\i hex_ARGB}, float *  {\i L}, float *  {\i c}, float *  {\i h_deg})}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to OkLch components. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{Input color (0xAARRGGBB). Alpha is ignored. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{[out] Lightness in [0,1]. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{[out] Chroma (non-negative). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i h_deg} \cell }{[out] Hue angle in degrees [-180,180] from atan2. \cell }
{\row }
}
}{
Definition at line {\b 1945} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_linear_sRGB_to_okLab()}, and {\b PI}.}\par
{
\ql
Referenced by {\b adl_interpolate_ARGBcolor_on_okLch()}.}\par
}
{\xe \v adl_lines_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_lines_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_lines_draw (const {\b Mat2D_uint32}  {\i screen_mat}, const {\b Point} *  {\i points}, const size_t  {\i len}, const uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a polyline connecting an array of points. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draws segments between consecutive points: p[0]-p[1]-...-p[len-1].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i points} \cell }{Array of points in pixel space (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of points in the array (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 403} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, and {\b points}.}\par
{
\ql
Referenced by {\b adl_grid_draw()}.}\par
}
{\xe \v adl_lines_loop_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_lines_loop_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_lines_loop_draw (const {\b Mat2D_uint32}  {\i screen_mat}, const {\b Point} *  {\i points}, const size_t  {\i len}, const uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a closed polyline (loop). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Same as adl_lines_draw, plus an extra segment from the last point back to the first point.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i points} \cell }{Array of points in pixel space (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of points in the array (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 423} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, and {\b points}.}\par
{
\ql
Referenced by {\b adl_quad_draw()}.}\par
}
{\xe \v adl_max_min_values_draw_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_max_min_values_draw_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_max_min_values_draw_on_figure ({\b Figure}  {\i figure})}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw min/max numeric labels for the current data range. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Renders textual min/max values for both axes inside the figure area. Assumes figure.min_x/max_x/min_y/max_y have been populated.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{{\b Figure} whose labels are drawn into its own pixel buffer. \cell }
{\row }
}
}{
Definition at line {\b 2103} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ADL_FIGURE_AXIS_COLOR}, {\b ADL_MAX_CHARACTER_OFFSET}, {\b ADL_MIN_CHARACTER_OFFSET}, {\b adl_sentence_draw()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D_uint32::rows}, {\b Figure::x_axis_head_size}, and {\b Figure::y_axis_head_size}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v adl_okLab_to_linear_sRGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_okLab_to_linear_sRGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_okLab_to_linear_sRGB (float  {\i L}, float  {\i a}, float  {\i b}, uint32_t *  {\i hex_ARGB})}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert Oklab components to a linear sRGB ARGB color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output RGB components are clamped to [0,255], alpha is set to 255.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{Oklab lightness. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Oklab a component. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{Oklab b component. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{[out] Output color (0xAARRGGBB, A=255). \cell }
{\row }
}
}{
Definition at line {\b 1913} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b RGBA_hexARGB}.}\par
{
\ql
Referenced by {\b adl_okLch_to_linear_sRGB()}.}\par
}
{\xe \v adl_okLch_to_linear_sRGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_okLch_to_linear_sRGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_okLch_to_linear_sRGB (float  {\i L}, float  {\i c}, float  {\i h_deg}, uint32_t *  {\i hex_ARGB})}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert OkLch components to a linear sRGB ARGB color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Hue is wrapped to [0,360). Output RGB is clamped to [0,255], alpha=255.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{Lightness. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{Chroma. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i h_deg} \cell }{Hue angle in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{[out] Output color (0xAARRGGBB, A=255). \cell }
{\row }
}
}{
Definition at line {\b 1964} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_okLab_to_linear_sRGB()}, and {\b PI}.}\par
{
\ql
Referenced by {\b adl_interpolate_ARGBcolor_on_okLch()}.}\par
}
{\xe \v adl_point_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_point_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_point_draw ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i x}, int  {\i y}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a single pixel with alpha blending. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies the pan/zoom transform and writes the pixel if it falls inside the destination bounds. The source color is blended over the existing pixel using the source alpha; the stored alpha is set to 255.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{X coordinate in pixels (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y} \cell }{Y coordinate in pixels (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Source color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 283} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b HexARGB_RGBA_VAR}, {\b MAT2D_AT_UINT32}, {\b Offset_zoom_param::offset_x}, {\b Offset_zoom_param::offset_y}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, and {\b Offset_zoom_param::zoom_multiplier}.}\par
{
\ql
Referenced by {\b adl_circle_draw()}, {\b adl_circle_fill()}, {\b adl_figure_copy_to_screen()}, {\b adl_line_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v adl_quad2tris\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad2tris}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad2tris ({\b Quad}  {\i quad}, {\b Tri} *  {\i tri1}, {\b Tri} *  {\i tri2}, char  {\i split_line}[])}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Split a quad into two triangles along a chosen diagonal. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The split is controlled by split_line:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"02" splits along diagonal from vertex 0 to vertex 2.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"13" splits along diagonal from vertex 1 to vertex 3.\par}
The function copies positions, per-vertex colors, light_intensity, and the to_draw flag into the output triangles.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{Input quad. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri1} \cell }{[out] First output triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri2} \cell }{[out] Second output triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i split_line} \cell }{Null-terminated code: "02" or "13". \cell }
{\row }
}
}{
Definition at line {\b 1818} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b Tri::colors}, {\b Quad::colors}, {\b Tri::light_intensity}, {\b Quad::light_intensity}, {\b Tri::points}, {\b Quad::points}, {\b Tri::to_draw}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a quad (four points, looped). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Depth buffer is not used in this outline variant.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Unused for outline; safe to pass a dummy {\b Mat2D}. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} to draw in pixel space (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 943} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_lines_loop_draw()}, and {\b Quad::points}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_draw()}, and {\b render()}.}\par
}
{\xe \v adl_quad_fill\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_fill ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad using mean-value (Barycentric) coordinates and flat base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs a depth test against inv_z_buffer and modulates the base color with the average light_intensity of the quad's vertices.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 961} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b Quad::light_intensity}, {\b MAT2D_AT}, {\b Quad::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_fill()}.}\par
}
{\xe \v adl_quad_fill_interpolate_color_mean_value\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_fill_interpolate_color_mean_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_fill_interpolate_color_mean_value ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-vertex colors (mean value coords). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates ARGB vertex colors using mean-value coordinates, optionally modulated by the average light_intensity. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} in pixel space with quad.colors[] set. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1149} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b adl_tan_half_angle()}, {\b Quad::colors}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b Quad::light_intensity}, {\b MAT2D_AT}, {\b Quad::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad_mesh_fill_interpolate_color()}, and {\b render()}.}\par
}
{\xe \v adl_quad_fill_interpolate_normal_mean_value\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_fill_interpolate_normal_mean_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_fill_interpolate_normal_mean_value ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-pixel light interpolation (mean value coords). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across the quad using mean-value coordinates and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1055} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b adl_tan_half_angle()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b Quad::light_intensity}, {\b MAT2D_AT}, {\b Quad::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_fill_interpolate_normal()}.}\par
}
{\xe \v adl_quad_mesh_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all quads in a mesh. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Skips elements with to_draw == false. Depth buffer is not used.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Unused for outline; safe to pass a dummy {\b Mat2D}. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1253} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_draw()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_mesh_fill\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_fill ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh with a uniform base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies per-quad average light_intensity. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1277} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_fill()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_mesh_fill_interpolate_color\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_fill_interpolate_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_fill_interpolate_color ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using per-vertex colors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates quad.colors[] across each quad with mean-value coordinates. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1334} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_mesh_fill_interpolate_normal\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_fill_interpolate_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_fill_interpolate_normal ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using interpolated lighting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across quads and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1304} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b Quad_mesh::elements}, {\b HexARGB_RGBA_VAR}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_rectangle_draw_min_max\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_rectangle_draw_min_max}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_rectangle_draw_min_max ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i min_x}, int  {\i max_x}, int  {\i min_y}, int  {\i max_y}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a rectangle outline defined by min/max corners (inclusive). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_x} \cell }{Minimum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_x} \cell }{Maximum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_y} \cell }{Minimum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_y} \cell }{Maximum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 906} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}.}\par
{
\ql
Referenced by {\b adl_character_draw()}.}\par
}
{\xe \v adl_rectangle_fill_min_max\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_rectangle_fill_min_max}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_rectangle_fill_min_max ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i min_x}, int  {\i max_x}, int  {\i min_y}, int  {\i max_y}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a rectangle defined by min/max corners (inclusive). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_x} \cell }{Minimum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_x} \cell }{Maximum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_y} \cell }{Minimum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_y} \cell }{Maximum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Fill color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 925} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}.}\par
{
\ql
Referenced by {\b adl_character_draw()}.}\par
}
{\xe \v adl_sentence_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_sentence_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_sentence_draw ({\b Mat2D_uint32}  {\i screen_mat}, const char  {\i sentence}[], size_t  {\i len}, const int  {\i x_top_left}, const int  {\i y_top_left}, const int  {\i hight_pixel}, const uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a horizontal sentence using vector glyphs. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Characters are laid out left-to-right with a spacing derived from the character height. All characters share the same height.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sentence} \cell }{ASCII string buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of characters to draw from sentence. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_top_left} \cell }{X of top-left of the first character (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_top_left} \cell }{Y of top-left of the first character (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hight_pixel} \cell }{Character height in pixels (spelled as in API). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 882} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_character_draw()}, {\b ADL_MAX_CHARACTER_OFFSET}, and {\b ADL_MIN_CHARACTER_OFFSET}.}\par
{
\ql
Referenced by {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v adl_tan_half_angle\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tan_half_angle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float adl_tan_half_angle ({\b Point}  {\i vi}, {\b Point}  {\i vj}, {\b Point}  {\i p}, float  {\i li}, float  {\i lj})}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute tan(alpha/2) for the angle at point p between segments p->vi and p->vj. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uses the identity tan(alpha/2) = |a\'D7b| / (|a||b| + a\'B7b), where a = vi - p and b = vj - p. The lengths li = |a| and lj = |b| are passed in to avoid recomputation.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i vi} \cell }{Vertex i. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i vj} \cell }{Vertex j. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Pivot point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i li} \cell }{Precomputed |vi - p|. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lj} \cell }{Precomputed |vj - p|. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
tan(alpha/2) (non-negative). \par
}}}{
Definition at line {\b 1778} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b adl_quad_fill_interpolate_color_mean_value()}, and {\b adl_quad_fill_interpolate_normal_mean_value()}.}\par
}
{\xe \v adl_tri_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Tri}  {\i tri}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1402} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, {\b Tri::points}, {\b tri}, {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_draw()}, and {\b render()}.}\par
}
{\xe \v adl_tri_fill_Pinedas_rasterizer\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_fill_Pinedas_rasterizer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_fill_Pinedas_rasterizer ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Tri}  {\i tri}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with flat base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uses the top-left fill convention and performs a depth test using inverse-Z computed from per-vertex z and w.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1425} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b is_top_left}, {\b Tri::light_intensity}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Tri::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b tri}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_fill_Pinedas_rasterizer()}.}\par
}
{\xe \v adl_tri_fill_Pinedas_rasterizer_interpolate_color\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_fill_Pinedas_rasterizer_interpolate_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_fill_Pinedas_rasterizer_interpolate_color ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Tri}  {\i tri}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with per-vertex colors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates tri.colors[] and optionally modulates by average light_intensity. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space with colors set. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1506} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Tri::colors}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b is_top_left}, {\b Tri::light_intensity}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Tri::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b tri}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, and {\b render()}.}\par
}
{\xe \v adl_tri_fill_Pinedas_rasterizer_interpolate_normal\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_fill_Pinedas_rasterizer_interpolate_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_fill_Pinedas_rasterizer_interpolate_normal ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Tri}  {\i tri}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle with interpolated lighting over a uniform color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across the triangle and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1597} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b is_top_left}, {\b Tri::light_intensity}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Tri::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b tri}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v adl_tri_mesh_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Tri_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all triangles in a mesh. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Skips elements with to_draw == false.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1679} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_tri_draw()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::to_draw}, and {\b tri}.}\par
}
{\xe \v adl_tri_mesh_fill_Pinedas_rasterizer\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_fill_Pinedas_rasterizer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_fill_Pinedas_rasterizer ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Tri_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies average light_intensity per triangle. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1701} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_tri_is_valid}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::to_draw}, and {\b tri}.}\par
}
{\xe \v adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Tri_mesh}  {\i mesh}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies average light_intensity per triangle. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1725} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_tri_is_valid}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::to_draw}, and {\b tri}.}\par
}
{\xe \v adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Tri_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with interpolated lighting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across each triangle and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1750} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_tri_is_valid}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::to_draw}, and {\b tri}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Draw_Library.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00023 {\cf21 #ifndef ALMOG_DRAW_LIBRARY_H_}\par
00024 {\cf21 #define ALMOG_DRAW_LIBRARY_H_}\par
00025 \par
00026 {\cf21 #include <math.h>}\par
00027 {\cf21 #include <stdint.h>}\par
00028 {\cf21 #include <limits.h>}\par
00029 {\cf21 #include <string.h>}\par
00030 {\cf21 #include <float.h>}\par
00031 \par
00032 {\cf21 #include "./Matrix2D.h"}\par
00033 {\cf21 #include "./Almog_Dynamic_Array.h"}\par
00034 \par
00035 {\cf21 #ifndef ADL_ASSERT}\par
00036 {\cf21 #include <assert.h>}\par
00037 {\cf21 #define ADL_ASSERT assert}\par
00038 {\cf21 #endif}\par
00039 \par
00040 {\cf17 typedef} {\cf17 struct }\{\par
00041     {\cf18 float} zoom_multiplier;\par
00042     {\cf18 float} offset_x;\par
00043     {\cf18 float} offset_y;\par
00044     {\cf18 int} mouse_x;\par
00045     {\cf18 int} mouse_y;\par
00046 \} Offset_zoom_param;\par
00047 \par
00048 {\cf21 #ifndef POINT}\par
00049 {\cf21 #define POINT}\par
00050 {\cf17 typedef} {\cf17 struct }\{\par
00051     {\cf18 float} x;\par
00052     {\cf18 float} y;\par
00053     {\cf18 float} z;\par
00054     {\cf18 float} w;\par
00055 \} Point ;\par
00056 {\cf21 #endif}\par
00057 \par
00058 {\cf21 #ifndef CURVE}\par
00059 {\cf21 #define CURVE}\par
00060 {\cf17 typedef} {\cf17 struct }\{\par
00061     uint32_t color;\par
00062     {\cf18 size_t} length;\par
00063     {\cf18 size_t} capacity;\par
00064     Point *elements;\par
00065 \} Curve;\par
00066 {\cf21 #endif}\par
00067 \par
00068 {\cf21 #ifndef CURVE_ADA}\par
00069 {\cf21 #define CURVE_ADA}\par
00070 {\cf17 typedef} {\cf17 struct }\{\par
00071     {\cf18 size_t} length;\par
00072     {\cf18 size_t} capacity;\par
00073     Curve *elements;\par
00074 \} Curve_ada;\par
00075 {\cf21 #endif}\par
00076 \par
00077 {\cf21 #ifndef TRI}\par
00078 {\cf21 #define TRI}\par
00079 {\cf17 typedef} {\cf17 struct }\{\par
00080     Point points[3];\par
00081     Point tex_points[3];\par
00082     Point normals[3];\par
00083     uint32_t colors[3];\par
00084     {\cf18 bool} to_draw;\par
00085     {\cf18 float} light_intensity[3];\par
00086 \} Tri;\par
00087 {\cf21 #endif}\par
00088 \par
00089 {\cf21 #ifndef QUAD}\par
00090 {\cf21 #define QUAD}\par
00091 {\cf17 typedef} {\cf17 struct }\{\par
00092     Point points[4];\par
00093     Point normals[4];\par
00094     uint32_t colors[4];\par
00095     {\cf18 bool} to_draw;\par
00096     {\cf18 float} light_intensity[4];\par
00097 \} Quad;\par
00098 {\cf21 #endif}\par
00099 \par
00100 {\cf21 #ifndef TRI_MESH}\par
00101 {\cf21 #define TRI_MESH}\par
00102 {\cf17 typedef} {\cf17 struct }\{\par
00103     {\cf18 size_t} length;\par
00104     {\cf18 size_t} capacity;\par
00105     Tri *elements;\par
00106 \} Tri_mesh; {\cf20 /* Tri ada array */}\par
00107 {\cf21 #endif}\par
00108 \par
00109 {\cf21 #ifndef QUAD_MESH}\par
00110 {\cf21 #define QUAD_MESH}\par
00111 {\cf17 typedef} {\cf17 struct }\{\par
00112     {\cf18 size_t} length;\par
00113     {\cf18 size_t} capacity;\par
00114     Quad *elements;\par
00115 \} Quad_mesh; {\cf20 /* Quad ada array */}\par
00116 {\cf21 #endif}\par
00117 \par
00118 {\cf17 typedef} {\cf17 struct }\{\par
00119     {\cf18 int} min_x_pixel;\par
00120     {\cf18 int} max_x_pixel;\par
00121     {\cf18 int} min_y_pixel;\par
00122     {\cf18 int} max_y_pixel;\par
00123     {\cf18 float} min_x;\par
00124     {\cf18 float} max_x;\par
00125     {\cf18 float} min_y;\par
00126     {\cf18 float} max_y;\par
00127     {\cf18 int} x_axis_head_size;\par
00128     {\cf18 int} y_axis_head_size;\par
00129     Offset_zoom_param offset_zoom_param;\par
00130     Curve_ada src_curve_array;\par
00131     Point top_left_position;\par
00132     Mat2D_uint32 pixels_mat;\par
00133     Mat2D inv_z_buffer_mat;\par
00134     uint32_t background_color;\par
00135     {\cf18 bool} to_draw_axis;\par
00136     {\cf18 bool} to_draw_max_min_values;\par
00137 \} Figure;\par
00138 \par
00139 {\cf17 typedef} {\cf17 struct }\{\par
00140     Curve_ada curves;\par
00141     {\cf18 float} min_e1;\par
00142     {\cf18 float} max_e1;\par
00143     {\cf18 float} min_e2;\par
00144     {\cf18 float} max_e2;\par
00145     {\cf18 int} num_samples_e1;\par
00146     {\cf18 int} num_samples_e2;\par
00147     {\cf18 float} de1;\par
00148     {\cf18 float} de2;\par
00149     {\cf18 char} plane[3];\par
00150 \} Grid; {\cf20 /* direction: e1, e2 */}\par
00151 \par
00152 \par
00153 {\cf21 #ifndef HexARGB_RGBA}\par
00154 {\cf21 #define HexARGB_RGBA(x) ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)}\par
00155 {\cf21 #endif}\par
00156 {\cf21 #ifndef HexARGB_RGB_VAR}\par
00157 {\cf21 #define HexARGB_RGB_VAR(x, r, g, b) r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);}\par
00158 {\cf21 #endif}\par
00159 {\cf21 #ifndef HexARGB_RGBA_VAR}\par
00160 {\cf21 #define HexARGB_RGBA_VAR(x, r, g, b, a) r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)}\par
00161 {\cf21 #endif}\par
00162 {\cf21 #ifndef RGB_hexRGB}\par
00163 {\cf21 #define RGB_hexRGB(r, g, b) (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}\par
00164 {\cf21 #endif}\par
00165 {\cf21 #ifndef RGBA_hexARGB}\par
00166 {\cf21 #define RGBA_hexARGB(r, g, b, a) (int)(0x01000000l*(int)(fminf(a, 255)) + 0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}\par
00167 {\cf21 #endif}\par
00168 \par
00169 \par
00170 {\cf18 void}    adl_point_draw(Mat2D_uint32 screen_mat, {\cf18 int} x, {\cf18 int} y, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00171 {\cf18 void}    adl_line_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 float} x1_input, {\cf17 const} {\cf18 float} y1_input, {\cf17 const} {\cf18 float} x2_input, {\cf17 const} {\cf18 float} y2_input, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00172 {\cf18 void}    adl_lines_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param);\par
00173 {\cf18 void}    adl_lines_loop_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param);\par
00174 {\cf18 void}    adl_arrow_draw(Mat2D_uint32 screen_mat, {\cf18 int} xs, {\cf18 int} ys, {\cf18 int} xe, {\cf18 int} ye, {\cf18 float} head_size, {\cf18 float} angle_deg, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00175 \par
00176 {\cf18 void}    adl_character_draw(Mat2D_uint32 screen_mat, {\cf18 char} c, {\cf18 int} width_pixel, {\cf18 int} hight_pixel, {\cf18 int} x_top_left, {\cf18 int} y_top_left, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00177 {\cf18 void}    adl_sentence_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 char} sentence[], {\cf18 size_t} len, {\cf17 const} {\cf18 int} x_top_left, {\cf17 const} {\cf18 int} y_top_left, {\cf17 const} {\cf18 int} hight_pixel, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param);\par
00178 \par
00179 {\cf18 void}    adl_rectangle_draw_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00180 {\cf18 void}    adl_rectangle_fill_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00181 \par
00182 {\cf18 void}    adl_quad_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00183 {\cf18 void}    adl_quad_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00184 {\cf18 void}    adl_quad_fill_interpolate_normal_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00185 {\cf18 void}    adl_quad_fill_interpolate_color_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, Offset_zoom_param offset_zoom_param);\par
00186 \par
00187 {\cf18 void}    adl_quad_mesh_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00188 {\cf18 void}    adl_quad_mesh_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00189 {\cf18 void}    adl_quad_mesh_fill_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00190 {\cf18 void}    adl_quad_mesh_fill_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, Offset_zoom_param offset_zoom_param);\par
00191 \par
00192 {\cf18 void}    adl_circle_draw(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00193 {\cf18 void}    adl_circle_fill(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00194 \par
00195 {\cf18 void}    adl_tri_draw(Mat2D_uint32 screen_mat, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00196 {\cf18 void}    adl_tri_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00197 {\cf18 void}    adl_tri_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, Offset_zoom_param offset_zoom_param);\par
00198 {\cf18 void}    adl_tri_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00199 \par
00200 {\cf18 void}    adl_tri_mesh_draw(Mat2D_uint32 screen_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00201 {\cf18 void}    adl_tri_mesh_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00202 {\cf18 void}    adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, Offset_zoom_param offset_zoom_param);\par
00203 {\cf18 void}    adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00204 \par
00205 {\cf18 float}   adl_tan_half_angle(Point vi, Point vj, Point p, {\cf18 float} li, {\cf18 float} lj);\par
00206 {\cf18 float}   adl_linear_map({\cf18 float} s, {\cf18 float} min_in, {\cf18 float} max_in, {\cf18 float} min_out, {\cf18 float} max_out);\par
00207 {\cf18 void}    adl_quad2tris(Quad quad, Tri *tri1, Tri *tri2, {\cf18 char} split_line[]);\par
00208 {\cf18 void}    adl_linear_sRGB_to_okLab(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *a, {\cf18 float} *b);\par
00209 {\cf18 void}    adl_okLab_to_linear_sRGB({\cf18 float} L, {\cf18 float} a, {\cf18 float} b, uint32_t *hex_ARGB);\par
00210 {\cf18 void}    adl_linear_sRGB_to_okLch(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *c, {\cf18 float} *h_deg);\par
00211 {\cf18 void}    adl_okLch_to_linear_sRGB({\cf18 float} L, {\cf18 float} c, {\cf18 float} h_deg, uint32_t *hex_ARGB);\par
00212 {\cf18 void}    adl_interpolate_ARGBcolor_on_okLch(uint32_t color1, uint32_t color2, {\cf18 float} t, {\cf18 float} num_of_rotations, uint32_t *color_out);\par
00213 \par
00214 Figure  adl_figure_alloc({\cf18 size_t} rows, {\cf18 size_t} cols, Point top_left_position);\par
00215 {\cf18 void}    adl_figure_copy_to_screen(Mat2D_uint32 screen_mat, Figure figure);\par
00216 {\cf18 void}    adl_axis_draw_on_figure(Figure *figure);\par
00217 {\cf18 void}    adl_max_min_values_draw_on_figure(Figure figure);\par
00218 {\cf18 void}    adl_curve_add_to_figure(Figure *figure, Point *src_points, {\cf18 size_t} src_len, uint32_t color);\par
00219 {\cf18 void}    adl_curves_plot_on_figure(Figure figure);\par
00220 {\cf18 void}    adl_2Dscalar_interp_on_figure(Figure figure, {\cf18 double} *x_2Dmat, {\cf18 double} *y_2Dmat, {\cf18 double} *scalar_2Dmat, {\cf18 int} ni, {\cf18 int} nj, {\cf18 char} color_scale[], {\cf18 float} num_of_rotations);\par
00221 \par
00222 Grid    adl_cartesian_grid_create({\cf18 float} min_e1, {\cf18 float} max_e1, {\cf18 float} min_e2, {\cf18 float} max_e2, {\cf18 int} num_samples_e1, {\cf18 int} num_samples_e2, {\cf18 char} plane[], {\cf18 float} third_direction_position);\par
00223 {\cf18 void}    adl_grid_draw(Mat2D_uint32 screen_mat, Grid grid, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00224 \par
00225 {\cf21 #endif }{\cf20 /*ALMOG_RENDER_SHAPES_H_*/}{\cf21 }\par
00226 \par
00227 {\cf21 #ifdef ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00228 {\cf21 #undef ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00229 \par
00230 {\cf21 #define RED_hexARGB    0xFFFF0000}\par
00231 {\cf21 #define GREEN_hexARGB  0xFF00FF00}\par
00232 {\cf21 #define BLUE_hexARGB   0xFF0000FF}\par
00233 {\cf21 #define PURPLE_hexARGB 0xFFFF00FF}\par
00234 {\cf21 #define CYAN_hexARGB   0xFF00FFFF}\par
00235 {\cf21 #define YELLOW_hexARGB 0xFFFFFF00}\par
00236 \par
00237 {\cf21 #define edge_cross_point(a1, b, a2, p) (b.x-a1.x)*(p.y-a2.y)-(b.y-a1.y)*(p.x-a2.x)}\par
00238 {\cf21 #define is_top_edge(x, y) (y == 0 && x > 0)}\par
00239 {\cf21 #define is_left_edge(x, y) (y < 0)}\par
00240 {\cf21 #define is_top_left(ps, pe) (is_top_edge(pe.x-ps.x, pe.y-ps.y) || is_left_edge(pe.x-ps.x, pe.y-ps.y))}\par
00241 \par
00242 {\cf21 #define ADL_MAX_POINT_VAL 1e5}\par
00243 {\cf21 #define adl_assert_point_is_valid(p) ADL_ASSERT(isfinite(p.x) && isfinite(p.y) && isfinite(p.z) && isfinite(p.w))}\par
00244 {\cf21 #define adl_assert_tri_is_valid(tri) adl_assert_point_is_valid(tri.points[0]); \\}\par
00245 {\cf21         adl_assert_point_is_valid(tri.points[1]);                              \\}\par
00246 {\cf21         adl_assert_point_is_valid(tri.points[2])}\par
00247 {\cf21 #define adl_assert_quad_is_valid(quad) adl_assert_point_is_valid(quad.points[0]);   \\}\par
00248 {\cf21         adl_assert_point_is_valid(quad.points[1]);                                  \\}\par
00249 {\cf21         adl_assert_point_is_valid(quad.points[2]);                                  \\}\par
00250 {\cf21         adl_assert_point_is_valid(quad.points[3])}\par
00251 \par
00252 {\cf21 #define ADL_FIGURE_PADDING_PRECENTAGE 20}\par
00253 {\cf21 #define ADL_MAX_FIGURE_PADDING 70}\par
00254 {\cf21 #define ADL_MIN_FIGURE_PADDING 20}\par
00255 {\cf21 #define ADL_MAX_HEAD_SIZE 15}\par
00256 {\cf21 #define ADL_FIGURE_HEAD_ANGLE_DEG 30}\par
00257 {\cf21 #define ADL_FIGURE_AXIS_COLOR 0xff000000}\par
00258 \par
00259 {\cf21 #define ADL_MAX_CHARACTER_OFFSET 10}\par
00260 {\cf21 #define ADL_MIN_CHARACTER_OFFSET 5}\par
00261 {\cf21 #define ADL_MAX_SENTENCE_LEN 256}\par
00262 {\cf21 #define ADL_MAX_ZOOM 1e3}\par
00263 \par
00264 {\cf21 #define ADL_DEFAULT_OFFSET_ZOOM (Offset_zoom_param)\{1,0,0,0,0\}}\par
00265 {\cf21 #define adl_offset_zoom_point(p, window_w, window_h, offset_zoom_param)                                             \\}\par
00266 {\cf21     (p).x = ((p).x - (window_w)/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + (window_w)/2; \\}\par
00267 {\cf21     (p).y = ((p).y - (window_h)/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + (window_h)/2}\par
00268 \par
00283 {\cf18 void} adl_point_draw(Mat2D_uint32 screen_mat, {\cf18 int} x, {\cf18 int} y, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00284 \{\par
00285     {\cf18 float} window_w = (float)screen_mat.cols;\par
00286     {\cf18 float} window_h = ({\cf18 float})screen_mat.rows;\par
00287 \par
00288     x = (x - window_w/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + window_w/2;\par
00289     y = (y - window_h/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + window_h/2;\par
00290 \par
00291     {\cf19 if} ((x < ({\cf18 int})screen_mat.cols && y < (int)screen_mat.rows) && (x >= 0 && y >= 0)) \{ {\cf20 /* point is in screen */}\par
00292         uint8_t r_new, g_new, b_new, a_new;\par
00293         uint8_t r_current, g_current, b_current, a_current;\par
00294         HexARGB_RGBA_VAR(MAT2D_AT_UINT32(screen_mat, y, x), r_current, g_current, b_current, a_current);\par
00295         HexARGB_RGBA_VAR(color, r_new, g_new, b_new, a_new);\par
00296         MAT2D_AT_UINT32(screen_mat, y, x) = RGBA_hexARGB(r_current*(1-a_new/255.0f) + r_new*a_new/255.0f, g_current*(1-a_new/255.0f) + g_new*a_new/255.0f, b_current*(1-a_new/255.0f) + b_new*a_new/255.0f, 255);\par
00297         (void)a_current;\par
00298     \}\par
00299 \}\par
00300 \par
00316 {\cf18 void} adl_line_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 float} x1_input, {\cf17 const} {\cf18 float} y1_input, {\cf17 const} {\cf18 float} x2_input, {\cf17 const} {\cf18 float} y2_input, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00317 \{\par
00318     {\cf20 /* This function is inspired by the Olive.c function developed by 'Tsoding' on his YouTube channel. You can fined the video in this link: https://youtu.be/LmQKZmQh1ZQ?list=PLpM-Dvs8t0Va-Gb0Dp4d9t8yvNFHaKH6N&t=4683. */}\par
00319 \par
00320     {\cf18 float} window_w = (float)screen_mat.cols;\par
00321     {\cf18 float} window_h = ({\cf18 float})screen_mat.rows;\par
00322 \par
00323     {\cf18 int} x1 = (x1_input - window_w/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + window_w/2;\par
00324     {\cf18 int} x2 = (x2_input - window_w/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + window_w/2;\par
00325     {\cf18 int} y1 = (y1_input - window_h/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + window_h/2;\par
00326     {\cf18 int} y2 = (y2_input - window_h/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + window_h/2;\par
00327 \par
00328     ADL_ASSERT(({\cf18 int})fabsf(fabsf(({\cf18 float})x2) - fabsf(({\cf18 float})x1)) < ADL_MAX_POINT_VAL);\par
00329     ADL_ASSERT(({\cf18 int})fabsf(fabsf(({\cf18 float})y2) - fabsf(({\cf18 float})y1)) < ADL_MAX_POINT_VAL);\par
00330 \par
00331     {\cf18 int} x = x1;\par
00332     {\cf18 int} y = y1;\par
00333     {\cf18 int} dx, dy;\par
00334 \par
00335     adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00336 \par
00337     dx = x2 - x1;\par
00338     dy = y2 - y1;\par
00339 \par
00340     ADL_ASSERT(dy > INT_MIN && dy < INT_MAX);\par
00341     ADL_ASSERT(dx > INT_MIN && dx < INT_MAX);\par
00342 \par
00343     {\cf19 if} (0 == dx && 0 == dy) {\cf19 return};\par
00344     {\cf19 if} (0 == dx) \{\par
00345         {\cf19 while} (x != x2 || y != y2) \{\par
00346             {\cf19 if} (dy > 0) \{\par
00347                 y++;\par
00348             \}\par
00349             {\cf19 if} (dy < 0) \{\par
00350                 y--;\par
00351             \}\par
00352             adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00353         \}\par
00354         {\cf19 return};\par
00355     \}\par
00356     {\cf19 if} (0 == dy) \{\par
00357         {\cf19 while} (x != x2 || y != y2) \{\par
00358             {\cf19 if} (dx > 0) \{\par
00359                 x++;\par
00360             \}\par
00361             {\cf19 if} (dx < 0) \{\par
00362                 x--;\par
00363             \}\par
00364             adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00365         \}\par
00366         {\cf19 return};\par
00367     \}\par
00368 \par
00369     {\cf20 /* float m = (float)dy / dx */}\par
00370     {\cf18 int} b = y1 - dy * x1 / dx;\par
00371 \par
00372     {\cf19 if} (x1 > x2) \{\par
00373         {\cf18 int} temp_x = x1;\par
00374         x1 = x2;\par
00375         x2 = temp_x;\par
00376     \}\par
00377     {\cf19 for} (x = x1; x < x2; x++) \{\par
00378         {\cf18 int} sy1 = dy * x / dx + b;\par
00379         {\cf18 int} sy2 = dy * (x + 1) / dx + b;\par
00380         {\cf19 if} (sy1 > sy2) \{\par
00381             {\cf18 int} temp_y = sy1;\par
00382             sy1 = sy2;\par
00383             sy2 = temp_y;\par
00384         \}\par
00385         {\cf19 for} (y = sy1; y <= sy2; y++) \{\par
00386             adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00387         \}\par
00388     \}\par
00389 \par
00390 \}\par
00391 \par
00403 {\cf18 void} adl_lines_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param)\par
00404 \{\par
00405     {\cf19 if} (len == 0) {\cf19 return};\par
00406     {\cf19 for} ({\cf18 size_t} i = 0; i < len-1; i++) \{\par
00407         adl_line_draw(screen_mat, points[i].x, points[i].y, points[i+1].x, points[i+1].y, color, offset_zoom_param);\par
00408     \}\par
00409 \}\par
00410 \par
00423 {\cf18 void} adl_lines_loop_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param)\par
00424 \{\par
00425     {\cf19 if} (len == 0) {\cf19 return};\par
00426     {\cf19 for} ({\cf18 size_t} i = 0; i < len-1; i++) \{\par
00427         adl_line_draw(screen_mat, points[i].x, points[i].y, points[i+1].x, points[i+1].y, color, offset_zoom_param);\par
00428     \}\par
00429     adl_line_draw(screen_mat, points[len-1].x, points[len-1].y, points[0].x, points[0].y, color, offset_zoom_param);\par
00430 \}\par
00431 \par
00432 \par
00451 {\cf18 void} adl_arrow_draw(Mat2D_uint32 screen_mat, {\cf18 int} xs, {\cf18 int} ys, {\cf18 int} xe, {\cf18 int} ye, {\cf18 float} head_size, {\cf18 float} angle_deg, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00452 \{\par
00453     Mat2D pe = mat2D_alloc(3, 1);\par
00454     mat2D_fill(pe, 0);\par
00455     MAT2D_AT(pe, 0, 0) = xe;\par
00456     MAT2D_AT(pe, 1, 0) = ye;\par
00457     Mat2D v1 = mat2D_alloc(3, 1);\par
00458     mat2D_fill(v1, 0);\par
00459     Mat2D v2 = mat2D_alloc(3, 1);\par
00460     mat2D_fill(v2, 0);\par
00461     Mat2D temp_v = mat2D_alloc(3, 1);\par
00462     mat2D_fill(temp_v, 0);\par
00463     Mat2D DCM_p = mat2D_alloc(3, 3);\par
00464     mat2D_fill(DCM_p, 0);\par
00465     mat2D_set_rot_mat_z(DCM_p, angle_deg);\par
00466     Mat2D DCM_m = mat2D_alloc(3, 3);\par
00467     mat2D_fill(DCM_m, 0);\par
00468     mat2D_set_rot_mat_z(DCM_m, -angle_deg);\par
00469 \par
00470     {\cf18 int} x_center = xs*head_size + xe*(1-head_size);\par
00471     {\cf18 int} y_center = ys*head_size + ye*(1-head_size);\par
00472 \par
00473     MAT2D_AT(v1, 0, 0) = x_center;\par
00474     MAT2D_AT(v1, 1, 0) = y_center;\par
00475     mat2D_copy(v2, v1);\par
00476 \par
00477     {\cf20 /* v1 */}\par
00478     mat2D_copy(temp_v, v1);\par
00479     mat2D_sub(temp_v, pe);\par
00480     mat2D_fill(v1, 0);\par
00481     mat2D_dot(v1, DCM_p, temp_v);\par
00482     mat2D_add(v1, pe);\par
00483 \par
00484     {\cf20 /* v2 */}\par
00485     mat2D_copy(temp_v, v2);\par
00486     mat2D_sub(temp_v, pe);\par
00487     mat2D_fill(v2, 0);\par
00488     mat2D_dot(v2, DCM_m, temp_v);\par
00489     mat2D_add(v2, pe);\par
00490 \par
00491     adl_line_draw(screen_mat, MAT2D_AT(v1, 0, 0), MAT2D_AT(v1, 1, 0), xe, ye, color, offset_zoom_param);\par
00492     adl_line_draw(screen_mat, MAT2D_AT(v2, 0, 0), MAT2D_AT(v2, 1, 0), xe, ye, color, offset_zoom_param);\par
00493     adl_line_draw(screen_mat, xs, ys, xe, ye, color, offset_zoom_param);\par
00494 \par
00495     mat2D_free(pe);\par
00496     mat2D_free(v1);\par
00497     mat2D_free(v2);\par
00498     mat2D_free(temp_v);\par
00499     mat2D_free(DCM_p);\par
00500     mat2D_free(DCM_m);\par
00501 \}\par
00502 \par
00519 {\cf18 void} adl_character_draw(Mat2D_uint32 screen_mat, {\cf18 char} c, {\cf18 int} width_pixel, {\cf18 int} hight_pixel, {\cf18 int} x_top_left, {\cf18 int} y_top_left, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00520 \{\par
00521     {\cf19 switch} (c)\par
00522     \{\par
00523     {\cf19 case} {\cf23 'a'}:\par
00524     {\cf19 case} {\cf23 'A'}:\par
00525         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel/2, y_top_left, color, offset_zoom_param);\par
00526         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00527         adl_line_draw(screen_mat, x_top_left+width_pixel/6, y_top_left+2*hight_pixel/3, x_top_left+5*width_pixel/6, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00528         {\cf19 break};\par
00529     {\cf19 case} {\cf23 'b'}:\par
00530     {\cf19 case} {\cf23 'B'}:\par
00531         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00532         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00533         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00534         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00535         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00536 \par
00537         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00538 \par
00539         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00540         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00541         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00542         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00543         {\cf19 break};\par
00544     {\cf19 case} {\cf23 'c'}:\par
00545     {\cf19 case} {\cf23 'C'}:\par
00546         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00547         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00548         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00549         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00550         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00551         {\cf19 break};\par
00552     {\cf19 case} {\cf23 'd'}:\par
00553     {\cf19 case} {\cf23 'D'}:\par
00554         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00555         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00556         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00557         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00558         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00559         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left, y_top_left, color, offset_zoom_param);\par
00560         {\cf19 break};\par
00561     {\cf19 case} {\cf23 'e'}:\par
00562     {\cf19 case} {\cf23 'E'}:\par
00563         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left, color, offset_zoom_param);\par
00564         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00565         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00566 \par
00567         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00568         {\cf19 break};\par
00569     {\cf19 case} {\cf23 'f'}:\par
00570     {\cf19 case} {\cf23 'F'}:\par
00571         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left, color, offset_zoom_param);\par
00572         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00573 \par
00574         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00575         {\cf19 break};\par
00576     {\cf19 case} {\cf23 'g'}:\par
00577     {\cf19 case} {\cf23 'G'}:\par
00578         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00579         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00580         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00581         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00582         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00583         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00584         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00585         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00586         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/2, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00587         {\cf19 break};\par
00588     {\cf19 case} {\cf23 'h'}:\par
00589     {\cf19 case} {\cf23 'H'}:\par
00590         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00591         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00592         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00593         {\cf19 break};\par
00594     {\cf19 case} {\cf23 'i'}:\par
00595     {\cf19 case} {\cf23 'I'}:\par
00596         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00597         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00598         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00599         {\cf19 break};\par
00600     {\cf19 case} {\cf23 'j'}:\par
00601     {\cf19 case} {\cf23 'J'}:\par
00602         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00603         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+2*width_pixel/3, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00604         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00605         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00606         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel/6, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00607         {\cf19 break};\par
00608     {\cf19 case} {\cf23 'k'}:\par
00609     {\cf19 case} {\cf23 'K'}:\par
00610         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00611         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00612         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00613         {\cf19 break};\par
00614     {\cf19 case} {\cf23 'l'}:\par
00615     {\cf19 case} {\cf23 'L'}:\par
00616         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00617         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00618         {\cf19 break};\par
00619     {\cf19 case} {\cf23 'm'}:\par
00620     {\cf19 case} {\cf23 'M'}:\par
00621         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left, y_top_left, color, offset_zoom_param);\par
00622         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00623         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00624         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00625         {\cf19 break};\par
00626     {\cf19 case} {\cf23 'n'}:\par
00627     {\cf19 case} {\cf23 'N'}:\par
00628         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left, y_top_left, color, offset_zoom_param);\par
00629         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00630         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00631         {\cf19 break};\par
00632     {\cf19 case} {\cf23 'o'}:\par
00633     {\cf19 case} {\cf23 'O'}:\par
00634         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00635         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00636         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00637         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00638         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00639         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00640         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00641         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00642         {\cf19 break};\par
00643     {\cf19 case} {\cf23 'p'}:\par
00644     {\cf19 case} {\cf23 'P'}:\par
00645         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00646         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00647         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00648         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00649         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00650 \par
00651         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00652         {\cf19 break};\par
00653     {\cf19 case} {\cf23 'q'}:\par
00654     {\cf19 case} {\cf23 'Q'}:\par
00655         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00656         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00657         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00658         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00659         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00660         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00661         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00662         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00663 \par
00664         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00665         {\cf19 break};\par
00666     {\cf19 case} {\cf23 'r'}:\par
00667     {\cf19 case} {\cf23 'R'}:\par
00668         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00669         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00670         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00671         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00672         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00673 \par
00674         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00675 \par
00676         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00677         {\cf19 break};\par
00678     {\cf19 case} {\cf23 's'}:\par
00679     {\cf19 case} {\cf23 'S'}:\par
00680         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00681         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00682         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00683 \par
00684         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00685         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/3, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00686         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00687         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00688 \par
00689         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00690         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00691         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00692         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00693         {\cf19 break};\par
00694     {\cf19 case} {\cf23 't'}:\par
00695     {\cf19 case} {\cf23 'T'}:\par
00696         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00697         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00698         {\cf19 break};\par
00699     {\cf19 case} {\cf23 'u'}:\par
00700     {\cf19 case} {\cf23 'U'}:\par
00701         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00702         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00703         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00704         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00705         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00706         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00707         {\cf19 break};\par
00708     {\cf19 case} {\cf23 'v'}:\par
00709     {\cf19 case} {\cf23 'V'}:\par
00710         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00711         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00712         {\cf19 break};\par
00713     {\cf19 case} {\cf23 'w'}:\par
00714     {\cf19 case} {\cf23 'W'}:\par
00715         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00716         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel/2, y_top_left, color, offset_zoom_param);\par
00717         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00718         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00719         {\cf19 break};\par
00720     {\cf19 case} {\cf23 'x'}:\par
00721     {\cf19 case} {\cf23 'X'}:\par
00722         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00723         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00724         {\cf19 break};\par
00725     {\cf19 case} {\cf23 'y'}:\par
00726     {\cf19 case} {\cf23 'Y'}:\par
00727         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00728         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00729         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00730         {\cf19 break};\par
00731     {\cf19 case} {\cf23 'z'}:\par
00732     {\cf19 case} {\cf23 'Z'}:\par
00733         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00734         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00735         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00736         {\cf19 break};\par
00737     {\cf19 case} {\cf23 '.'}:\par
00738         adl_rectangle_fill_min_max(screen_mat, x_top_left+width_pixel/6, x_top_left+width_pixel/3, y_top_left+5*hight_pixel/6, y_top_left+hight_pixel, color, offset_zoom_param);\par
00739         {\cf19 break};\par
00740     {\cf19 case} {\cf23 ':'}:\par
00741         adl_rectangle_fill_min_max(screen_mat, x_top_left+width_pixel/6, x_top_left+width_pixel/3, y_top_left+5*hight_pixel/6, y_top_left+hight_pixel, color, offset_zoom_param);\par
00742         adl_rectangle_fill_min_max(screen_mat, x_top_left+width_pixel/6, x_top_left+width_pixel/3, y_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00743         {\cf19 break};\par
00744     {\cf19 case} {\cf23 '0'}:\par
00745         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00746         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00747         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00748         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00749         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00750         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00751         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00752         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00753 \par
00754         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00755         {\cf19 break};\par
00756     {\cf19 case} {\cf23 '1'}:\par
00757         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left+width_pixel/2, y_top_left, color, offset_zoom_param);\par
00758         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00759         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00760         {\cf19 break};\par
00761     {\cf19 case} {\cf23 '2'}:\par
00762         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00763         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00764         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00765         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00766         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00767         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00768         {\cf19 break};\par
00769     {\cf19 case} {\cf23 '3'}:\par
00770         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00771         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00772         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00773         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00774         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00775 \par
00776         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00777 \par
00778         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00779         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00780         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00781         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00782         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00783         {\cf19 break};\par
00784     {\cf19 case} {\cf23 '4'}:\par
00785         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00786         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00787         adl_line_draw(screen_mat, x_top_left, y_top_left+2*hight_pixel/3, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00788         {\cf19 break};\par
00789     {\cf19 case} {\cf23 '5'}:\par
00790         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left, color, offset_zoom_param);\par
00791         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00792 \par
00793         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00794         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00795 \par
00796         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00797         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00798         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00799         {\cf19 break};\par
00800     {\cf19 case} {\cf23 '6'}:\par
00801         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00802         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00803         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00804 \par
00805         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00806         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00807         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00808         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00809         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00810         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00811         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00812         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00813         {\cf19 break};\par
00814     {\cf19 case} {\cf23 '7'}:\par
00815         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00816         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00817         {\cf19 break};\par
00818     {\cf19 case} {\cf23 '8'}:\par
00819         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00820         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00821         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00822         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00823         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00824 \par
00825         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00826         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/3, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00827         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00828         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00829 \par
00830         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00831         adl_line_draw(screen_mat, x_top_left, y_top_left+2*hight_pixel/3, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00832         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00833         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00834         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00835         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00836         {\cf19 break};\par
00837     {\cf19 case} {\cf23 '9'}:\par
00838         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00839         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00840         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00841         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00842         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00843         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00844         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00845         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00846         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/3, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00847         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00848         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00849         {\cf19 break};\par
00850     {\cf19 case} {\cf23 '-'}:\par
00851         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00852         {\cf19 break};\par
00853     {\cf19 case} {\cf23 '+'}:\par
00854         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00855         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00856         {\cf19 break};\par
00857     {\cf19 case} {\cf23 ' '}:\par
00858         {\cf19 break};\par
00859     {\cf19 default}:\par
00860         adl_rectangle_draw_min_max(screen_mat, x_top_left, x_top_left+width_pixel, y_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00861         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00862         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00863         {\cf19 break};\par
00864     \}\par
00865 \}\par
00866 \par
00882 {\cf18 void} adl_sentence_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 char} sentence[], {\cf18 size_t} len, {\cf17 const} {\cf18 int} x_top_left, {\cf17 const} {\cf18 int} y_top_left, {\cf17 const} {\cf18 int} hight_pixel, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param)\par
00883 \{\par
00884     {\cf18 int} character_width_pixel = hight_pixel/2;\par
00885     {\cf18 int} current_x_top_left = x_top_left;\par
00886     {\cf18 int} character_x_offset = (int)fmaxf(fminf(ADL_MAX_CHARACTER_OFFSET, character_width_pixel / 5), ADL_MIN_CHARACTER_OFFSET);\par
00887 \par
00888     {\cf19 for} ({\cf18 size_t} char_index = 0; char_index < len; char_index++) \{\par
00889         adl_character_draw(screen_mat, sentence[char_index], character_width_pixel, hight_pixel, current_x_top_left, y_top_left, color, offset_zoom_param);\par
00890         current_x_top_left += character_width_pixel + character_x_offset;\par
00891     \}\par
00892 \par
00893 \}\par
00894 \par
00906 {\cf18 void} adl_rectangle_draw_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00907 \{\par
00908     adl_line_draw(screen_mat, min_x, min_y, max_x, min_y, color, offset_zoom_param);\par
00909     adl_line_draw(screen_mat, min_x, max_y, max_x, max_y, color, offset_zoom_param);\par
00910     adl_line_draw(screen_mat, min_x, min_y, min_x, max_y, color, offset_zoom_param);\par
00911     adl_line_draw(screen_mat, max_x, min_y, max_x, max_y, color, offset_zoom_param);\par
00912 \}\par
00913 \par
00925 {\cf18 void} adl_rectangle_fill_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00926 \{\par
00927     {\cf19 for} ({\cf18 int} y = min_y; y <= max_y; y++) \{\par
00928         adl_line_draw(screen_mat, min_x, y, max_x, y, color, offset_zoom_param);\par
00929     \}\par
00930 \}\par
00931 \par
00943 {\cf18 void} adl_quad_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00944 \{\par
00945     (void)inv_z_buffer;\par
00946     adl_lines_loop_draw(screen_mat, quad.points, 4, color, offset_zoom_param);\par
00947 \}\par
00948 \par
00961 {\cf18 void} adl_quad_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00962 \{\par
00963     Point p0 = quad.points[0];\par
00964     Point p1 = quad.points[1];\par
00965     Point p2 = quad.points[2];\par
00966     Point p3 = quad.points[3];\par
00967 \par
00968     {\cf18 int} x_min = fminf(p0.x, fminf(p1.x, fminf(p2.x, p3.x)));\par
00969     {\cf18 int} x_max = fmaxf(p0.x, fmaxf(p1.x, fmaxf(p2.x, p3.x)));\par
00970     {\cf18 int} y_min = fminf(p0.y, fminf(p1.y, fminf(p2.y, p3.y)));\par
00971     {\cf18 int} y_max = fmaxf(p0.y, fmaxf(p1.y, fmaxf(p2.y, p3.y)));\par
00972 \par
00973     {\cf19 if} (x_min < 0) x_min = 0;\par
00974     {\cf19 if} (y_min < 0) y_min = 0;\par
00975     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = (int)screen_mat.cols - 1;\par
00976     if (y_max >= ({\cf18 int})screen_mat.rows) y_max = ({\cf18 int})screen_mat.rows - 1;\par
00977 \par
00978     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2) + edge_cross_point(p2, p3, p3, p0);\par
00979     {\cf19 if} (fabs(w) < 1e-6) \{\par
00980         {\cf20 // adl_quad_draw(screen_mat, inv_z_buffer, quad, quad.colors[0], offset_zoom_param);}\par
00981         {\cf19 return};\par
00982     \}\par
00983 \par
00984     {\cf18 float} size_p3_to_p0 = sqrt((p0.x - p3.x)*(p0.x - p3.x) + (p0.y - p3.y)*(p0.y - p3.y));\par
00985     {\cf18 float} size_p0_to_p1 = sqrt((p1.x - p0.x)*(p1.x - p0.x) + (p1.y - p0.y)*(p1.y - p0.y));\par
00986     {\cf18 float} size_p1_to_p2 = sqrt((p2.x - p1.x)*(p2.x - p1.x) + (p2.y - p1.y)*(p2.y - p1.y));\par
00987     {\cf18 float} size_p2_to_p3 = sqrt((p3.x - p2.x)*(p3.x - p2.x) + (p3.y - p2.y)*(p3.y - p2.y));\par
00988 \par
00989     {\cf18 int} r, g, b, a;\par
00990     HexARGB_RGBA_VAR(color, r, g, b, a);\par
00991     {\cf18 float} light_intensity = (quad.light_intensity[0] + quad.light_intensity[1] + quad.light_intensity[2] + quad.light_intensity[3]) / 4;\par
00992     uint8_t base_r = (uint8_t)fmaxf(0, fminf(255, r * light_intensity));\par
00993     uint8_t base_g = (uint8_t)fmaxf(0, fminf(255, g * light_intensity));\par
00994     uint8_t base_b = (uint8_t)fmaxf(0, fminf(255, b * light_intensity));\par
00995 \par
00996     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
00997         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
00998             Point p = \{.x = x, .y = y, .z = 0\};\par
00999             {\cf18 bool} in_01, in_12, in_23, in_30;\par
01000 \par
01001             in_01 = (edge_cross_point(p0, p1, p0, p) >= 0) != (w < 0);\par
01002             in_12 = (edge_cross_point(p1, p2, p1, p) >= 0) != (w < 0);\par
01003             in_23 = (edge_cross_point(p2, p3, p2, p) >= 0) != (w < 0);\par
01004             in_30 = (edge_cross_point(p3, p0, p3, p) >= 0) != (w < 0);\par
01005 \par
01006             {\cf20 /* https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mv3d.pdf. */}\par
01007             {\cf18 float} size_p_to_p0 = sqrt((p0.x - p.x)*(p0.x - p.x) + (p0.y - p.y)*(p0.y - p.y));\par
01008             {\cf18 float} size_p_to_p1 = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));\par
01009             {\cf18 float} size_p_to_p2 = sqrt((p2.x - p.x)*(p2.x - p.x) + (p2.y - p.y)*(p2.y - p.y));\par
01010             {\cf18 float} size_p_to_p3 = sqrt((p3.x - p.x)*(p3.x - p.x) + (p3.y - p.y)*(p3.y - p.y));\par
01011 \par
01012             {\cf20 /* tangent of half the angle directly using vector math */}\par
01013             {\cf18 float} tan_theta_3_over_2 = size_p3_to_p0 / (size_p_to_p3 + size_p_to_p0);\par
01014             {\cf18 float} tan_theta_0_over_2 = size_p0_to_p1 / (size_p_to_p0 + size_p_to_p1);\par
01015             {\cf18 float} tan_theta_1_over_2 = size_p1_to_p2 / (size_p_to_p1 + size_p_to_p2);\par
01016             {\cf18 float} tan_theta_2_over_2 = size_p2_to_p3 / (size_p_to_p2 + size_p_to_p3);\par
01017             {\cf18 float} w0 = (tan_theta_3_over_2 + tan_theta_0_over_2) / size_p_to_p0;\par
01018             {\cf18 float} w1 = (tan_theta_0_over_2 + tan_theta_1_over_2) / size_p_to_p1;\par
01019             {\cf18 float} w2 = (tan_theta_1_over_2 + tan_theta_2_over_2) / size_p_to_p2;\par
01020             {\cf18 float} w3 = (tan_theta_2_over_2 + tan_theta_3_over_2) / size_p_to_p3;\par
01021 \par
01022             {\cf18 float} inv_w_tot = 1.0f / (w0 + w1 + w2 + w3);\par
01023             {\cf18 float} alpha = w0 * inv_w_tot;\par
01024             {\cf18 float} beta  = w1 * inv_w_tot;\par
01025             {\cf18 float} gamma = w2 * inv_w_tot;\par
01026             {\cf18 float} delta = w3 * inv_w_tot;\par
01027 \par
01028             {\cf19 if} (in_01 && in_12 && in_23 && in_30) \{\par
01029 \par
01030                 {\cf18 double} inv_w = alpha * (1.0f / p0.w) + beta  * (1.0f / p1.w) + gamma * (1.0f / p2.w) + delta * (1.0f / p3.w);\par
01031                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w) + delta * (p3.z / p3.w);\par
01032                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01033 \par
01034                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01035                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(base_r, base_g, base_b, a), offset_zoom_param);\par
01036                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01037                 \}\par
01038             \}\par
01039         \}\par
01040     \}\par
01041 \}\par
01042 \par
01055 {\cf18 void} adl_quad_fill_interpolate_normal_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01056 \{\par
01057     Point p0 = quad.points[0];\par
01058     Point p1 = quad.points[1];\par
01059     Point p2 = quad.points[2];\par
01060     Point p3 = quad.points[3];\par
01061 \par
01062     {\cf18 int} x_min = fminf(p0.x, fminf(p1.x, fminf(p2.x, p3.x)));\par
01063     {\cf18 int} x_max = fmaxf(p0.x, fmaxf(p1.x, fmaxf(p2.x, p3.x)));\par
01064     {\cf18 int} y_min = fminf(p0.y, fminf(p1.y, fminf(p2.y, p3.y)));\par
01065     {\cf18 int} y_max = fmaxf(p0.y, fmaxf(p1.y, fmaxf(p2.y, p3.y)));\par
01066 \par
01067     {\cf19 if} (x_min < 0) x_min = 0;\par
01068     {\cf19 if} (y_min < 0) y_min = 0;\par
01069     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = (int)screen_mat.cols - 1;\par
01070     if (y_max >= ({\cf18 int})screen_mat.rows) y_max = ({\cf18 int})screen_mat.rows - 1;\par
01071 \par
01072     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2) + edge_cross_point(p2, p3, p3, p0);\par
01073     {\cf19 if} (fabs(w) < 1e-6) \{\par
01074         {\cf20 // adl_quad_draw(screen_mat, inv_z_buffer, quad, quad.colors[0], offset_zoom_param);}\par
01075         {\cf19 return};\par
01076     \}\par
01077 \par
01078     {\cf18 int} r, g, b, a;\par
01079     HexARGB_RGBA_VAR(color, r, g, b, a);\par
01080 \par
01081     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01082         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01083             Point p = \{.x = x, .y = y, .z = 0\};\par
01084             {\cf18 bool} in_01, in_12, in_23, in_30;\par
01085 \par
01086             in_01 = (edge_cross_point(p0, p1, p0, p) >= 0) != (w < 0);\par
01087             in_12 = (edge_cross_point(p1, p2, p1, p) >= 0) != (w < 0);\par
01088             in_23 = (edge_cross_point(p2, p3, p2, p) >= 0) != (w < 0);\par
01089             in_30 = (edge_cross_point(p3, p0, p3, p) >= 0) != (w < 0);\par
01090 \par
01091             {\cf20 /* using 'mean value coordinates'}\par
01092 {\cf20              * https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mv3d.pdf. */}\par
01093             {\cf18 float} size_p_to_p0 = sqrt((p0.x - p.x)*(p0.x - p.x) + (p0.y - p.y)*(p0.y - p.y));\par
01094             {\cf18 float} size_p_to_p1 = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));\par
01095             {\cf18 float} size_p_to_p2 = sqrt((p2.x - p.x)*(p2.x - p.x) + (p2.y - p.y)*(p2.y - p.y));\par
01096             {\cf18 float} size_p_to_p3 = sqrt((p3.x - p.x)*(p3.x - p.x) + (p3.y - p.y)*(p3.y - p.y));\par
01097 \par
01098             {\cf20 /* calculating the tangent of half the angle directly using vector math */}\par
01099             {\cf18 float} t0 = adl_tan_half_angle(p0, p1, p, size_p_to_p0, size_p_to_p1);\par
01100             {\cf18 float} t1 = adl_tan_half_angle(p1, p2, p, size_p_to_p1, size_p_to_p2);\par
01101             {\cf18 float} t2 = adl_tan_half_angle(p2, p3, p, size_p_to_p2, size_p_to_p3);\par
01102             {\cf18 float} t3 = adl_tan_half_angle(p3, p0, p, size_p_to_p3, size_p_to_p0);\par
01103 \par
01104             {\cf18 float} w0 = (t3 + t0) / size_p_to_p0;\par
01105             {\cf18 float} w1 = (t0 + t1) / size_p_to_p1;\par
01106             {\cf18 float} w2 = (t1 + t2) / size_p_to_p2;\par
01107             {\cf18 float} w3 = (t2 + t3) / size_p_to_p3;\par
01108 \par
01109             {\cf18 float} inv_w_tot = 1.0f / (w0 + w1 + w2 + w3);\par
01110             {\cf18 float} alpha = w0 * inv_w_tot;\par
01111             {\cf18 float} beta  = w1 * inv_w_tot;\par
01112             {\cf18 float} gamma = w2 * inv_w_tot;\par
01113             {\cf18 float} delta = w3 * inv_w_tot;\par
01114 \par
01115             {\cf19 if} (in_01 && in_12 && in_23 && in_30) \{\par
01116                 {\cf18 float} light_intensity = quad.light_intensity[0]*alpha + quad.light_intensity[1]*beta + quad.light_intensity[2]*gamma + quad.light_intensity[3]*delta;\par
01117 \par
01118                 {\cf18 float} rf = r * light_intensity;\par
01119                 {\cf18 float} gf = g * light_intensity;\par
01120                 {\cf18 float} bf = b * light_intensity;\par
01121                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01122                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01123                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01124 \par
01125                 {\cf18 double} inv_w = alpha * (1.0f / p0.w) + beta  * (1.0f / p1.w) + gamma * (1.0f / p2.w) + delta * (1.0f / p3.w);\par
01126                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w) + delta * (p3.z / p3.w);\par
01127                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01128 \par
01129                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01130                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, a), offset_zoom_param);\par
01131                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01132                 \}\par
01133             \}\par
01134         \}\par
01135     \}\par
01136 \}\par
01137 \par
01149 {\cf18 void} adl_quad_fill_interpolate_color_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, Offset_zoom_param offset_zoom_param)\par
01150 \{\par
01151     Point p0 = quad.points[0];\par
01152     Point p1 = quad.points[1];\par
01153     Point p2 = quad.points[2];\par
01154     Point p3 = quad.points[3];\par
01155 \par
01156     {\cf18 int} x_min = fminf(p0.x, fminf(p1.x, fminf(p2.x, p3.x)));\par
01157     {\cf18 int} x_max = fmaxf(p0.x, fmaxf(p1.x, fmaxf(p2.x, p3.x)));\par
01158     {\cf18 int} y_min = fminf(p0.y, fminf(p1.y, fminf(p2.y, p3.y)));\par
01159     {\cf18 int} y_max = fmaxf(p0.y, fmaxf(p1.y, fmaxf(p2.y, p3.y)));\par
01160 \par
01161     {\cf19 if} (x_min < 0) x_min = 0;\par
01162     {\cf19 if} (y_min < 0) y_min = 0;\par
01163     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = (int)screen_mat.cols - 1;\par
01164     if (y_max >= ({\cf18 int})screen_mat.rows) y_max = ({\cf18 int})screen_mat.rows - 1;\par
01165 \par
01166     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2) + edge_cross_point(p2, p3, p3, p0);\par
01167     {\cf19 if} (fabs(w) < 1e-6) \{\par
01168         {\cf20 // adl_quad_draw(screen_mat, inv_z_buffer, quad, quad.colors[0], offset_zoom_param);}\par
01169         {\cf19 return};\par
01170     \}\par
01171 \par
01172     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01173         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01174             Point p = \{.x = x, .y = y, .z = 0\};\par
01175             {\cf18 bool} in_01, in_12, in_23, in_30;\par
01176 \par
01177             in_01 = (edge_cross_point(p0, p1, p0, p) >= 0) != (w < 0);\par
01178             in_12 = (edge_cross_point(p1, p2, p1, p) >= 0) != (w < 0);\par
01179             in_23 = (edge_cross_point(p2, p3, p2, p) >= 0) != (w < 0);\par
01180             in_30 = (edge_cross_point(p3, p0, p3, p) >= 0) != (w < 0);\par
01181 \par
01182             {\cf20 /* using 'mean value coordinates'}\par
01183 {\cf20              * https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mv3d.pdf. */}\par
01184             {\cf18 float} size_p_to_p0 = sqrt((p0.x - p.x)*(p0.x - p.x) + (p0.y - p.y)*(p0.y - p.y));\par
01185             {\cf18 float} size_p_to_p1 = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));\par
01186             {\cf18 float} size_p_to_p2 = sqrt((p2.x - p.x)*(p2.x - p.x) + (p2.y - p.y)*(p2.y - p.y));\par
01187             {\cf18 float} size_p_to_p3 = sqrt((p3.x - p.x)*(p3.x - p.x) + (p3.y - p.y)*(p3.y - p.y));\par
01188 \par
01189             {\cf20 /* calculating the tangent of half the angle directly using vector math */}\par
01190             {\cf18 float} t0 = adl_tan_half_angle(p0, p1, p, size_p_to_p0, size_p_to_p1);\par
01191             {\cf18 float} t1 = adl_tan_half_angle(p1, p2, p, size_p_to_p1, size_p_to_p2);\par
01192             {\cf18 float} t2 = adl_tan_half_angle(p2, p3, p, size_p_to_p2, size_p_to_p3);\par
01193             {\cf18 float} t3 = adl_tan_half_angle(p3, p0, p, size_p_to_p3, size_p_to_p0);\par
01194 \par
01195             {\cf18 float} w0 = (t3 + t0) / size_p_to_p0;\par
01196             {\cf18 float} w1 = (t0 + t1) / size_p_to_p1;\par
01197             {\cf18 float} w2 = (t1 + t2) / size_p_to_p2;\par
01198             {\cf18 float} w3 = (t2 + t3) / size_p_to_p3;\par
01199 \par
01200             {\cf18 float} inv_w_tot = 1.0f / (w0 + w1 + w2 + w3);\par
01201             {\cf18 float} alpha = w0 * inv_w_tot;\par
01202             {\cf18 float} beta  = w1 * inv_w_tot;\par
01203             {\cf18 float} gamma = w2 * inv_w_tot;\par
01204             {\cf18 float} delta = w3 * inv_w_tot;\par
01205 \par
01206             {\cf19 if} (in_01 && in_12 && in_23 && in_30) \{\par
01207                 {\cf18 int} r0, g0, b0, a0;\par
01208                 {\cf18 int} r1, g1, b1, a1;\par
01209                 {\cf18 int} r2, g2, b2, a2;\par
01210                 {\cf18 int} r3, g3, b3, a3;\par
01211                 HexARGB_RGBA_VAR(quad.colors[0], r0, g0, b0, a0);\par
01212                 HexARGB_RGBA_VAR(quad.colors[1], r1, g1, b1, a1);\par
01213                 HexARGB_RGBA_VAR(quad.colors[2], r2, g2, b2, a2);\par
01214                 HexARGB_RGBA_VAR(quad.colors[3], r3, g3, b3, a3);\par
01215                 \par
01216                 uint8_t current_r = r0*alpha + r1*beta + r2*gamma + r3*delta;\par
01217                 uint8_t current_g = g0*alpha + g1*beta + g2*gamma + g3*delta;\par
01218                 uint8_t current_b = b0*alpha + b1*beta + b2*gamma + b3*delta;\par
01219                 uint8_t current_a = a0*alpha + a1*beta + a2*gamma + a3*delta;\par
01220 \par
01221                 {\cf18 float} light_intensity = (quad.light_intensity[0] + quad.light_intensity[1] + quad.light_intensity[2] + quad.light_intensity[3]) / 4;\par
01222                 {\cf18 float} rf = current_r * light_intensity;\par
01223                 {\cf18 float} gf = current_g * light_intensity;\par
01224                 {\cf18 float} bf = current_b * light_intensity;\par
01225                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01226                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01227                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01228 \par
01229                 {\cf18 double} inv_w = alpha * (1.0f / p0.w) + beta  * (1.0f / p1.w) + gamma * (1.0f / p2.w) + delta * (1.0f / p3.w);\par
01230                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w) + delta * (p3.z / p3.w);\par
01231                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01232 \par
01233                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01234                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, current_a), offset_zoom_param);\par
01235                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01236                 \}\par
01237             \}\par
01238         \}\par
01239     \}\par
01240 \}\par
01241 \par
01253 {\cf18 void} adl_quad_mesh_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01254 \{\par
01255     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01256         Quad quad = mesh.elements[i];\par
01257         {\cf20 /* Reject invalid quad */}\par
01258         adl_assert_quad_is_valid(quad);\par
01259 \par
01260         {\cf19 if} (!quad.to_draw) {\cf19 continue};\par
01261 \par
01262         adl_quad_draw(screen_mat, inv_z_buffer_mat, quad, color, offset_zoom_param);\par
01263     \}\par
01264 \}\par
01265 \par
01277 {\cf18 void} adl_quad_mesh_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01278 \{\par
01279     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01280         Quad quad = mesh.elements[i];\par
01281         {\cf20 /* Reject invalid quad */}\par
01282         adl_assert_quad_is_valid(quad);\par
01283 \par
01284         {\cf19 if} (!quad.to_draw) {\cf19 continue};\par
01285 \par
01286         {\cf20 // color = rand_double() * 0xFFFFFFFF;}\par
01287 \par
01288         adl_quad_fill(screen_mat, inv_z_buffer_mat, quad, color, offset_zoom_param);\par
01289     \}\par
01290 \}\par
01291 \par
01304 {\cf18 void} adl_quad_mesh_fill_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01305 \{\par
01306     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01307         Quad quad = mesh.elements[i];\par
01308         {\cf20 /* Reject invalid quad */}\par
01309         adl_assert_quad_is_valid(quad);\par
01310 \par
01311         uint8_t a, r, g, b;\par
01312         HexARGB_RGBA_VAR(color, a, r, g, b);\par
01313         (void)r;\par
01314         (void)g;\par
01315         (void)b;\par
01316 \par
01317         {\cf19 if} (!quad.to_draw && a == 255) {\cf19 continue};\par
01318 \par
01319         adl_quad_fill_interpolate_normal_mean_value(screen_mat, inv_z_buffer_mat, quad, color, offset_zoom_param);\par
01320     \}\par
01321 \}\par
01322 \par
01334 {\cf18 void} adl_quad_mesh_fill_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, Offset_zoom_param offset_zoom_param)\par
01335 \{\par
01336     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01337         Quad quad = mesh.elements[i];\par
01338         {\cf20 /* Reject invalid quad */}\par
01339         adl_assert_quad_is_valid(quad);\par
01340 \par
01341         {\cf19 if} (!quad.to_draw) {\cf19 continue};\par
01342 \par
01343         adl_quad_fill_interpolate_color_mean_value(screen_mat, inv_z_buffer_mat, quad, offset_zoom_param);\par
01344     \}\par
01345 \}\par
01346 \par
01360 {\cf18 void} adl_circle_draw(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01361 \{\par
01362     {\cf19 for} ({\cf18 int} dy = -r; dy <= r; dy++) \{\par
01363         {\cf19 for} ({\cf18 int} dx = -r; dx <= r; dx ++) \{\par
01364             {\cf18 float} diff = dx * dx + dy * dy - r * r;\par
01365             {\cf19 if} (diff < 0 && diff > -r*2) \{\par
01366                 adl_point_draw(screen_mat, center_x + dx, center_y + dy, color, offset_zoom_param);\par
01367             \}\par
01368         \}\par
01369     \}\par
01370 \}\par
01371 \par
01382 {\cf18 void} adl_circle_fill(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01383 \{\par
01384     {\cf19 for} ({\cf18 int} dy = -r; dy <= r; dy++) \{\par
01385         {\cf19 for} ({\cf18 int} dx = -r; dx <= r; dx ++) \{\par
01386             {\cf18 float} diff = dx * dx + dy * dy - r * r;\par
01387             {\cf19 if} (diff < 0) \{\par
01388                 adl_point_draw(screen_mat, center_x + dx, center_y + dy, color, offset_zoom_param);\par
01389             \}\par
01390         \}\par
01391     \}\par
01392 \}\par
01393 \par
01402 {\cf18 void} adl_tri_draw(Mat2D_uint32 screen_mat, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01403 \{\par
01404     adl_line_draw(screen_mat, tri.points[0].x, tri.points[0].y, tri.points[1].x, tri.points[1].y, color, offset_zoom_param);\par
01405     adl_line_draw(screen_mat, tri.points[1].x, tri.points[1].y, tri.points[2].x, tri.points[2].y, color, offset_zoom_param);\par
01406     adl_line_draw(screen_mat, tri.points[2].x, tri.points[2].y, tri.points[0].x, tri.points[0].y, color, offset_zoom_param);\par
01407 \par
01408     {\cf20 // adl_draw_arrow(screen_mat, tri.points[0].x, tri.points[0].y, tri.points[1].x, tri.points[1].y, 0.3, 22, color);}\par
01409     {\cf20 // adl_draw_arrow(screen_mat, tri.points[1].x, tri.points[1].y, tri.points[2].x, tri.points[2].y, 0.3, 22, color);}\par
01410     {\cf20 // adl_draw_arrow(screen_mat, tri.points[2].x, tri.points[2].y, tri.points[0].x, tri.points[0].y, 0.3, 22, color);}\par
01411 \}\par
01412 \par
01425 {\cf18 void} adl_tri_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01426 \{\par
01427     {\cf20 /* This function follows the rasterizer of 'Pikuma' shown in his YouTube video. You can fine the video in this link: https://youtu.be/k5wtuKWmV48. */}\par
01428 \par
01429     Point p0, p1, p2;\par
01430     p0 = tri.points[0];\par
01431     p1 = tri.points[1];\par
01432     p2 = tri.points[2];\par
01433 \par
01434     {\cf20 /* finding bounding box */}\par
01435     {\cf18 int} x_min = fmin(p0.x, fmin(p1.x, p2.x));\par
01436     {\cf18 int} x_max = fmax(p0.x, fmax(p1.x, p2.x));\par
01437     {\cf18 int} y_min = fmin(p0.y, fmin(p1.y, p2.y));\par
01438     {\cf18 int} y_max = fmax(p0.y, fmax(p1.y, p2.y));\par
01439 \par
01440     {\cf20 /* Clamp to screen bounds */}\par
01441     {\cf19 if} (x_min < 0) x_min = 0;\par
01442     {\cf19 if} (y_min < 0) y_min = 0;\par
01443     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = screen_mat.cols - 1;\par
01444     {\cf19 if} (y_max >= ({\cf18 int})screen_mat.rows) y_max = screen_mat.rows - 1;\par
01445 \par
01446     {\cf20 /* draw only outline of the tri if there is no area */}\par
01447     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2);\par
01448     {\cf19 if} (fabsf(w) < 1e-6) \{\par
01449         {\cf20 // adl_tri_draw(screen_mat, tri, tri.colors[0], offset_zoom_param);}\par
01450         {\cf19 return};\par
01451     \}\par
01452     MATRIX2D_ASSERT(fabsf(w) > 1e-6 && {\cf22 "triangle must have area"});\par
01453 \par
01454     {\cf20 /* fill conventions */}\par
01455     {\cf18 int} bias0 = is_top_left(p0, p1) ? 0 : -1;\par
01456     {\cf18 int} bias1 = is_top_left(p1, p2) ? 0 : -1;\par
01457     {\cf18 int} bias2 = is_top_left(p2, p0) ? 0 : -1;\par
01458 \par
01459     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01460         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01461             Point p = \{.x = x, .y = y, .z = 0\};\par
01462 \par
01463             {\cf18 float} w0 = edge_cross_point(p0, p1, p0, p) + bias0;\par
01464             {\cf18 float} w1 = edge_cross_point(p1, p2, p1, p) + bias1;\par
01465             {\cf18 float} w2 = edge_cross_point(p2, p0, p2, p) + bias2;\par
01466 \par
01467             {\cf18 float} alpha = fabs(w1 / w);\par
01468             {\cf18 float} beta  = fabs(w2 / w);\par
01469             {\cf18 float} gamma = fabs(w0 / w);\par
01470 \par
01471             {\cf19 if} (w0 * w >= 0 && w1 * w >= 0 &&  w2 * w >= 0) \{\par
01472                 {\cf18 int} r, b, g, a;\par
01473                 HexARGB_RGBA_VAR(color, r, g, b, a);\par
01474                 {\cf18 float} light_intensity = (tri.light_intensity[0] + tri.light_intensity[1] + tri.light_intensity[2]) / 3;\par
01475                 {\cf18 float} rf = r * light_intensity;\par
01476                 {\cf18 float} gf = g * light_intensity;\par
01477                 {\cf18 float} bf = b * light_intensity;\par
01478                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01479                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01480                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01481 \par
01482                 {\cf18 double} inv_w = alpha * (1.0 / p0.w) + beta  * (1.0 / p1.w) + gamma * (1.0 / p2.w);\par
01483                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w);\par
01484                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01485 \par
01486                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01487                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, a), offset_zoom_param);\par
01488                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01489                 \}\par
01490             \}\par
01491         \}\par
01492     \}\par
01493 \}\par
01494 \par
01506 {\cf18 void} adl_tri_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, Offset_zoom_param offset_zoom_param)\par
01507 \{\par
01508     {\cf20 /* This function follows the rasterizer of 'Pikuma' shown in his YouTube video. You can fine the video in this link: https://youtu.be/k5wtuKWmV48. */}\par
01509     Point p0, p1, p2;\par
01510     p0 = tri.points[0];\par
01511     p1 = tri.points[1];\par
01512     p2 = tri.points[2];\par
01513 \par
01514     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2);\par
01515     {\cf19 if} (fabsf(w) < 1e-6) \{\par
01516         {\cf20 // adl_tri_draw(screen_mat, tri, tri.colors[0], offset_zoom_param);}\par
01517         {\cf19 return};\par
01518     \}\par
01519     MATRIX2D_ASSERT(w != 0 && {\cf22 "triangle has area"});\par
01520 \par
01521     {\cf20 /* fill conventions */}\par
01522     {\cf18 int} bias0 = is_top_left(p0, p1) ? 0 : -1;\par
01523     {\cf18 int} bias1 = is_top_left(p1, p2) ? 0 : -1;\par
01524     {\cf18 int} bias2 = is_top_left(p2, p0) ? 0 : -1;\par
01525 \par
01526     {\cf20 /* finding bounding box */}\par
01527     {\cf18 int} x_min = fmin(p0.x, fmin(p1.x, p2.x));\par
01528     {\cf18 int} x_max = fmax(p0.x, fmax(p1.x, p2.x));\par
01529     {\cf18 int} y_min = fmin(p0.y, fmin(p1.y, p2.y));\par
01530     {\cf18 int} y_max = fmax(p0.y, fmax(p1.y, p2.y));\par
01531     {\cf20 // printf("xmin: %d, xmax: %d || ymin: %d, ymax: %d\\n", x_min, x_max, y_min, y_max);}\par
01532 \par
01533     {\cf20 /* Clamp to screen bounds */}\par
01534     {\cf19 if} (x_min < 0) x_min = 0;\par
01535     {\cf19 if} (y_min < 0) y_min = 0;\par
01536     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = screen_mat.cols - 1;\par
01537     {\cf19 if} (y_max >= ({\cf18 int})screen_mat.rows) y_max = screen_mat.rows - 1;\par
01538 \par
01539     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01540         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01541             Point p = \{.x = x, .y = y, .z = 0\};\par
01542 \par
01543             {\cf18 float} w0 = edge_cross_point(p0, p1, p0, p) + bias0;\par
01544             {\cf18 float} w1 = edge_cross_point(p1, p2, p1, p) + bias1;\par
01545             {\cf18 float} w2 = edge_cross_point(p2, p0, p2, p) + bias2;\par
01546 \par
01547             {\cf18 float} alpha = fabs(w1 / w);\par
01548             {\cf18 float} beta  = fabs(w2 / w);\par
01549             {\cf18 float} gamma = fabs(w0 / w);\par
01550 \par
01551             {\cf19 if} (w0 * w >= 0 && w1 * w >= 0 &&  w2 * w >= 0) \{\par
01552                 {\cf18 int} r0, b0, g0, a0;\par
01553                 {\cf18 int} r1, b1, g1, a1;\par
01554                 {\cf18 int} r2, b2, g2, a2;\par
01555                 HexARGB_RGBA_VAR(tri.colors[0], r0, g0, b0, a0);\par
01556                 HexARGB_RGBA_VAR(tri.colors[1], r1, g1, b1, a1);\par
01557                 HexARGB_RGBA_VAR(tri.colors[2], r2, g2, b2, a2);\par
01558                 \par
01559                 uint8_t current_r = r0*alpha + r1*beta + r2*gamma;\par
01560                 uint8_t current_g = g0*alpha + g1*beta + g2*gamma;\par
01561                 uint8_t current_b = b0*alpha + b1*beta + b2*gamma;\par
01562                 uint8_t current_a = a0*alpha + a1*beta + a2*gamma;\par
01563 \par
01564                 {\cf18 float} light_intensity = (tri.light_intensity[0] + tri.light_intensity[1] + tri.light_intensity[2]) / 3;\par
01565                 {\cf18 float} rf = current_r * light_intensity;\par
01566                 {\cf18 float} gf = current_g * light_intensity;\par
01567                 {\cf18 float} bf = current_b * light_intensity;\par
01568                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01569                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01570                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01571 \par
01572                 {\cf18 double} inv_w = alpha * (1.0 / p0.w) + beta  * (1.0 / p1.w) + gamma * (1.0 / p2.w);\par
01573                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w);\par
01574                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01575 \par
01576                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01577                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, current_a), offset_zoom_param);\par
01578                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01579                 \}\par
01580             \}\par
01581         \}\par
01582     \}\par
01583 \}\par
01584 \par
01597 {\cf18 void} adl_tri_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01598 \{\par
01599     {\cf20 /* This function follows the rasterizer of 'Pikuma' shown in his YouTube video. You can fine the video in this link: https://youtu.be/k5wtuKWmV48. */}\par
01600     Point p0, p1, p2;\par
01601     p0 = tri.points[0];\par
01602     p1 = tri.points[1];\par
01603     p2 = tri.points[2];\par
01604 \par
01605     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2);\par
01606     {\cf19 if} (fabsf(w) < 1e-6) \{\par
01607         {\cf20 // adl_tri_draw(screen_mat, tri, tri.colors[0], offset_zoom_param);}\par
01608         {\cf19 return};\par
01609     \}\par
01610     MATRIX2D_ASSERT(w != 0 && {\cf22 "triangle has area"});\par
01611 \par
01612     {\cf20 /* fill conventions */}\par
01613     {\cf18 int} bias0 = is_top_left(p0, p1) ? 0 : -1;\par
01614     {\cf18 int} bias1 = is_top_left(p1, p2) ? 0 : -1;\par
01615     {\cf18 int} bias2 = is_top_left(p2, p0) ? 0 : -1;\par
01616 \par
01617     {\cf20 /* finding bounding box */}\par
01618     {\cf18 int} x_min = fmin(p0.x, fmin(p1.x, p2.x));\par
01619     {\cf18 int} x_max = fmax(p0.x, fmax(p1.x, p2.x));\par
01620     {\cf18 int} y_min = fmin(p0.y, fmin(p1.y, p2.y));\par
01621     {\cf18 int} y_max = fmax(p0.y, fmax(p1.y, p2.y));\par
01622     {\cf20 // printf("xmin: %d, xmax: %d || ymin: %d, ymax: %d\\n", x_min, x_max, y_min, y_max);}\par
01623 \par
01624     {\cf20 /* Clamp to screen bounds */}\par
01625     {\cf19 if} (x_min < 0) x_min = 0;\par
01626     {\cf19 if} (y_min < 0) y_min = 0;\par
01627     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = screen_mat.cols - 1;\par
01628     {\cf19 if} (y_max >= ({\cf18 int})screen_mat.rows) y_max = screen_mat.rows - 1;\par
01629 \par
01630     {\cf18 int} r, b, g, a;\par
01631     HexARGB_RGBA_VAR(color, r, g, b, a);\par
01632 \par
01633     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01634         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01635             Point p = \{.x = x, .y = y, .z = 0\};\par
01636 \par
01637             {\cf18 float} w0 = edge_cross_point(p0, p1, p0, p) + bias0;\par
01638             {\cf18 float} w1 = edge_cross_point(p1, p2, p1, p) + bias1;\par
01639             {\cf18 float} w2 = edge_cross_point(p2, p0, p2, p) + bias2;\par
01640 \par
01641             {\cf18 float} alpha = fabs(w1 / w);\par
01642             {\cf18 float} beta  = fabs(w2 / w);\par
01643             {\cf18 float} gamma = fabs(w0 / w);\par
01644 \par
01645             {\cf19 if} (w0 * w >= 0 && w1 * w >= 0 &&  w2 * w >= 0) \{\par
01646                 \par
01647                 {\cf18 float} light_intensity = tri.light_intensity[0]*alpha + tri.light_intensity[1]*beta + tri.light_intensity[2]*gamma;\par
01648 \par
01649                 {\cf18 float} rf = r * light_intensity;\par
01650                 {\cf18 float} gf = g * light_intensity;\par
01651                 {\cf18 float} bf = b * light_intensity;\par
01652                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01653                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01654                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01655 \par
01656                 {\cf18 double} inv_w = alpha * (1.0 / p0.w) + beta  * (1.0 / p1.w) + gamma * (1.0 / p2.w);\par
01657                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w);\par
01658                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01659 \par
01660                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01661                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, a), offset_zoom_param);\par
01662                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01663                 \}\par
01664             \}\par
01665         \}\par
01666     \}\par
01667 \}\par
01668 \par
01679 {\cf18 void} adl_tri_mesh_draw(Mat2D_uint32 screen_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01680 \{\par
01681     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01682         Tri tri = mesh.elements[i];\par
01683         {\cf19 if} (tri.to_draw) \{\par
01684             {\cf20 // color = rand_double() * 0xFFFFFFFF;}\par
01685             adl_tri_draw(screen_mat, tri, color, offset_zoom_param);\par
01686         \}\par
01687     \}\par
01688 \}\par
01689 \par
01701 {\cf18 void} adl_tri_mesh_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01702 \{\par
01703     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01704         Tri tri = mesh.elements[i];\par
01705         {\cf20 /* Reject invalid triangles */}\par
01706         adl_assert_tri_is_valid(tri);\par
01707 \par
01708         {\cf19 if} (!tri.to_draw) {\cf19 continue};\par
01709 \par
01710         adl_tri_fill_Pinedas_rasterizer(screen_mat, inv_z_buffer_mat, tri, color, offset_zoom_param);\par
01711     \}\par
01712 \}\par
01713 \par
01725 {\cf18 void} adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, Offset_zoom_param offset_zoom_param)\par
01726 \{\par
01727     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01728         Tri tri = mesh.elements[i];\par
01729         {\cf20 /* Reject invalid triangles */}\par
01730         adl_assert_tri_is_valid(tri);\par
01731 \par
01732         {\cf19 if} (!tri.to_draw) {\cf19 continue};\par
01733 \par
01734         adl_tri_fill_Pinedas_rasterizer_interpolate_color(screen_mat, inv_z_buffer_mat, tri, offset_zoom_param);\par
01735     \}\par
01736 \}\par
01737 \par
01750 {\cf18 void} adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01751 \{\par
01752     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01753         Tri tri = mesh.elements[i];\par
01754         {\cf20 /* Reject invalid triangles */}\par
01755         adl_assert_tri_is_valid(tri);\par
01756 \par
01757         {\cf19 if} (!tri.to_draw) {\cf19 continue};\par
01758 \par
01759         adl_tri_fill_Pinedas_rasterizer_interpolate_normal(screen_mat, inv_z_buffer_mat, tri, color, offset_zoom_param);\par
01760     \}\par
01761 \}\par
01762 \par
01778 {\cf18 float} adl_tan_half_angle(Point vi, Point vj, Point p, {\cf18 float} li, {\cf18 float} lj)\par
01779 \{\par
01780     {\cf18 float} ax = vi.x - p.x, ay = vi.y - p.y;\par
01781     {\cf18 float} bx = vj.x - p.x, by = vj.y - p.y;\par
01782     {\cf18 float} dot = ax * bx + ay * by;\par
01783     {\cf18 float} cross = ax * by - ay * bx;              {\cf20 // signed 2D cross (scalar)}\par
01784     {\cf18 float} denom = dot + li * lj;                   {\cf20 // = |a||b|(1 + cos(alpha))}\par
01785     {\cf19 return} fabsf(cross) / fmaxf(1e-20f, denom);    {\cf20 // tan(alpha/2)}\par
01786 \}\par
01787 \par
01798 {\cf18 float} adl_linear_map({\cf18 float} s, {\cf18 float} min_in, {\cf18 float} max_in, {\cf18 float} min_out, {\cf18 float} max_out)\par
01799 \{\par
01800     {\cf19 return} (min_out + ((s-min_in)*(max_out-min_out))/(max_in-min_in));\par
01801 \}\par
01802 \par
01818 {\cf18 void} adl_quad2tris(Quad quad, Tri *tri1, Tri *tri2, {\cf18 char} split_line[])\par
01819 \{\par
01820     {\cf19 if} (!strncmp(split_line, {\cf22 "02"}, 2)) \{\par
01821         tri1->points[0] = quad.points[0];\par
01822         tri1->points[1] = quad.points[1];\par
01823         tri1->points[2] = quad.points[2];\par
01824         tri1->to_draw = quad.to_draw;\par
01825         tri1->light_intensity[0] = quad.light_intensity[0];\par
01826         tri1->light_intensity[1] = quad.light_intensity[1];\par
01827         tri1->light_intensity[2] = quad.light_intensity[2];\par
01828         tri1->colors[0] = quad.colors[0];\par
01829         tri1->colors[1] = quad.colors[1];\par
01830         tri1->colors[2] = quad.colors[2];\par
01831 \par
01832         tri2->points[0] = quad.points[2];\par
01833         tri2->points[1] = quad.points[3];\par
01834         tri2->points[2] = quad.points[0];\par
01835         tri2->to_draw = quad.to_draw;\par
01836         tri1->light_intensity[0] = quad.light_intensity[2];\par
01837         tri1->light_intensity[1] = quad.light_intensity[3];\par
01838         tri1->light_intensity[2] = quad.light_intensity[0];\par
01839         tri2->colors[0] = quad.colors[2];\par
01840         tri2->colors[1] = quad.colors[3];\par
01841         tri2->colors[2] = quad.colors[0];\par
01842     \} {\cf19 else} {\cf19 if} (!strncmp(split_line, {\cf22 "13"}, 2)) \{\par
01843         tri1->points[0] = quad.points[1];\par
01844         tri1->points[1] = quad.points[2];\par
01845         tri1->points[2] = quad.points[3];\par
01846         tri1->to_draw = quad.to_draw;\par
01847         tri1->light_intensity[0] = quad.light_intensity[1];\par
01848         tri1->light_intensity[1] = quad.light_intensity[2];\par
01849         tri1->light_intensity[2] = quad.light_intensity[3];\par
01850         tri1->colors[0] = quad.colors[1];\par
01851         tri1->colors[1] = quad.colors[2];\par
01852         tri1->colors[2] = quad.colors[3];\par
01853 \par
01854         tri2->points[0] = quad.points[3];\par
01855         tri2->points[1] = quad.points[0];\par
01856         tri2->points[2] = quad.points[1];\par
01857         tri2->to_draw = quad.to_draw;\par
01858         tri1->light_intensity[0] = quad.light_intensity[3];\par
01859         tri1->light_intensity[1] = quad.light_intensity[0];\par
01860         tri1->light_intensity[2] = quad.light_intensity[1];\par
01861         tri2->colors[0] = quad.colors[3];\par
01862         tri2->colors[1] = quad.colors[0];\par
01863         tri2->colors[2] = quad.colors[1];\par
01864     \}\par
01865 \}\par
01866 \par
01878 {\cf18 void} adl_linear_sRGB_to_okLab(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *a, {\cf18 float} *b)\par
01879 \{\par
01880     {\cf20 /* https://bottosson.github.io/posts/oklab/}\par
01881 {\cf20        https://en.wikipedia.org/wiki/Oklab_color_space */}\par
01882     {\cf18 int} R_255, G_255, B_255;\par
01883     HexARGB_RGB_VAR(hex_ARGB, R_255, G_255, B_255);\par
01884 \par
01885     {\cf18 float} R = R_255;\par
01886     {\cf18 float} G = G_255;\par
01887     {\cf18 float} B = B_255;\par
01888 \par
01889     {\cf18 float} l = 0.4122214705f * R + 0.5363325363f * G + 0.0514459929f * B;\par
01890     {\cf18 float} m = 0.2119034982f * R + 0.6806995451f * G + 0.1073969566f * B;\par
01891     {\cf18 float} s = 0.0883024619f * R + 0.2817188376f * G + 0.6299787005f * B;\par
01892 \par
01893     {\cf18 float} l_ = cbrtf(l);\par
01894     {\cf18 float} m_ = cbrtf(m);\par
01895     {\cf18 float} s_ = cbrtf(s);\par
01896 \par
01897     *L = 0.2104542553f * l_ + 0.7936177850f * m_ - 0.0040720468f * s_;\par
01898     *a = 1.9779984951f * l_ - 2.4285922050f * m_ + 0.4505937099f * s_;\par
01899     *b = 0.0259040371f * l_ + 0.7827717662f * m_ - 0.8086757660f * s_;\par
01900 \par
01901 \}\par
01902 \par
01913 {\cf18 void} adl_okLab_to_linear_sRGB({\cf18 float} L, {\cf18 float} a, {\cf18 float} b, uint32_t *hex_ARGB)\par
01914 \{\par
01915     {\cf20 /* https://bottosson.github.io/posts/oklab/}\par
01916 {\cf20        https://en.wikipedia.org/wiki/Oklab_color_space */}\par
01917 \par
01918     {\cf18 float} l_ = L + 0.3963377774f * a + 0.2158037573f * b;\par
01919     {\cf18 float} m_ = L - 0.1055613458f * a - 0.0638541728f * b;\par
01920     {\cf18 float} s_ = L - 0.0894841775f * a - 1.2914855480f * b;\par
01921 \par
01922     {\cf18 float} l = l_ * l_ * l_;\par
01923     {\cf18 float} m = m_ * m_ * m_;\par
01924     {\cf18 float} s = s_ * s_ * s_;\par
01925 \par
01926     {\cf18 float} R = + 4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s;\par
01927     {\cf18 float} G = - 1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s;\par
01928     {\cf18 float} B = - 0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s;\par
01929 \par
01930     R = fmaxf(fminf(R, 255), 0);\par
01931     G = fmaxf(fminf(G, 255), 0);\par
01932     B = fmaxf(fminf(B, 255), 0);\par
01933 \par
01934     *hex_ARGB = RGBA_hexARGB(R, G, B, 0xFF);\par
01935 \}\par
01936 \par
01945 {\cf18 void} adl_linear_sRGB_to_okLch(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *c, {\cf18 float} *h_deg)\par
01946 \{\par
01947     {\cf18 float} a, b;\par
01948     adl_linear_sRGB_to_okLab(hex_ARGB, L, &a, &b);\par
01949 \par
01950     *c = sqrtf(a * a + b * b);\par
01951     *h_deg = atan2f(b, a) * 180 / PI;\par
01952 \}\par
01953 \par
01964 {\cf18 void} adl_okLch_to_linear_sRGB({\cf18 float} L, {\cf18 float} c, {\cf18 float} h_deg, uint32_t *hex_ARGB)\par
01965 \{\par
01966     h_deg = fmodf((h_deg + 360), 360);\par
01967     {\cf18 float} a = c * cosf(h_deg * PI / 180);\par
01968     {\cf18 float} b = c * sinf(h_deg * PI / 180);\par
01969     adl_okLab_to_linear_sRGB(L, a, b, hex_ARGB);\par
01970 \}\par
01971 \par
01986 {\cf18 void} adl_interpolate_ARGBcolor_on_okLch(uint32_t color1, uint32_t color2, {\cf18 float} t, {\cf18 float} num_of_rotations, uint32_t *color_out)\par
01987 \{\par
01988     {\cf18 float} L_1, c_1, h_1;\par
01989     {\cf18 float} L_2, c_2, h_2;\par
01990     adl_linear_sRGB_to_okLch(color1, &L_1, &c_1, &h_1);\par
01991     adl_linear_sRGB_to_okLch(color2, &L_2, &c_2, &h_2);\par
01992     h_2 = h_2 + 360 * num_of_rotations;\par
01993 \par
01994     {\cf18 float} L, c, h;\par
01995     L = L_1 * (1 - t) + L_2 * (t);\par
01996     c = c_1 * (1 - t) + c_2 * (t);\par
01997     h = h_1 * (1 - t) + h_2 * (t);\par
01998     adl_okLch_to_linear_sRGB(L, c, h, color_out);\par
01999 \}\par
02000 \par
02014 Figure adl_figure_alloc({\cf18 size_t} rows, {\cf18 size_t} cols, Point top_left_position)\par
02015 \{\par
02016     ADL_ASSERT(rows && cols);\par
02017     adl_assert_point_is_valid(top_left_position);\par
02018 \par
02019     Figure figure = \{0\};\par
02020     figure.pixels_mat = mat2D_alloc_uint32(rows, cols);\par
02021     figure.inv_z_buffer_mat = mat2D_alloc(rows, cols);\par
02022     memset(figure.inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * figure.inv_z_buffer_mat.rows * figure.inv_z_buffer_mat.cols);\par
02023     ada_init_array(Curve, figure.src_curve_array);\par
02024 \par
02025     figure.top_left_position = top_left_position;\par
02026 \par
02027     {\cf18 int} max_i    = (int)(figure.pixels_mat.rows);\par
02028     {\cf18 int} max_j    = (int)(figure.pixels_mat.cols);\par
02029     {\cf18 int} offset_i = (int)fminf(figure.pixels_mat.rows * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING);\par
02030     {\cf18 int} offset_j = (int)fminf(figure.pixels_mat.cols * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING);\par
02031 \par
02032     figure.min_x_pixel = offset_j;\par
02033     figure.max_x_pixel = max_j - offset_j;\par
02034     figure.min_y_pixel = offset_i;\par
02035     figure.max_y_pixel = max_i - offset_i;\par
02036 \par
02037     figure.min_x = + FLT_MAX;\par
02038     figure.max_x = - FLT_MAX;\par
02039     figure.min_y = + FLT_MAX;\par
02040     figure.max_y = - FLT_MAX;\par
02041 \par
02042     figure.offset_zoom_param = ADL_DEFAULT_OFFSET_ZOOM;\par
02043 \par
02044     {\cf19 return} figure;\par
02045 \}\par
02046 \par
02057 {\cf18 void} adl_figure_copy_to_screen(Mat2D_uint32 screen_mat, Figure figure)\par
02058 \{\par
02059     {\cf19 for} ({\cf18 size_t} i = 0; i < figure.pixels_mat.rows; i++) \{\par
02060         {\cf19 for} ({\cf18 size_t} j = 0; j < figure.pixels_mat.cols; j++) \{\par
02061             {\cf18 int} offset_i = figure.top_left_position.y;\par
02062             {\cf18 int} offset_j = figure.top_left_position.x;\par
02063             \par
02064             adl_point_draw(screen_mat, offset_j+j, offset_i+i, MAT2D_AT_UINT32(figure.pixels_mat, i, j), (Offset_zoom_param)\{1,0,0,0,0\});\par
02065         \}\par
02066     \}\par
02067 \}\par
02068 \par
02077 {\cf18 void} adl_axis_draw_on_figure(Figure *figure)\par
02078 \{\par
02079     {\cf18 int} max_i    = (int)(figure->pixels_mat.rows);\par
02080     {\cf18 int} max_j    = (int)(figure->pixels_mat.cols);\par
02081     {\cf18 int} offset_i = (int)fmaxf(fminf(figure->pixels_mat.rows * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING), ADL_MIN_FIGURE_PADDING);\par
02082     {\cf18 int} offset_j = (int)fmaxf(fminf(figure->pixels_mat.cols * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING), ADL_MIN_FIGURE_PADDING);\par
02083 \par
02084     {\cf18 int} arrow_head_size_x = (int)fminf(ADL_MAX_HEAD_SIZE, ADL_FIGURE_PADDING_PRECENTAGE / 100.0f * (max_j - 2 * offset_j));\par
02085     {\cf18 int} arrow_head_size_y = (int)fminf(ADL_MAX_HEAD_SIZE, ADL_FIGURE_PADDING_PRECENTAGE / 100.0f * (max_i - 2 * offset_i));\par
02086 \par
02087     adl_arrow_draw(figure->pixels_mat, figure->min_x_pixel, figure->max_y_pixel, figure->max_x_pixel, figure->max_y_pixel, ({\cf18 float})arrow_head_size_x / (max_j-2*offset_j), ADL_FIGURE_HEAD_ANGLE_DEG, ADL_FIGURE_AXIS_COLOR, figure->offset_zoom_param);\par
02088     adl_arrow_draw(figure->pixels_mat, figure->min_x_pixel, figure->max_y_pixel, figure->min_x_pixel, figure->min_y_pixel, ({\cf18 float})arrow_head_size_y / (max_i-2*offset_i), ADL_FIGURE_HEAD_ANGLE_DEG, ADL_FIGURE_AXIS_COLOR, figure->offset_zoom_param);\par
02089     {\cf20 // adl_draw_rectangle_min_max(figure->pixels_mat, figure->min_x_pixel, figure->max_x_pixel, figure->min_y_pixel, figure->max_y_pixel, 0);}\par
02090 \par
02091     figure->x_axis_head_size = arrow_head_size_x;\par
02092     figure->y_axis_head_size = arrow_head_size_y;\par
02093 \}\par
02094 \par
02103 {\cf18 void} adl_max_min_values_draw_on_figure(Figure figure)\par
02104 \{\par
02105     {\cf18 char} x_min_sentence[256];\par
02106     {\cf18 char} x_max_sentence[256];\par
02107     snprintf(x_min_sentence, 256, {\cf22 "%g"}, figure.min_x);\par
02108     snprintf(x_max_sentence, 256, {\cf22 "%g"}, figure.max_x);\par
02109 \par
02110     {\cf18 int} x_sentence_hight_pixel = (figure.pixels_mat.rows - figure.max_y_pixel - ADL_MIN_CHARACTER_OFFSET * 3);\par
02111     {\cf18 int} x_min_char_width_pixel = x_sentence_hight_pixel / 2;\par
02112     {\cf18 int} x_max_char_width_pixel = x_sentence_hight_pixel / 2;\par
02113 \par
02114     {\cf18 int} x_min_sentence_width_pixel = (int)fminf((figure.max_x_pixel - figure.min_x_pixel)/2, (x_min_char_width_pixel + ADL_MAX_CHARACTER_OFFSET)*strlen(x_min_sentence));\par
02115     x_min_char_width_pixel = x_min_sentence_width_pixel / strlen(x_min_sentence) - ADL_MIN_CHARACTER_OFFSET;\par
02116 \par
02117     {\cf18 int} x_max_sentence_width_pixel = (int)fminf((figure.max_x_pixel - figure.min_x_pixel)/2, (x_max_char_width_pixel + ADL_MAX_CHARACTER_OFFSET)*strlen(x_max_sentence)) - figure.x_axis_head_size;\par
02118     x_max_char_width_pixel = (x_max_sentence_width_pixel + figure.x_axis_head_size) / strlen(x_max_sentence) - ADL_MIN_CHARACTER_OFFSET;\par
02119 \par
02120     {\cf18 int} x_min_sentence_hight_pixel = (int)fminf(x_min_char_width_pixel * 2, x_sentence_hight_pixel);\par
02121     {\cf18 int} x_max_sentence_hight_pixel = (int)fminf(x_max_char_width_pixel * 2, x_sentence_hight_pixel);\par
02122 \par
02123     x_min_sentence_hight_pixel = (int)fminf(x_min_sentence_hight_pixel, x_max_sentence_hight_pixel);\par
02124     x_max_sentence_hight_pixel = x_min_sentence_hight_pixel;\par
02125 \par
02126     {\cf18 int} x_max_x_top_left = figure.max_x_pixel - strlen(x_max_sentence) * (x_max_sentence_hight_pixel / 2 + ADL_MIN_CHARACTER_OFFSET) - figure.x_axis_head_size;\par
02127 \par
02128     adl_sentence_draw(figure.pixels_mat, x_min_sentence, strlen(x_min_sentence), figure.min_x_pixel, figure.max_y_pixel+ADL_MIN_CHARACTER_OFFSET*2, x_min_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02129     adl_sentence_draw(figure.pixels_mat, x_max_sentence, strlen(x_max_sentence), x_max_x_top_left, figure.max_y_pixel+ADL_MIN_CHARACTER_OFFSET*2, x_max_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02130     \par
02131     {\cf18 char} y_min_sentence[256];\par
02132     {\cf18 char} y_max_sentence[256];\par
02133     snprintf(y_min_sentence, 256, {\cf22 "%g"}, figure.min_y);\par
02134     snprintf(y_max_sentence, 256, {\cf22 "%g"}, figure.max_y);\par
02135 \par
02136     {\cf18 int} y_sentence_width_pixel = figure.min_x_pixel - ADL_MAX_CHARACTER_OFFSET - figure.y_axis_head_size;\par
02137     {\cf18 int} y_max_char_width_pixel = y_sentence_width_pixel;\par
02138     y_max_char_width_pixel /= strlen(y_max_sentence);\par
02139     {\cf18 int} y_max_sentence_hight_pixel = y_max_char_width_pixel * 2;\par
02140 \par
02141     {\cf18 int} y_min_char_width_pixel = y_sentence_width_pixel;\par
02142     y_min_char_width_pixel /= strlen(y_min_sentence);\par
02143     {\cf18 int} y_min_sentence_hight_pixel = y_min_char_width_pixel * 2;\par
02144 \par
02145     y_min_sentence_hight_pixel = (int)fmaxf(fminf(y_min_sentence_hight_pixel, y_max_sentence_hight_pixel), 1);\par
02146     y_max_sentence_hight_pixel = y_min_sentence_hight_pixel;\par
02147 \par
02148     adl_sentence_draw(figure.pixels_mat, y_max_sentence, strlen(y_max_sentence), ADL_MAX_CHARACTER_OFFSET/2, figure.min_y_pixel, y_max_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02149     adl_sentence_draw(figure.pixels_mat, y_min_sentence, strlen(y_min_sentence), ADL_MAX_CHARACTER_OFFSET/2, figure.max_y_pixel-y_min_sentence_hight_pixel, y_min_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02150 \}\par
02151 \par
02163 {\cf18 void} adl_curve_add_to_figure(Figure *figure, Point *src_points, {\cf18 size_t} src_len, uint32_t color)\par
02164 \{\par
02165     Curve src_points_ada;\par
02166     ada_init_array(Point, src_points_ada);\par
02167     src_points_ada.color = color;\par
02168 \par
02169     {\cf19 for} ({\cf18 size_t} i = 0; i < src_len; i++) \{\par
02170         Point current_point = src_points[i];\par
02171         {\cf19 if} (current_point.x > figure->max_x) \{\par
02172             figure->max_x = current_point.x;\par
02173         \}\par
02174         {\cf19 if} (current_point.y > figure->max_y) \{\par
02175             figure->max_y = current_point.y;\par
02176         \}\par
02177         {\cf19 if} (current_point.x < figure->min_x) \{\par
02178             figure->min_x = current_point.x;\par
02179         \}\par
02180         {\cf19 if} (current_point.y < figure->min_y) \{\par
02181             figure->min_y = current_point.y;\par
02182         \}\par
02183         ada_appand(Point, src_points_ada, current_point);\par
02184     \}\par
02185     \par
02186     ada_appand(Curve, figure->src_curve_array, src_points_ada);\par
02187 \}\par
02188 \par
02198 {\cf18 void} adl_curves_plot_on_figure(Figure figure)\par
02199 \{\par
02200     mat2D_fill_uint32(figure.pixels_mat, figure.background_color);\par
02201     memset(figure.inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * figure.inv_z_buffer_mat.rows * figure.inv_z_buffer_mat.cols);\par
02202     {\cf19 if} (figure.to_draw_axis) adl_axis_draw_on_figure(&figure);\par
02203 \par
02204     {\cf19 for} ({\cf18 size_t} curve_index = 0; curve_index < figure.src_curve_array.length; curve_index++) \{\par
02205         {\cf18 size_t} src_len = figure.src_curve_array.elements[curve_index].length;\par
02206         Point *src_points = figure.src_curve_array.elements[curve_index].elements;\par
02207         {\cf19 for} ({\cf18 size_t} i = 0; i < src_len-1; i++) \{\par
02208             Point src_start = src_points[i];\par
02209             Point src_end   = src_points[i+1];\par
02210             Point des_start = \{0\};\par
02211             Point des_end = \{0\};\par
02212 \par
02213             des_start.x = adl_linear_map(src_start.x, figure.min_x, figure.max_x, figure.min_x_pixel, figure.max_x_pixel);\par
02214             des_start.y = ((figure.max_y_pixel + figure.min_y_pixel) - adl_linear_map(src_start.y, figure.min_y, figure.max_y, figure.min_y_pixel, figure.max_y_pixel));\par
02215 \par
02216             des_end.x = adl_linear_map(src_end.x, figure.min_x, figure.max_x, figure.min_x_pixel, figure.max_x_pixel);\par
02217             des_end.y = ((figure.max_y_pixel + figure.min_y_pixel) - adl_linear_map(src_end.y, figure.min_y, figure.max_y, figure.min_y_pixel, figure.max_y_pixel));\par
02218 \par
02219             adl_line_draw(figure.pixels_mat, des_start.x, des_start.y, des_end.x, des_end.y, figure.src_curve_array.elements[curve_index].color, figure.offset_zoom_param);\par
02220         \}\par
02221     \}\par
02222 \par
02223     {\cf19 if} (figure.to_draw_max_min_values) adl_max_min_values_draw_on_figure(figure);\par
02224 \}\par
02225 \par
02226 {\cf20 /* check offset2D. might convert it to a Mat2D */}\par
02227 {\cf21 #define adl_offset2d(i, j, ni) (j) * (ni) + (i)}\par
02247 {\cf18 void} adl_2Dscalar_interp_on_figure(Figure figure, {\cf18 double} *x_2Dmat, {\cf18 double} *y_2Dmat, {\cf18 double} *scalar_2Dmat, {\cf18 int} ni, {\cf18 int} nj, {\cf18 char} color_scale[], {\cf18 float} num_of_rotations)\par
02248 \{\par
02249     mat2D_fill_uint32(figure.pixels_mat, figure.background_color);\par
02250     memset(figure.inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * figure.inv_z_buffer_mat.rows * figure.inv_z_buffer_mat.cols);\par
02251     {\cf19 if} (figure.to_draw_axis) adl_axis_draw_on_figure(&figure);\par
02252 \par
02253     {\cf18 float} min_scalar = FLT_MAX; \par
02254     {\cf18 float} max_scalar = FLT_MIN; \par
02255     {\cf19 for} ({\cf18 int} i = 0; i < ni; i++) \{\par
02256         {\cf19 for} ({\cf18 int} j = 0; j < nj; j++) \{\par
02257             {\cf18 float} val = scalar_2Dmat[adl_offset2d(i, j, ni)];\par
02258             {\cf19 if} (val > max_scalar) max_scalar = val;\par
02259             {\cf19 if} (val < min_scalar) min_scalar = val;\par
02260             {\cf18 float} current_x = x_2Dmat[adl_offset2d(i, j, ni)];\par
02261             {\cf18 float} current_y = y_2Dmat[adl_offset2d(i, j, ni)];\par
02262             {\cf19 if} (current_x > figure.max_x) \{\par
02263                 figure.max_x = current_x;\par
02264             \}\par
02265             {\cf19 if} (current_y > figure.max_y) \{\par
02266                 figure.max_y = current_y;\par
02267             \}\par
02268             {\cf19 if} (current_x < figure.min_x) \{\par
02269                 figure.min_x = current_x;\par
02270             \}\par
02271             {\cf19 if} (current_y < figure.min_y) \{\par
02272                 figure.min_y = current_y;\par
02273             \}\par
02274         \}\par
02275     \}\par
02276 \par
02277     {\cf18 float} window_w = (float)figure.pixels_mat.cols;\par
02278     {\cf18 float} window_h = ({\cf18 float})figure.pixels_mat.rows;\par
02279 \par
02280     {\cf19 for} ({\cf18 int} i = 0; i < ni-1; i++) \{\par
02281         {\cf19 for} ({\cf18 int} j = 0; j < nj-1; j++) \{\par
02282             Quad quad = \{0\};\par
02283             quad.light_intensity[0] = 1;\par
02284             quad.light_intensity[1] = 1;\par
02285             quad.light_intensity[2] = 1;\par
02286             quad.light_intensity[3] = 1;\par
02287             quad.to_draw = 1;\par
02288 \par
02289             quad.points[3].x = x_2Dmat[adl_offset2d(i  , j  , ni)];\par
02290             quad.points[3].y = y_2Dmat[adl_offset2d(i  , j  , ni)];\par
02291             quad.points[2].x = x_2Dmat[adl_offset2d(i+1, j  , ni)];\par
02292             quad.points[2].y = y_2Dmat[adl_offset2d(i+1, j  , ni)];\par
02293             quad.points[1].x = x_2Dmat[adl_offset2d(i+1, j+1, ni)];\par
02294             quad.points[1].y = y_2Dmat[adl_offset2d(i+1, j+1, ni)];\par
02295             quad.points[0].x = x_2Dmat[adl_offset2d(i  , j+1, ni)];\par
02296             quad.points[0].y = y_2Dmat[adl_offset2d(i  , j+1, ni)];\par
02297 \par
02298             {\cf19 for} ({\cf18 int} p_index = 0; p_index < 4; p_index++) \{\par
02299                 quad.points[p_index].z = 1;\par
02300                 quad.points[p_index].w = 1;\par
02301                 quad.points[p_index].x = adl_linear_map(quad.points[p_index].x, figure.min_x, figure.max_x, figure.min_x_pixel, figure.max_x_pixel);\par
02302                 quad.points[p_index].y = ((figure.max_y_pixel + figure.min_y_pixel) - adl_linear_map(quad.points[p_index].y, figure.min_y, figure.max_y, figure.min_y_pixel, figure.max_y_pixel));\par
02303 \par
02304                 adl_offset_zoom_point(quad.points[p_index], window_w, window_h, figure.offset_zoom_param);\par
02305             \}\par
02306 \par
02307             {\cf18 float} t3 = adl_linear_map(scalar_2Dmat[adl_offset2d(i  , j  , ni)], min_scalar, max_scalar, 0, 1);\par
02308             {\cf18 float} t2 = adl_linear_map(scalar_2Dmat[adl_offset2d(i+1, j  , ni)], min_scalar, max_scalar, 0, 1);\par
02309             {\cf18 float} t1 = adl_linear_map(scalar_2Dmat[adl_offset2d(i+1, j+1, ni)], min_scalar, max_scalar, 0, 1);\par
02310             {\cf18 float} t0 = adl_linear_map(scalar_2Dmat[adl_offset2d(  i, j+1, ni)], min_scalar, max_scalar, 0, 1);\par
02311 \par
02312             {\cf20 /* https://en.wikipedia.org/wiki/Oklab_color_space */}\par
02313             {\cf19 if} (!strcmp(color_scale, {\cf22 "b-c"})) \{\par
02314                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = CYAN_hexARGB;\par
02315                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02316                 quad.colors[0] = color;\par
02317 \par
02318                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02319                 quad.colors[1] = color;\par
02320 \par
02321                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02322                 quad.colors[2] = color;\par
02323 \par
02324                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02325                 quad.colors[3] = color;\par
02326             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "b-g"})) \{\par
02327                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = GREEN_hexARGB;\par
02328                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02329                 quad.colors[0] = color;\par
02330 \par
02331                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02332                 quad.colors[1] = color;\par
02333 \par
02334                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02335                 quad.colors[2] = color;\par
02336 \par
02337                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02338                 quad.colors[3] = color;\par
02339             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "b-r"})) \{\par
02340                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = RED_hexARGB;\par
02341                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02342                 quad.colors[0] = color;\par
02343 \par
02344                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02345                 quad.colors[1] = color;\par
02346 \par
02347                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02348                 quad.colors[2] = color;\par
02349 \par
02350                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02351                 quad.colors[3] = color;\par
02352             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "b-y"})) \{\par
02353                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = YELLOW_hexARGB;\par
02354                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02355                 quad.colors[0] = color;\par
02356 \par
02357                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02358                 quad.colors[1] = color;\par
02359 \par
02360                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02361                 quad.colors[2] = color;\par
02362 \par
02363                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02364                 quad.colors[3] = color;\par
02365             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "g-y"})) \{\par
02366                 uint32_t color = 0, color1 = GREEN_hexARGB, color2 = YELLOW_hexARGB;\par
02367                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02368                 quad.colors[0] = color;\par
02369 \par
02370                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02371                 quad.colors[1] = color;\par
02372 \par
02373                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02374                 quad.colors[2] = color;\par
02375 \par
02376                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02377                 quad.colors[3] = color;\par
02378             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "g-p"})) \{\par
02379                 uint32_t color = 0, color1 = GREEN_hexARGB, color2 = PURPLE_hexARGB;\par
02380                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02381                 quad.colors[0] = color;\par
02382 \par
02383                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02384                 quad.colors[1] = color;\par
02385 \par
02386                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02387                 quad.colors[2] = color;\par
02388 \par
02389                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02390                 quad.colors[3] = color;\par
02391             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "g-r"})) \{\par
02392                 uint32_t color = 0, color1 = GREEN_hexARGB, color2 = RED_hexARGB;\par
02393                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02394                 quad.colors[0] = color;\par
02395 \par
02396                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02397                 quad.colors[1] = color;\par
02398 \par
02399                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02400                 quad.colors[2] = color;\par
02401 \par
02402                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02403                 quad.colors[3] = color;\par
02404             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "r-y"})) \{\par
02405                 uint32_t color = 0, color1 = RED_hexARGB, color2 = YELLOW_hexARGB;\par
02406                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02407                 quad.colors[0] = color;\par
02408 \par
02409                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02410                 quad.colors[1] = color;\par
02411 \par
02412                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02413                 quad.colors[2] = color;\par
02414 \par
02415                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02416                 quad.colors[3] = color;\par
02417             \}\par
02418 \par
02419             adl_quad_fill_interpolate_color_mean_value(figure.pixels_mat, figure.inv_z_buffer_mat, quad, ADL_DEFAULT_OFFSET_ZOOM); \par
02420         \}\par
02421     \}\par
02422 \par
02423     {\cf19 if} (figure.to_draw_max_min_values) \{\par
02424         adl_max_min_values_draw_on_figure(figure);\par
02425     \}\par
02426 \par
02427 \}\par
02428 \par
02446 Grid adl_cartesian_grid_create({\cf18 float} min_e1, {\cf18 float} max_e1, {\cf18 float} min_e2, {\cf18 float} max_e2, {\cf18 int} num_samples_e1, {\cf18 int} num_samples_e2, {\cf18 char} plane[], {\cf18 float} third_direction_position)\par
02447 \{\par
02448     Grid grid;\par
02449     ada_init_array(Curve, grid.curves);\par
02450 \par
02451     grid.min_e1 = min_e1;\par
02452     grid.max_e1 = max_e1;\par
02453     grid.min_e2 = min_e2;\par
02454     grid.max_e2 = max_e2;\par
02455     grid.num_samples_e1 = num_samples_e1;\par
02456     grid.num_samples_e2 = num_samples_e2;\par
02457     strncpy(grid.plane, plane, 2);\par
02458 \par
02459     {\cf18 float} del_e1 = (max_e1 - min_e1) / num_samples_e1;\par
02460     {\cf18 float} del_e2 = (max_e2 - min_e2) / num_samples_e2;\par
02461 \par
02462     grid.de1 = del_e1;\par
02463     grid.de2 = del_e2;\par
02464 \par
02465     {\cf19 if} (!strncmp(plane, {\cf22 "XY"}, 3) || !strncmp(plane, {\cf22 "xy"}, 3)) \{\par
02466         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02467             Curve curve;\par
02468             ada_init_array(Point, curve);\par
02469             Point point_max = \{0\}, point_min = \{0\};\par
02470 \par
02471             point_min.x = min_e1 + e1_index * del_e1;\par
02472             point_min.y = min_e2;\par
02473             point_min.z = third_direction_position;\par
02474             point_min.w = 1;\par
02475 \par
02476             point_max.x = min_e1 + e1_index * del_e1;\par
02477             point_max.y = max_e2;\par
02478             point_max.z = third_direction_position;\par
02479             point_max.w = 1;\par
02480 \par
02481             ada_appand(Point, curve, point_min);\par
02482             ada_appand(Point, curve, point_max);\par
02483 \par
02484             ada_appand(Curve, grid.curves, curve);\par
02485         \}\par
02486         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02487             Curve curve;\par
02488             ada_init_array(Point, curve);\par
02489             Point point_max = \{0\}, point_min = \{0\};\par
02490 \par
02491             point_min.x = min_e1;\par
02492             point_min.y = min_e2 + e2_index * del_e2;\par
02493             point_min.z = third_direction_position;\par
02494             point_min.w = 1;\par
02495 \par
02496             point_max.x = max_e1;\par
02497             point_max.y = min_e2 + e2_index * del_e2;\par
02498             point_max.z = third_direction_position;\par
02499             point_max.w = 1;\par
02500 \par
02501             ada_appand(Point, curve, point_min);\par
02502             ada_appand(Point, curve, point_max);\par
02503 \par
02504             ada_appand(Curve, grid.curves, curve);\par
02505         \}\par
02506     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "XZ"}, 3) || !strncmp(plane, {\cf22 "xz"}, 3)) \{\par
02507         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02508             Curve curve;\par
02509             ada_init_array(Point, curve);\par
02510             Point point_max = \{0\}, point_min = \{0\};\par
02511 \par
02512             point_min.x = min_e1 + e1_index * del_e1;\par
02513             point_min.y = third_direction_position;\par
02514             point_min.z = min_e2;\par
02515             point_min.w = 1;\par
02516 \par
02517             point_max.x = min_e1 + e1_index * del_e1;\par
02518             point_max.y = third_direction_position;\par
02519             point_max.z = max_e2;\par
02520             point_max.w = 1;\par
02521 \par
02522             ada_appand(Point, curve, point_min);\par
02523             ada_appand(Point, curve, point_max);\par
02524 \par
02525             ada_appand(Curve, grid.curves, curve);\par
02526         \}\par
02527         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02528             Curve curve;\par
02529             ada_init_array(Point, curve);\par
02530             Point point_max = \{0\}, point_min = \{0\};\par
02531 \par
02532             point_min.x = min_e1;\par
02533             point_min.y = third_direction_position;\par
02534             point_min.z = min_e2 + e2_index * del_e2;\par
02535             point_min.w = 1;\par
02536 \par
02537             point_max.x = max_e1;\par
02538             point_max.y = third_direction_position;\par
02539             point_max.z = min_e2 + e2_index * del_e2;\par
02540             point_max.w = 1;\par
02541 \par
02542             ada_appand(Point, curve, point_min);\par
02543             ada_appand(Point, curve, point_max);\par
02544 \par
02545             ada_appand(Curve, grid.curves, curve);\par
02546         \}\par
02547     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "YX"}, 3) || !strncmp(plane, {\cf22 "yx"}, 3)) \{\par
02548         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02549             Curve curve;\par
02550             ada_init_array(Point, curve);\par
02551             Point point_max = \{0\}, point_min = \{0\};\par
02552 \par
02553             point_min.x = min_e2;\par
02554             point_min.y = min_e1 + e1_index * del_e1;\par
02555             point_min.z = third_direction_position;\par
02556             point_min.w = 1;\par
02557 \par
02558             point_max.x = max_e2;\par
02559             point_max.y = min_e1 + e1_index * del_e1;\par
02560             point_max.z = third_direction_position;\par
02561             point_max.w = 1;\par
02562 \par
02563             ada_appand(Point, curve, point_min);\par
02564             ada_appand(Point, curve, point_max);\par
02565 \par
02566             ada_appand(Curve, grid.curves, curve);\par
02567         \}\par
02568         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02569             Curve curve;\par
02570             ada_init_array(Point, curve);\par
02571             Point point_max = \{0\}, point_min = \{0\};\par
02572 \par
02573             point_min.x = min_e2 + e2_index * del_e2;\par
02574             point_min.y = min_e1;\par
02575             point_min.z = third_direction_position;\par
02576             point_min.w = 1;\par
02577 \par
02578             point_max.x = min_e2 + e2_index * del_e2;\par
02579             point_max.y = max_e1;\par
02580             point_max.z = third_direction_position;\par
02581             point_max.w = 1;\par
02582 \par
02583             ada_appand(Point, curve, point_min);\par
02584             ada_appand(Point, curve, point_max);\par
02585 \par
02586             ada_appand(Curve, grid.curves, curve);\par
02587         \}\par
02588     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "YZ"}, 3) || !strncmp(plane, {\cf22 "yz"}, 3)) \{\par
02589         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02590             Curve curve;\par
02591             ada_init_array(Point, curve);\par
02592             Point point_max = \{0\}, point_min = \{0\};\par
02593 \par
02594             point_min.x = third_direction_position;\par
02595             point_min.y = min_e1 + e1_index * del_e1;\par
02596             point_min.z = min_e2;\par
02597             point_min.w = 1;\par
02598 \par
02599             point_max.x = third_direction_position;\par
02600             point_max.y = min_e1 + e1_index * del_e1;\par
02601             point_max.z = max_e2;\par
02602             point_max.w = 1;\par
02603 \par
02604             ada_appand(Point, curve, point_min);\par
02605             ada_appand(Point, curve, point_max);\par
02606 \par
02607             ada_appand(Curve, grid.curves, curve);\par
02608         \}\par
02609         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02610             Curve curve;\par
02611             ada_init_array(Point, curve);\par
02612             Point point_max = \{0\}, point_min = \{0\};\par
02613 \par
02614             point_min.x = third_direction_position;\par
02615             point_min.y = min_e1;\par
02616             point_min.z = min_e2 + e2_index * del_e2;\par
02617             point_min.w = 1;\par
02618 \par
02619             point_max.x = third_direction_position;\par
02620             point_max.y = max_e1;\par
02621             point_max.z = min_e2 + e2_index * del_e2;\par
02622             point_max.w = 1;\par
02623 \par
02624             ada_appand(Point, curve, point_min);\par
02625             ada_appand(Point, curve, point_max);\par
02626 \par
02627             ada_appand(Curve, grid.curves, curve);\par
02628         \}\par
02629     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "ZX"}, 3) || !strncmp(plane, {\cf22 "zx"}, 3)) \{\par
02630         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02631             Curve curve;\par
02632             ada_init_array(Point, curve);\par
02633             Point point_max = \{0\}, point_min = \{0\};\par
02634 \par
02635             point_min.x = min_e2;\par
02636             point_min.y = third_direction_position;\par
02637             point_min.z = min_e1 + e1_index * del_e1;\par
02638             point_min.w = 1;\par
02639 \par
02640             point_max.x = max_e2;\par
02641             point_max.y = third_direction_position;\par
02642             point_max.z = min_e1 + e1_index * del_e1;\par
02643             point_max.w = 1;\par
02644 \par
02645             ada_appand(Point, curve, point_min);\par
02646             ada_appand(Point, curve, point_max);\par
02647 \par
02648             ada_appand(Curve, grid.curves, curve);\par
02649         \}\par
02650         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02651             Curve curve;\par
02652             ada_init_array(Point, curve);\par
02653             Point point_max = \{0\}, point_min = \{0\};\par
02654 \par
02655             point_min.x = min_e2 + e2_index * del_e2;\par
02656             point_min.y = third_direction_position;\par
02657             point_min.z = min_e1;\par
02658             point_min.w = 1;\par
02659 \par
02660             point_max.x = min_e2 + e2_index * del_e2;\par
02661             point_max.y = third_direction_position;\par
02662             point_max.z = max_e1;\par
02663             point_max.w = 1;\par
02664 \par
02665             ada_appand(Point, curve, point_min);\par
02666             ada_appand(Point, curve, point_max);\par
02667 \par
02668             ada_appand(Curve, grid.curves, curve);\par
02669         \}\par
02670     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "ZY"}, 3) || !strncmp(plane, {\cf22 "zy"}, 3)) \{\par
02671         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02672             Curve curve;\par
02673             ada_init_array(Point, curve);\par
02674             Point point_max = \{0\}, point_min = \{0\};\par
02675 \par
02676             point_min.x = third_direction_position;\par
02677             point_min.y = min_e2;\par
02678             point_min.z = min_e1 + e1_index * del_e1;\par
02679             point_min.w = 1;\par
02680 \par
02681             point_max.x = third_direction_position;\par
02682             point_max.y = max_e2;\par
02683             point_max.z = min_e1 + e1_index * del_e1;\par
02684             point_max.w = 1;\par
02685 \par
02686             ada_appand(Point, curve, point_min);\par
02687             ada_appand(Point, curve, point_max);\par
02688 \par
02689             ada_appand(Curve, grid.curves, curve);\par
02690         \}\par
02691         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02692             Curve curve;\par
02693             ada_init_array(Point, curve);\par
02694             Point point_max = \{0\}, point_min = \{0\};\par
02695 \par
02696             point_min.x = third_direction_position;\par
02697             point_min.y = min_e2 + e2_index * del_e2;\par
02698             point_min.z = min_e1;\par
02699             point_min.w = 1;\par
02700 \par
02701             point_max.x = third_direction_position;\par
02702             point_max.y = min_e2 + e2_index * del_e2;\par
02703             point_max.z = max_e1;\par
02704             point_max.w = 1;\par
02705 \par
02706             ada_appand(Point, curve, point_min);\par
02707             ada_appand(Point, curve, point_max);\par
02708 \par
02709             ada_appand(Curve, grid.curves, curve);\par
02710         \}\par
02711     \}\par
02712 \par
02713     {\cf19 return} grid;\par
02714 \}\par
02715 \par
02724 {\cf18 void} adl_grid_draw(Mat2D_uint32 screen_mat, Grid grid, uint32_t color, Offset_zoom_param offset_zoom_param)\par
02725 \{\par
02726     {\cf19 for} ({\cf18 size_t} curve_index = 0; curve_index < grid.curves.length; curve_index++) \{\par
02727         adl_lines_draw(screen_mat, grid.curves.elements[curve_index].elements, grid.curves.elements[curve_index].length, color, offset_zoom_param);\par
02728     \}\par
02729 \}\par
02730 \par
02731 {\cf21 #endif }{\cf20 /*ALMOG_DRAW_LIBRARY_IMPLEMENTATION*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Dynamic_Array.h File Reference\par \pard\plain 
{\tc\tcl2 \v Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h}
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header-only C macros that implement a simple dynamic array. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdlib.h>}\par
{\f2 #include <assert.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Almog_Dynamic_Array.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Dynamic__Array_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Dynamic__Array_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_INIT_CAPACITY}\~ 10\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default initial capacity used by ada_init_array. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_MALLOC}\~ malloc\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by this header (defaults to malloc). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_REALLOC}\~ realloc\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reallocation function used by this header (defaults to realloc). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_ASSERT}\~ assert\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by this header (defaults to assert). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_init_array}(type,  header)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize an array header and allocate its initial storage. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_resize}(type,  header,  new_capacity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resize the underlying storage to hold new_capacity elements. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_appand}(type,  header,  value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append a value to the end of the array, growing if necessary. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_insert}(type,  header,  value,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at position index, preserving order (O(n)). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_insert_unordered}(type,  header,  value,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at index without preserving order (O(1) amortized). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_remove}(type,  header,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index, preserving order (O(n)). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_remove_unordered}(type,  header,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index by moving the last element into its place (O(1)); order is not preserved. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header-only C macros that implement a simple dynamic array. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This header provides a minimal, macro-based dynamic array for POD-like types. The array "header" is a user-defined struct with three fields:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t length; current number of elements\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t capacity; allocated capacity (in elements)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
T* elements; pointer to contiguous storage of elements (type T)\par}
\par
How to use: 1) Define a header struct with length/capacity/elements fields. 2) Initialize it with {\b ada_init_array(T, header)}. 3) Modify it with ada_appand (append), ada_insert, remove variants, etc. 4) When done, free(header.elements) (or your custom deallocator).\par
Customization:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Define ADA_MALLOC, ADA_REALLOC, and ADA_ASSERT before including this header to override allocation and assertion behavior.\par}
\par
Complexity (n = number of elements):{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Append: amortized O(1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ordered insert/remove: O(n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Unordered insert/remove: O(1)\par}
\par
Notes and limitations:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
These are macros; arguments may be evaluated multiple times. Pass only simple lvalues (no side effects).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Index checks rely on ADA_ASSERT; with NDEBUG they may be compiled out.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ada_resize exits the process (exit(1)) if reallocation fails.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ada_insert reads header.elements[header.length - 1] internally; inserting into an empty array via ada_insert is undefined behavior. Use ada_appand or ada_insert_unordered for that case.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
No automatic shrinking; you may call ada_resize manually.\par}
\par
Example: typedef struct \{ size_t length; size_t capacity; int* elements; \} ada_int_array;\par
ada_int_array arr; {\b ada_init_array(int, arr)}; {\b ada_appand(int, arr, 42)}; {\b ada_insert(int, arr, 7, 0)}; // requires arr.length > 0 {\b ada_remove(int, arr, 1)}; free(arr.elements); \par
}{
Definition in file {\b Almog_Dynamic_Array.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ada_appand\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_appand}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_appand( type,  header,  value)}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{                        \\\par
        if (header.length >= header.capacity) \{                     \\\par
            ada_resize(type, header, ({\cf18 int})(header.capacity*1.5));   \\\par
        \}                                                           \\\par
        header.elements[header.length] = value;                     \\\par
        header.length++;                                            \\\par
    \} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append a value to the end of the array, growing if necessary. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Value to append.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is incremented by 1; the last element equals value.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Growth factor is (int)(header.capacity * 1.5). Because of truncation, very small capacities may not grow (e.g., from 1 to 1). With the default INIT_CAPACITY=10 this is typically not an issue unless you manually shrink capacity. Ensure growth always increases capacity by at least 1 if you customize this macro. \par
}}}{
Definition at line {\b 169} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_ASSERT\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by this header (defaults to assert). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define ADA_ASSERT before including this file to override. When NDEBUG is defined, standard assert() is disabled. \par
}{
Definition at line {\b 96} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_init_array\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_init_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_init_array( type,  header)}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{                                       \\\par
        header.capacity = ADA_INIT_CAPACITY;                                        \\\par
        header.length = 0;                                                      \\\par
        header.elements = (type *)ADA_MALLOC({\cf17 sizeof}(type) * header.capacity);   \\\par
        ADA_ASSERT(header.elements != NULL);                                    \\\par
    \} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize an array header and allocate its initial storage. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array (e.g., int). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct containing fields: length, capacity, and elements.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header is a modifiable lvalue; header.elements is uninitialized or ignored and will be overwritten. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length == 0, header.capacity == INIT_CAPACITY, header.elements != NULL (or ADA_ASSERT fails).\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Allocation uses ADA_MALLOC and is checked via ADA_ASSERT. \par
}}}{
Definition at line {\b 120} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_INIT_CAPACITY\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_INIT_CAPACITY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_INIT_CAPACITY\~ 10}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default initial capacity used by ada_init_array. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You may override this by defining INIT_CAPACITY before including this file. \par
}{
Definition at line {\b 64} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_insert\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_insert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_insert( type,  header,  value,  index)}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                         \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                                                                          \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);                                                         \\\par
    ada_appand(type, header, header.elements[header.length-1]);                                             \\\par
    for ({\cf18 size_t} ada_for_loop_index = header.length-2; ada_for_loop_index > (index); ada_for_loop_index--) \{ \\\par
        header.elements[ada_for_loop_index] = header.elements [ada_for_loop_index-1];                       \\\par
    \}                                                                                                       \\\par
    header.elements[(index)] = value;                                                                       \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at position index, preserving order (O(n)). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Value to insert. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Destination index in the range [0, header.length].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index <= header.length. \par
header.length > 0 if index == header.length (this macro reads the last element internally). For inserting into an empty array, use ada_appand or ada_insert_unordered. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Element is inserted at index; subsequent elements are shifted right; header.length is incremented by 1.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This macro asserts index is non-negative and an integer value using ADA_ASSERT. No explicit upper-bound assert is performed. \par
}}}{
Definition at line {\b 196} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_insert_unordered\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_insert_unordered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_insert_unordered( type,  header,  value,  index)}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{   \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                              \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);             \\\par
    if (({\cf18 size_t})(index) == header.length) \{                     \\\par
        ada_appand(type, header, value);                        \\\par
    \} {\cf19 else} \{                                                    \\\par
        ada_appand(type, header, header.elements[(index)]);     \\\par
        header.elements[(index)] = value;                       \\\par
    \}                                                           \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at index without preserving order (O(1) amortized). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If index == header.length, this behaves like an append. Otherwise, the current element at index is moved to the end, and value is written at index.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Value to insert. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Index in the range [0, header.length].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index <= header.length. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is incremented by 1; array order is not preserved. \par
}}}{
Definition at line {\b 222} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_MALLOC\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_MALLOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_MALLOC\~ malloc}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by this header (defaults to malloc). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define ADA_MALLOC to a compatible allocator before including this file to override the default. \par
}{
Definition at line {\b 74} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_REALLOC\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_REALLOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_REALLOC\~ realloc}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reallocation function used by this header (defaults to realloc). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define ADA_REALLOC to a compatible reallocator before including this file to override the default. \par
}{
Definition at line {\b 85} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_remove\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_remove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_remove( type,  header,  index)}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                                                                          \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);                                                         \\\par
    for ({\cf18 size_t} ada_for_loop_index = (index); ada_for_loop_index < header.length-1; ada_for_loop_index++) \{ \\\par
        header.elements[ada_for_loop_index] = header.elements[ada_for_loop_index+1];                        \\\par
    \}                                                                                                       \\\par
    header.length--;                                                                                        \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index, preserving order (O(n)). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Index in the range [0, header.length - 1].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index < header.length. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is decremented by 1; subsequent elements are shifted left by one position. The element beyond the new length is left uninitialized. \par
}}}{
Definition at line {\b 246} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_remove_unordered\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_remove_unordered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_remove_unordered( type,  header,  index)}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{          \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                              \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);             \\\par
    header.elements[index] = header.elements[header.length-1];  \\\par
    header.length--;                                            \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index by moving the last element into its place (O(1)); order is not preserved. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Index in the range [0, header.length - 1].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index < header.length and header.length > 0. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is decremented by 1; array order is not preserved. \par
}}}{
Definition at line {\b 267} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_resize\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_resize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_resize( type,  header,  new_capacity)}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{                                                         \\\par
        type *ada_temp_pointer = (type *)ADA_REALLOC(({\cf18 void} *)(header.elements), new_capacity*{\cf17 sizeof}(type)); \\\par
        if (ada_temp_pointer == NULL) \{                                                                     \\\par
            exit(1);                                                                                        \\\par
        \}                                                                                                   \\\par
        header.elements = ada_temp_pointer;                                                                 \\\par
        ADA_ASSERT(header.elements != NULL);                                                                \\\par
        header.capacity = new_capacity;                                                                     \\\par
    \} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resize the underlying storage to hold new_capacity elements. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i new_capacity} \cell }{New capacity in number of elements.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
new_capacity >= header.length (otherwise elements beyond new_capacity are lost and length will not be adjusted). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.capacity == new_capacity and header.elements points to a block large enough for new_capacity elements.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
On allocation failure, this macro calls exit(1). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Reallocation uses ADA_REALLOC and is also checked via ADA_ASSERT. \par
}}}{
Definition at line {\b 143} of file {\b Almog_Dynamic_Array.h}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Dynamic_Array.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00051 {\cf21 #ifndef ALMOG_DYNAMIC_ARRAY_H_}\par
00052 {\cf21 #define ALMOG_DYNAMIC_ARRAY_H_}\par
00053 \par
00054 {\cf21 #include <stdlib.h>}\par
00055 {\cf21 #include <assert.h>}\par
00056 \par
00057 \par
00064 {\cf21 #define ADA_INIT_CAPACITY 10}\par
00065 \par
00073 {\cf21 #ifndef ADA_MALLOC}\par
00074 {\cf21 #define ADA_MALLOC malloc}\par
00075 {\cf21 #endif }{\cf20 /*ADA_MALLOC*/}{\cf21 }\par
00076 \par
00084 {\cf21 #ifndef ADA_REALLOC}\par
00085 {\cf21 #define ADA_REALLOC realloc}\par
00086 {\cf21 #endif }{\cf20 /*ADA_REALLOC*/}{\cf21 }\par
00087 \par
00095 {\cf21 #ifndef ADA_ASSERT}\par
00096 {\cf21 #define ADA_ASSERT assert}\par
00097 {\cf21 #endif }{\cf20 /*ADA_ASSERT*/}{\cf21 }\par
00098 \par
00099 {\cf20 /* typedef struct \{}\par
00100 {\cf20     size_t length;}\par
00101 {\cf20     size_t capacity;}\par
00102 {\cf20     int* elements;}\par
00103 {\cf20 \} ada_int_array; */}\par
00104 \par
00120 {\cf21 #define ada_init_array(type, header) do \{                                       \\}\par
00121 {\cf21         header.capacity = ADA_INIT_CAPACITY;                                        \\}\par
00122 {\cf21         header.length = 0;                                                      \\}\par
00123 {\cf21         header.elements = (type *)ADA_MALLOC(sizeof(type) * header.capacity);   \\}\par
00124 {\cf21         ADA_ASSERT(header.elements != NULL);                                    \\}\par
00125 {\cf21     \} while (0)}\par
00126 \par
00143 {\cf21 #define ada_resize(type, header, new_capacity) do \{                                                         \\}\par
00144 {\cf21         type *ada_temp_pointer = (type *)ADA_REALLOC((void *)(header.elements), new_capacity*sizeof(type)); \\}\par
00145 {\cf21         if (ada_temp_pointer == NULL) \{                                                                     \\}\par
00146 {\cf21             exit(1);                                                                                        \\}\par
00147 {\cf21         \}                                                                                                   \\}\par
00148 {\cf21         header.elements = ada_temp_pointer;                                                                 \\}\par
00149 {\cf21         ADA_ASSERT(header.elements != NULL);                                                                \\}\par
00150 {\cf21         header.capacity = new_capacity;                                                                     \\}\par
00151 {\cf21     \} while (0)}\par
00152 \par
00169 {\cf21 #define ada_appand(type, header, value) do \{                        \\}\par
00170 {\cf21         if (header.length >= header.capacity) \{                     \\}\par
00171 {\cf21             ada_resize(type, header, (int)(header.capacity*1.5));   \\}\par
00172 {\cf21         \}                                                           \\}\par
00173 {\cf21         header.elements[header.length] = value;                     \\}\par
00174 {\cf21         header.length++;                                            \\}\par
00175 {\cf21     \} while (0)}\par
00176 \par
00196 {\cf21 #define ada_insert(type, header, value, index) do \{                                                         \\}\par
00197 {\cf21     ADA_ASSERT((int)(index) >= 0);                                                                          \\}\par
00198 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);                                                         \\}\par
00199 {\cf21     ada_appand(type, header, header.elements[header.length-1]);                                             \\}\par
00200 {\cf21     for (size_t ada_for_loop_index = header.length-2; ada_for_loop_index > (index); ada_for_loop_index--) \{ \\}\par
00201 {\cf21         header.elements[ada_for_loop_index] = header.elements [ada_for_loop_index-1];                       \\}\par
00202 {\cf21     \}                                                                                                       \\}\par
00203 {\cf21     header.elements[(index)] = value;                                                                       \\}\par
00204 {\cf21 \} while (0)}\par
00205 \par
00206 \par
00222 {\cf21 #define ada_insert_unordered(type, header, value, index) do \{   \\}\par
00223 {\cf21     ADA_ASSERT((int)(index) >= 0);                              \\}\par
00224 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);             \\}\par
00225 {\cf21     if ((size_t)(index) == header.length) \{                     \\}\par
00226 {\cf21         ada_appand(type, header, value);                        \\}\par
00227 {\cf21     \} else \{                                                    \\}\par
00228 {\cf21         ada_appand(type, header, header.elements[(index)]);     \\}\par
00229 {\cf21         header.elements[(index)] = value;                       \\}\par
00230 {\cf21     \}                                                           \\}\par
00231 {\cf21 \} while (0)}\par
00232 \par
00246 {\cf21 #define ada_remove(type, header, index) do \{                                                                \\}\par
00247 {\cf21     ADA_ASSERT((int)(index) >= 0);                                                                          \\}\par
00248 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);                                                         \\}\par
00249 {\cf21     for (size_t ada_for_loop_index = (index); ada_for_loop_index < header.length-1; ada_for_loop_index++) \{ \\}\par
00250 {\cf21         header.elements[ada_for_loop_index] = header.elements[ada_for_loop_index+1];                        \\}\par
00251 {\cf21     \}                                                                                                       \\}\par
00252 {\cf21     header.length--;                                                                                        \\}\par
00253 {\cf21 \} while (0)}\par
00254 \par
00267 {\cf21 #define ada_remove_unordered(type, header, index) do \{          \\}\par
00268 {\cf21     ADA_ASSERT((int)(index) >= 0);                              \\}\par
00269 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);             \\}\par
00270 {\cf21     header.elements[index] = header.elements[header.length-1];  \\}\par
00271 {\cf21     header.length--;                                            \\}\par
00272 {\cf21 \} while (0)}\par
00273 \par
00274 \par
00275 {\cf21 #endif }{\cf20 /*ALMOG_DYNAMIC_ARRAY_H_*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
display.c File Reference\par \pard\plain 
{\tc\tcl2 \v display.c}
{\xe \v display.c}
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SDL2/SDL.h>}\par
{\f2 #include <SDL2/SDL_ttf.h>}\par
{\f2 #include "Matrix2D.h"}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include "Almog_Draw_Library.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for display.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "display_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "display_8c__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b game_state_t}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WINDOW_WIDTH}\~ (16 * 80)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WINDOW_HEIGHT}\~ (9 * 80)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FPS}\~ 100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FRAME_TARGET_TIME}\~ (1000 / {\b FPS})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintSTRING}(expr)\~ printf(#expr " = %s\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintCHAR}(expr)\~ printf(#expr " = %c\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintINT}(expr)\~ printf(#expr " = %d\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintD}(expr)\~ printf(#expr " = %g\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintSIZE_T}(expr)\~ printf(#expr " = %zu\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SETUP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UPDATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RENDER}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b initialize_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b process_input_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b fix_framerate} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_window_mat_size} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b copy_mat_to_surface_RGB} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v dprintCHAR\:display.c}
{\xe \v display.c\:dprintCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintCHAR( expr)\~ printf(#expr " = %c\\n", expr)}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b display.c}.}\par
}
{\xe \v dprintD\:display.c}
{\xe \v display.c\:dprintD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintD( expr)\~ printf(#expr " = %g\\n", expr)}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b display.c}.}\par
}
{\xe \v dprintINT\:display.c}
{\xe \v display.c\:dprintINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintINT( expr)\~ printf(#expr " = %d\\n", expr)}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b display.c}.}\par
}
{\xe \v dprintSIZE_T\:display.c}
{\xe \v display.c\:dprintSIZE_T}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintSIZE_T( expr)\~ printf(#expr " = %zu\\n", expr)}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b display.c}.}\par
}
{\xe \v dprintSTRING\:display.c}
{\xe \v display.c\:dprintSTRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintSTRING( expr)\~ printf(#expr " = %s\\n", expr)}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b display.c}.}\par
}
{\xe \v FPS\:display.c}
{\xe \v display.c\:FPS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FPS\~ 100}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b display.c}.}\par
}
{\xe \v FRAME_TARGET_TIME\:display.c}
{\xe \v display.c\:FRAME_TARGET_TIME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FRAME_TARGET_TIME\~ (1000 / {\b FPS})}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b display.c}.}\par
}
{\xe \v RENDER\:display.c}
{\xe \v display.c\:RENDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RENDER}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 351} of file {\b display.c}.}\par
}
{\xe \v SETUP\:display.c}
{\xe \v display.c\:SETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SETUP}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 341} of file {\b display.c}.}\par
}
{\xe \v UPDATE\:display.c}
{\xe \v display.c\:UPDATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UPDATE}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 346} of file {\b display.c}.}\par
}
{\xe \v WINDOW_HEIGHT\:display.c}
{\xe \v display.c\:WINDOW_HEIGHT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WINDOW_HEIGHT\~ (9 * 80)}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b display.c}.}\par
}
{\xe \v WINDOW_WIDTH\:display.c}
{\xe \v display.c\:WINDOW_WIDTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WINDOW_WIDTH\~ (16 * 80)}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b display.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v check_window_mat_size\:display.c}
{\xe \v display.c\:check_window_mat_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void check_window_mat_size ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 355} of file {\b display.c}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b game_state_t::inv_z_buffer_mat}, {\b mat2D_alloc()}, {\b mat2D_alloc_uint32()}, {\b mat2D_free()}, {\b mat2D_free_uint32()}, {\b Mat2D_uint32::rows}, {\b game_state_t::window}, {\b game_state_t::window_h}, {\b game_state_t::window_pixels_mat}, {\b game_state_t::window_surface}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
{\xe \v copy_mat_to_surface_RGB\:display.c}
{\xe \v display.c\:copy_mat_to_surface_RGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void copy_mat_to_surface_RGB ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 369} of file {\b display.c}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b Mat2D_uint32::elements}, {\b Mat2D_uint32::rows}, {\b game_state_t::window_pixels_mat}, and {\b game_state_t::window_surface}.}\par
{
\ql
Referenced by {\b render_window()}.}\par
}
{\xe \v destroy_window\:display.c}
{\xe \v display.c\:destroy_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void destroy_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 312} of file {\b display.c}.}\par
{
\ql
References {\b mat2D_free_uint32()}, {\b game_state_t::renderer}, {\b game_state_t::window}, {\b game_state_t::window_pixels_mat}, {\b game_state_t::window_surface}, and {\b game_state_t::window_texture}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v fix_framerate\:display.c}
{\xe \v display.c\:fix_framerate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void fix_framerate ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 327} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::delta_time}, {\b game_state_t::frame_target_time}, {\b game_state_t::previous_frame_time}, and {\b game_state_t::to_limit_fps}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
{\xe \v initialize_window\:display.c}
{\xe \v display.c\:initialize_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int initialize_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 141} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::renderer}, {\b game_state_t::window}, {\b game_state_t::window_h}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v main\:display.c}
{\xe \v display.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 89} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::a_was_pressed}, {\b game_state_t::const_fps}, {\b game_state_t::d_was_pressed}, {\b game_state_t::delta_time}, {\b destroy_window()}, {\b game_state_t::e_was_pressed}, {\b game_state_t::elapsed_time}, {\b game_state_t::font}, {\b FPS}, {\b game_state_t::fps}, {\b FRAME_TARGET_TIME}, {\b game_state_t::frame_target_time}, {\b game_state_t::game_is_running}, {\b initialize_window()}, {\b game_state_t::left_button_pressed}, {\b game_state_t::offset_zoom_param}, {\b game_state_t::previous_frame_time}, {\b process_input_window()}, {\b game_state_t::q_was_pressed}, {\b render_window()}, {\b game_state_t::renderer}, {\b game_state_t::s_was_pressed}, {\b setup_window()}, {\b game_state_t::space_bar_was_pressed}, {\b game_state_t::to_clear_renderer}, {\b game_state_t::to_limit_fps}, {\b game_state_t::to_render}, {\b game_state_t::to_update}, {\b update_window()}, {\b game_state_t::w_was_pressed}, {\b game_state_t::window}, {\b game_state_t::window_h}, {\b WINDOW_HEIGHT}, {\b game_state_t::window_w}, {\b WINDOW_WIDTH}, and {\b Offset_zoom_param::zoom_multiplier}.}\par
}
{\xe \v process_input_window\:display.c}
{\xe \v display.c\:process_input_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void process_input_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 196} of file {\b display.c}.}\par
{
\ql
References {\b ADL_MAX_ZOOM}, {\b game_state_t::game_is_running}, {\b game_state_t::left_button_pressed}, {\b Offset_zoom_param::offset_x}, {\b Offset_zoom_param::offset_y}, {\b game_state_t::offset_zoom_param}, {\b game_state_t::previous_frame_time}, {\b game_state_t::space_bar_was_pressed}, {\b game_state_t::to_render}, {\b game_state_t::to_update}, and {\b Offset_zoom_param::zoom_multiplier}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v render\:display.c}
{\xe \v display.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 352} of file {\b display.c}.}\par
{
\ql
Referenced by {\b render_window()}.}\par
}
{\xe \v render_window\:display.c}
{\xe \v display.c\:render_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 291} of file {\b display.c}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D_uint32::cols}, {\b copy_mat_to_surface_RGB()}, {\b Mat2D::elements}, {\b Mat2D_uint32::elements}, {\b game_state_t::inv_z_buffer_mat}, {\b render()}, {\b Mat2D::rows}, {\b Mat2D_uint32::rows}, {\b game_state_t::to_clear_renderer}, {\b game_state_t::window}, and {\b game_state_t::window_pixels_mat}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v setup\:display.c}
{\xe \v display.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 342} of file {\b display.c}.}\par
{
\ql
Referenced by {\b setup_window()}.}\par
}
{\xe \v setup_window\:display.c}
{\xe \v display.c\:setup_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 182} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::inv_z_buffer_mat}, {\b mat2D_alloc()}, {\b mat2D_alloc_uint32()}, {\b setup()}, {\b game_state_t::window}, {\b game_state_t::window_h}, {\b game_state_t::window_pixels_mat}, {\b game_state_t::window_surface}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v update\:display.c}
{\xe \v display.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 347} of file {\b display.c}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
{\xe \v update_window\:display.c}
{\xe \v display.c\:update_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 263} of file {\b display.c}.}\par
{
\ql
References {\b check_window_mat_size()}, {\b game_state_t::const_fps}, {\b game_state_t::delta_time}, {\b game_state_t::elapsed_time}, {\b fix_framerate()}, {\b game_state_t::fps}, {\b game_state_t::frame_target_time}, {\b game_state_t::to_limit_fps}, {\b update()}, {\b game_state_t::window}, {\b game_state_t::window_h}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
display.c\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <SDL2/SDL.h>}\par
00002 {\cf21 #include <SDL2/SDL_ttf.h>}\par
00003 {\cf21 #include "Matrix2D.h"}\par
00004 {\cf21 #include <stdlib.h>}\par
00005 {\cf21 #include <stdint.h>}\par
00006 {\cf21 #include "Almog_Draw_Library.h"}\par
00007 \par
00008 {\cf21 #ifndef WINDOW_WIDTH}\par
00009 {\cf21 #define WINDOW_WIDTH (16 * 80)}\par
00010 {\cf21 #endif}\par
00011 \par
00012 {\cf21 #ifndef WINDOW_HEIGHT}\par
00013 {\cf21 #define WINDOW_HEIGHT (9 * 80)}\par
00014 {\cf21 #endif}\par
00015 \par
00016 {\cf21 #ifndef FPS}\par
00017 {\cf21 #define FPS 100}\par
00018 {\cf21 #endif}\par
00019 \par
00020 {\cf21 #ifndef FRAME_TARGET_TIME}\par
00021 {\cf21 #define FRAME_TARGET_TIME (1000 / FPS)}\par
00022 {\cf21 #endif}\par
00023 \par
00024 {\cf21 #define dprintSTRING(expr) printf(#expr " = %s\\n"}, expr)\par
00025 {\cf21 #define dprintCHAR(expr) printf(#expr " = %c\\n"}, expr)\par
00026 {\cf21 #define dprintINT(expr) printf(#expr " = %d\\n"}, expr)\par
00027 {\cf21 #define dprintD(expr) printf(#expr " = %g\\n"}, expr)\par
00028 {\cf21 #define dprintSIZE_T(expr) printf(#expr " = %zu\\n"}, expr)\par
00029 \par
00030 {\cf21 #ifndef PI}\par
00031 {\cf21     #ifndef __USE_MISC}\par
00032 {\cf21     #define __USE_MISC}\par
00033 {\cf21     #endif}\par
00034 {\cf21     #include <math.h>}\par
00035 {\cf21     #define PI M_PI}\par
00036 {\cf21 #endif}\par
00037 \par
00038 {\cf17 typedef} {\cf17 struct }\{\par
00039     {\cf18 int} game_is_running;\par
00040     {\cf18 float} delta_time;\par
00041     {\cf18 float} elapsed_time;\par
00042     {\cf18 float} const_fps;\par
00043     {\cf18 float} fps;\par
00044     {\cf18 float} frame_target_time;\par
00045     {\cf18 int} to_render;\par
00046     {\cf18 int} to_update;\par
00047     {\cf18 size_t} previous_frame_time;\par
00048     {\cf18 int} left_button_pressed;\par
00049     {\cf18 int} to_limit_fps;\par
00050     {\cf18 int} to_clear_renderer;\par
00051 \par
00052     {\cf18 int} space_bar_was_pressed;\par
00053     {\cf18 int} w_was_pressed;\par
00054     {\cf18 int} s_was_pressed;\par
00055     {\cf18 int} a_was_pressed;\par
00056     {\cf18 int} d_was_pressed;\par
00057     {\cf18 int} e_was_pressed;\par
00058     {\cf18 int} q_was_pressed;\par
00059 \par
00060     SDL_Window *window;\par
00061     {\cf18 int} window_w;\par
00062     {\cf18 int} window_h;\par
00063     SDL_Renderer *renderer;\par
00064     TTF_Font *font;\par
00065 \par
00066     SDL_Surface *window_surface;\par
00067     SDL_Texture *window_texture;\par
00068 \par
00069     Mat2D_uint32 window_pixels_mat;\par
00070     Mat2D inv_z_buffer_mat;\par
00071 \par
00072     Offset_zoom_param offset_zoom_param;\par
00073 \} game_state_t;\par
00074 \par
00075 {\cf18 int} initialize_window(game_state_t *game_state);\par
00076 {\cf18 void} setup_window(game_state_t *game_state);\par
00077 {\cf18 void} process_input_window(game_state_t *game_state);\par
00078 {\cf18 void} update_window(game_state_t *game_state);\par
00079 {\cf18 void} render_window(game_state_t *game_state);\par
00080 {\cf18 void} destroy_window(game_state_t *game_state);\par
00081 {\cf18 void} fix_framerate(game_state_t *game_state);\par
00082 {\cf18 void} setup(game_state_t *game_state);\par
00083 {\cf18 void} update(game_state_t *game_state);\par
00084 {\cf18 void} render(game_state_t *game_state);\par
00085 \par
00086 {\cf18 void} check_window_mat_size(game_state_t *game_state);\par
00087 {\cf18 void} copy_mat_to_surface_RGB(game_state_t *game_state);\par
00088 \par
00089 {\cf18 int} main()\par
00090 \{\par
00091     game_state_t game_state = \{0\};\par
00092 \par
00093     game_state.game_is_running = 0;\par
00094     game_state.delta_time = 0;\par
00095     game_state.elapsed_time = 0;\par
00096     game_state.const_fps = FPS;\par
00097     game_state.fps = 0;\par
00098     game_state.frame_target_time = FRAME_TARGET_TIME;\par
00099 \par
00100     game_state.space_bar_was_pressed = 0;\par
00101     game_state.w_was_pressed = 0;\par
00102     game_state.s_was_pressed = 0;\par
00103     game_state.a_was_pressed = 0;\par
00104     game_state.d_was_pressed = 0;\par
00105     game_state.e_was_pressed = 0;\par
00106     game_state.q_was_pressed = 0;\par
00107 \par
00108     game_state.to_render = 1;\par
00109     game_state.to_update = 1;\par
00110     game_state.previous_frame_time = 0;\par
00111     game_state.left_button_pressed = 0;\par
00112     game_state.to_limit_fps = 1;\par
00113     game_state.to_clear_renderer = 1;\par
00114     game_state.window = NULL;\par
00115     game_state.window_w = WINDOW_WIDTH;\par
00116     game_state.window_h = WINDOW_HEIGHT;\par
00117     game_state.renderer = NULL;\par
00118     game_state.font = NULL;\par
00119 \par
00120     game_state.offset_zoom_param.zoom_multiplier = 1;\par
00121 \par
00122     game_state.game_is_running = !initialize_window(&game_state);\par
00123 \par
00124     setup_window(&game_state);\par
00125 \par
00126     {\cf19 while} (game_state.game_is_running) \{\par
00127         process_input_window(&game_state);\par
00128         {\cf19 if} (game_state.to_update) \{\par
00129             update_window(&game_state);\par
00130         \}\par
00131         {\cf19 if} (game_state.to_render) \{\par
00132             render_window(&game_state);\par
00133         \}\par
00134         \par
00135     \}\par
00136     destroy_window(&game_state);\par
00137 \par
00138     {\cf19 return} 0;\par
00139 \}\par
00140 \par
00141 {\cf18 int} initialize_window(game_state_t *game_state)\par
00142 \{\par
00143     {\cf19 if} (SDL_Init(SDL_INIT_EVERYTHING) != 0) \{\par
00144         fprintf(stderr, {\cf22 "%s:%d: [Error] initializing SDL.\\n"}, __FILE__, __LINE__);\par
00145         {\cf19 return} -1;\par
00146     \}\par
00147 \par
00148     game_state->window = SDL_CreateWindow(NULL,\par
00149                               SDL_WINDOWPOS_CENTERED,\par
00150                               SDL_WINDOWPOS_CENTERED,\par
00151                               game_state->window_w,\par
00152                               game_state->window_h,\par
00153                               SDL_WINDOW_RESIZABLE\par
00154                               );\par
00155     {\cf19 if} (!game_state->window) \{\par
00156         fprintf(stderr, {\cf22 "%s:%d: [Error] creating SDL window.\\n"}, __FILE__, __LINE__);\par
00157         {\cf19 return} -1;\par
00158     \}\par
00159 \par
00160     game_state->renderer = SDL_CreateRenderer(game_state->window, -1, 0);\par
00161     {\cf19 if} (!game_state->renderer) \{\par
00162         fprintf(stderr, {\cf22 "%s:%d: [Error] creating SDL renderer.\\n"}, __FILE__, __LINE__);\par
00163         {\cf19 return} -1;\par
00164     \}\par
00165 \par
00166     {\cf19 if} (TTF_Init() == -1) \{\par
00167         fprintf(stderr, {\cf22 "%s:%d: [Error] initializing SDL_ttf.\\n"}, __FILE__, __LINE__);\par
00168         {\cf19 return} -1;\par
00169     \}\par
00170 \par
00171     {\cf20 // game_state->font = TTF_OpenFont("./font/Gabriely Black.ttf",32);}\par
00172     {\cf20 // if (!game_state->font) \{}\par
00173     {\cf20 //     fprintf(stderr, "%s:%d: [Error] loading font.\\n", __FILE__, __LINE__);}\par
00174     {\cf20 //     return -1;}\par
00175     {\cf20 // \}}\par
00176 \par
00177     (void)game_state;\par
00178     \par
00179     {\cf19 return} 0;\par
00180 \}\par
00181 \par
00182 {\cf18 void} setup_window(game_state_t *game_state)\par
00183 \{\par
00184 \par
00185     game_state->window_surface = SDL_GetWindowSurface(game_state->window);\par
00186 \par
00187     game_state->window_pixels_mat = mat2D_alloc_uint32(game_state->window_h, game_state->window_w);\par
00188     game_state->inv_z_buffer_mat = mat2D_alloc(game_state->window_h, game_state->window_w);\par
00189 \par
00190     {\cf20 /*-----------------------------------*/}\par
00191 \par
00192     setup(game_state);\par
00193 \par
00194 \}\par
00195 \par
00196 {\cf18 void} process_input_window(game_state_t *game_state)\par
00197 \{\par
00198     SDL_Event event;\par
00199     {\cf19 while} (SDL_PollEvent(&event)) \{\par
00200         {\cf19 switch} (event.type) \{\par
00201             {\cf19 case} SDL_QUIT:\par
00202                 game_state->game_is_running = 0;\par
00203                 {\cf19 break};\par
00204             {\cf19 case} SDL_KEYDOWN:\par
00205                 {\cf19 if} (event.key.keysym.sym == SDLK_ESCAPE) \{\par
00206                     game_state->game_is_running = 0;\par
00207                 \}\par
00208                 {\cf19 if} (event.key.keysym.sym == SDLK_SPACE) \{\par
00209                     {\cf19 if} (!game_state->space_bar_was_pressed) \{\par
00210                         game_state->to_render = 0;\par
00211                         game_state->to_update = 0;\par
00212                         game_state->space_bar_was_pressed = 1;\par
00213                         {\cf19 break};\par
00214                     \}\par
00215                     {\cf19 if} (game_state->space_bar_was_pressed) \{\par
00216                         game_state->to_render = 1;\par
00217                         game_state->to_update = 1;\par
00218                         game_state->previous_frame_time = SDL_GetTicks();\par
00219                         game_state->space_bar_was_pressed = 0;\par
00220                         {\cf19 break};\par
00221                     \}\par
00222                 \}\par
00223                 {\cf19 if} (event.key.keysym.sym == SDLK_w) \{\par
00224                     game_state->offset_zoom_param.offset_y += 5/game_state->offset_zoom_param.zoom_multiplier;\par
00225                 \}\par
00226                 {\cf19 if} (event.key.keysym.sym == SDLK_s) \{\par
00227                     game_state->offset_zoom_param.offset_y -= 5/game_state->offset_zoom_param.zoom_multiplier;\par
00228                 \}\par
00229                 {\cf19 if} (event.key.keysym.sym == SDLK_a) \{\par
00230                     game_state->offset_zoom_param.offset_x += 5/game_state->offset_zoom_param.zoom_multiplier;\par
00231                 \}\par
00232                 {\cf19 if} (event.key.keysym.sym == SDLK_d) \{\par
00233                     game_state->offset_zoom_param.offset_x -= 5/game_state->offset_zoom_param.zoom_multiplier;\par
00234                 \}\par
00235                 {\cf19 if} (event.key.keysym.sym == SDLK_e) \{\par
00236                     game_state->offset_zoom_param.zoom_multiplier += 0.1*game_state->offset_zoom_param.zoom_multiplier;\par
00237                     game_state->offset_zoom_param.zoom_multiplier = fminf(game_state->offset_zoom_param.zoom_multiplier, ADL_MAX_ZOOM);\par
00238                 \}\par
00239                 {\cf19 if} (event.key.keysym.sym == SDLK_q) \{\par
00240                     game_state->offset_zoom_param.zoom_multiplier -= 0.1*game_state->offset_zoom_param.zoom_multiplier;\par
00241                     game_state->offset_zoom_param.zoom_multiplier = fminf(game_state->offset_zoom_param.zoom_multiplier, ADL_MAX_ZOOM);\par
00242                 \}\par
00243                 {\cf19 if} (event.key.keysym.sym == SDLK_r) \{\par
00244                     game_state->offset_zoom_param.zoom_multiplier = 1;\par
00245                     game_state->offset_zoom_param.offset_x = 0;\par
00246                     game_state->offset_zoom_param.offset_y = 0;\par
00247                 \}\par
00248                 {\cf19 break};\par
00249             {\cf19 case} SDL_MOUSEBUTTONDOWN:\par
00250                 {\cf19 if} (event.button.button == SDL_BUTTON_LEFT) \{\par
00251                     game_state->left_button_pressed = 1;\par
00252                 \}\par
00253                 {\cf19 break};\par
00254             {\cf19 case} SDL_MOUSEBUTTONUP:\par
00255                 {\cf19 if} (event.button.button == SDL_BUTTON_LEFT) \{\par
00256                     game_state->left_button_pressed = 0;\par
00257                 \}\par
00258                 {\cf19 break};\par
00259         \}\par
00260     \}\par
00261 \}\par
00262 \par
00263 {\cf18 void} update_window(game_state_t *game_state)\par
00264 \{\par
00265     SDL_GetWindowSize(game_state->window, &(game_state->window_w), &(game_state->window_h));\par
00266 \par
00267     fix_framerate(game_state);\par
00268     game_state->elapsed_time += game_state->delta_time;\par
00269     game_state->fps = 1.0f / game_state->delta_time;\par
00270     game_state->frame_target_time = 1000/game_state->const_fps;\par
00271 \par
00272     {\cf18 char} fps_count[100];\par
00273     {\cf19 if} (!game_state->to_limit_fps) \{\par
00274         sprintf(fps_count, {\cf22 "dt = %5.02f [ms]"}, game_state->delta_time*1000);\par
00275     \} {\cf19 else} \{\par
00276         sprintf(fps_count, {\cf22 "FPS = %5.2f"}, game_state->fps);\par
00277     \}\par
00278 \par
00279     {\cf19 if} (game_state->elapsed_time*10-({\cf18 int})(game_state->elapsed_time*10) < 0.1) \{\par
00280         SDL_SetWindowTitle(game_state->window, fps_count);\par
00281     \}\par
00282 \par
00283     check_window_mat_size(game_state);\par
00284 \par
00285     {\cf20 /*----------------------------------------------------------------------------*/}\par
00286 \par
00287     update(game_state);\par
00288 \par
00289 \}\par
00290 \par
00291 {\cf18 void} render_window(game_state_t *game_state)\par
00292 \{\par
00293     {\cf19 if} (game_state->to_clear_renderer) \{\par
00294         {\cf20 // SDL_SetRenderDrawColor(game_state->renderer, HexARGB_RGBA(0xFF181818));}\par
00295         {\cf20 // SDL_RenderClear(game_state->renderer);}\par
00296         {\cf20 // mat2D_fill(game_state->window_pixels_mat, 0x181818);}\par
00297         memset(game_state->window_pixels_mat.elements, 0x20, {\cf17 sizeof}(uint32_t) * game_state->window_pixels_mat.rows * game_state->window_pixels_mat.cols);\par
00298         {\cf20 /* not using mat2D_fill but using memset because it is way faster, so the buffer needs to be of 1/z */}\par
00299         memset(game_state->inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * game_state->inv_z_buffer_mat.rows * game_state->inv_z_buffer_mat.cols);\par
00300     \}\par
00301     {\cf20 /*------------------------------------------------------------------------*/}\par
00302 \par
00303     render(game_state);\par
00304 \par
00305     {\cf20 /*------------------------------------------------------------------------*/}\par
00306 \par
00307     copy_mat_to_surface_RGB(game_state);\par
00308     SDL_UpdateWindowSurface(game_state->window);\par
00309 \par
00310 \}\par
00311 \par
00312 {\cf18 void} destroy_window(game_state_t *game_state)\par
00313 \{\par
00314     mat2D_free_uint32(game_state->window_pixels_mat);\par
00315 \par
00316     {\cf19 if} (!game_state->window_surface) SDL_FreeSurface(game_state->window_surface);\par
00317     {\cf19 if} (!game_state->window_texture) SDL_DestroyTexture(game_state->window_texture);\par
00318 \par
00319     SDL_DestroyRenderer(game_state->renderer);\par
00320     SDL_DestroyWindow(game_state->window);\par
00321 \par
00322     SDL_Quit();\par
00323 \par
00324     (void)game_state;\par
00325 \}\par
00326 \par
00327 {\cf18 void} fix_framerate(game_state_t *game_state)\par
00328 \{\par
00329     {\cf18 int} time_ellapsed = SDL_GetTicks() - game_state->previous_frame_time;\par
00330     {\cf18 int} time_to_wait = game_state->frame_target_time - time_ellapsed;\par
00331     {\cf19 if} (time_to_wait > 0 && time_to_wait < game_state->frame_target_time) \{\par
00332         {\cf19 if} (game_state->to_limit_fps) \{\par
00333             SDL_Delay(time_to_wait);\par
00334         \}\par
00335     \}\par
00336     game_state->delta_time = (SDL_GetTicks() - game_state->previous_frame_time) / 1000.0f;\par
00337     game_state->previous_frame_time = SDL_GetTicks();\par
00338 \}\par
00339 \par
00340 {\cf21 #ifndef SETUP}\par
00341 {\cf21 #define SETUP}\par
00342 {\cf18 void} setup(game_state_t *game_state) \{ (void)game_state; \}\par
00343 {\cf21 #endif}\par
00344 \par
00345 {\cf21 #ifndef UPDATE}\par
00346 {\cf21 #define UPDATE}\par
00347 {\cf18 void} update(game_state_t *game_state) \{ (void)game_state; \}\par
00348 {\cf21 #endif}\par
00349 \par
00350 {\cf21 #ifndef RENDER}\par
00351 {\cf21 #define RENDER}\par
00352 {\cf18 void} render(game_state_t *game_state) \{ (void)game_state; \}\par
00353 {\cf21 #endif}\par
00354 \par
00355 {\cf18 void} check_window_mat_size(game_state_t *game_state)\par
00356 \{\par
00357     {\cf19 if} (game_state->window_h != ({\cf18 int})game_state->window_pixels_mat.rows || game_state->window_w != ({\cf18 int})game_state->window_pixels_mat.cols) \{\par
00358         mat2D_free_uint32(game_state->window_pixels_mat);\par
00359         mat2D_free(game_state->inv_z_buffer_mat);\par
00360         SDL_FreeSurface(game_state->window_surface);\par
00361 \par
00362         game_state->window_pixels_mat = mat2D_alloc_uint32(game_state->window_h, game_state->window_w);\par
00363         game_state->inv_z_buffer_mat = mat2D_alloc(game_state->window_h, game_state->window_w);\par
00364 \par
00365         game_state->window_surface = SDL_GetWindowSurface(game_state->window);\par
00366     \}\par
00367 \}\par
00368 \par
00369 {\cf18 void} copy_mat_to_surface_RGB(game_state_t *game_state)\par
00370 \{\par
00371     SDL_LockSurface(game_state->window_surface);\par
00372 \par
00373     memcpy(game_state->window_surface->pixels, game_state->window_pixels_mat.elements, {\cf17 sizeof}(uint32_t) * game_state->window_pixels_mat.rows * game_state->window_pixels_mat.cols);\par
00374 \par
00375     SDL_UnlockSurface(game_state->window_surface);\par
00376 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
example1.c File Reference\par \pard\plain 
{\tc\tcl2 \v example1.c}
{\xe \v example1.c}
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "./Almog_Draw_Library.h"}\par
{\f2 #include "./display.c"}\par
{\f2 #include "./Matrix2D.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for example1.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "example1_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SETUP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UPDATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RENDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_IMPLEMENTATION}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Figure} {\b figure1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Figure} {\b figure2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve} {\b points}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve} {\b points1}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ALMOG_DRAW_LIBRARY_IMPLEMENTATION\:example1.c}
{\xe \v example1.c\:ALMOG_DRAW_LIBRARY_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 4} of file {\b example1.c}.}\par
}
{\xe \v MATRIX2D_IMPLEMENTATION\:example1.c}
{\xe \v example1.c\:MATRIX2D_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b example1.c}.}\par
}
{\xe \v RENDER\:example1.c}
{\xe \v example1.c\:RENDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RENDER}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b example1.c}.}\par
}
{\xe \v SETUP\:example1.c}
{\xe \v example1.c\:SETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SETUP}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1} of file {\b example1.c}.}\par
}
{\xe \v UPDATE\:example1.c}
{\xe \v example1.c\:UPDATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UPDATE}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2} of file {\b example1.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v render\:example1.c}
{\xe \v example1.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b example1.c}.}\par
{
\ql
References {\b adl_character_draw()}, {\b adl_curves_plot_on_figure()}, {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_figure_copy_to_screen()}, {\b figure1}, {\b figure2}, and {\b game_state_t::window_pixels_mat}.}\par
}
{\xe \v setup\:example1.c}
{\xe \v example1.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 15} of file {\b example1.c}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b adl_curve_add_to_figure()}, {\b adl_figure_alloc()}, {\b Figure::background_color}, {\b game_state_t::const_fps}, {\b Curve::elements}, {\b figure1}, {\b figure2}, {\b Curve::length}, {\b points}, {\b points1}, {\b Figure::to_draw_axis}, and {\b Figure::to_draw_max_min_values}.}\par
}
{\xe \v update\:example1.c}
{\xe \v example1.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 60} of file {\b example1.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v figure1\:example1.c}
{\xe \v example1.c\:figure1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Figure} figure1}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b example1.c}.}\par
{
\ql
Referenced by {\b render()}, and {\b setup()}.}\par
}
{\xe \v figure2\:example1.c}
{\xe \v example1.c\:figure2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Figure} figure2}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b example1.c}.}\par
{
\ql
Referenced by {\b render()}, and {\b setup()}.}\par
}
{\xe \v points\:example1.c}
{\xe \v example1.c\:points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve} points}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b example1.c}.}\par
{
\ql
Referenced by {\b adl_lines_draw()}, {\b adl_lines_loop_draw()}, and {\b setup()}.}\par
}
{\xe \v points1\:example1.c}
{\xe \v example1.c\:points1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve} points1}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b example1.c}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
example1.c\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #define SETUP}\par
00002 {\cf21 #define UPDATE}\par
00003 {\cf21 #define RENDER}\par
00004 {\cf21 #define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00005 {\cf21 #include "./Almog_Draw_Library.h"}\par
00006 {\cf21 #include "./display.c"}\par
00007 {\cf21 #define MATRIX2D_IMPLEMENTATION}\par
00008 {\cf21 #include "./Matrix2D.h"}\par
00009 \par
00010 \par
00011 Figure figure1;\par
00012 Figure figure2;\par
00013 Curve points;\par
00014 Curve points1;\par
00015 {\cf18 void} setup(game_state_t *game_state)\par
00016 \{\par
00017     game_state->const_fps = 30;\par
00018     {\cf20 // game_state->to_limit_fps = 0;}\par
00019 \par
00020     figure1 = adl_figure_alloc(100, 70, (Point)\{100, 100, 0, 0\});\par
00021     figure2 = adl_figure_alloc(600, 500, (Point)\{190, 100, 0, 0\});\par
00022 \par
00023     ada_init_array(Point, points);\par
00024     ada_init_array(Point, points1);\par
00025     Point temp_point = (Point)\{1,1,0,0\};\par
00026     ada_appand(Point, points, temp_point);\par
00027     ada_appand(Point, points1, temp_point);\par
00028     temp_point = (Point)\{2,2,0,0\};\par
00029     ada_appand(Point, points, temp_point);\par
00030     ada_appand(Point, points1, temp_point);\par
00031     temp_point = (Point)\{3,1,0,0\};\par
00032     ada_appand(Point, points, temp_point);\par
00033     ada_appand(Point, points1, temp_point);\par
00034     temp_point = (Point)\{4,10,0,0\};\par
00035     ada_appand(Point, points, temp_point);\par
00036     temp_point = (Point)\{5,-10,0,0\};\par
00037     ada_appand(Point, points, temp_point);\par
00038     temp_point = (Point)\{3,-20,0,0\};\par
00039     ada_appand(Point, points, temp_point);\par
00040 \par
00041     temp_point = (Point)\{3.5,-10,0,0\};\par
00042     ada_appand(Point, points1, temp_point);\par
00043 \par
00044     figure1.background_color = 0xFFFFFFFF;\par
00045     figure1.to_draw_axis = {\cf17 true};\par
00046     figure1.to_draw_max_min_values = {\cf17 true};\par
00047 \par
00048     figure2.background_color = 0xFFFFFFFF;\par
00049     figure2.to_draw_axis = {\cf17 true};\par
00050     figure2.to_draw_max_min_values = {\cf17 true};\par
00051 \par
00052     adl_curve_add_to_figure(&figure1, points.elements, points.length, 0xFFFF0000);\par
00053     adl_curve_add_to_figure(&figure2, points.elements, points.length, 0xFFFF0000);\par
00054        \par
00055     adl_curve_add_to_figure(&figure1, points1.elements, points1.length, 0xFF0000FF);\par
00056     adl_curve_add_to_figure(&figure2, points1.elements, points1.length, 0xFF0000FF);\par
00057 \par
00058 \}\par
00059 \par
00060 {\cf18 void} update(game_state_t *game_state)\par
00061 \{\par
00062 \}\par
00063 \par
00064 {\cf18 void} render(game_state_t *game_state)\par
00065 \{\par
00066     adl_curves_plot_on_figure(figure1);\par
00067     adl_curves_plot_on_figure(figure2);\par
00068 \par
00069     adl_figure_copy_to_screen(game_state->window_pixels_mat, figure1);\par
00070     adl_figure_copy_to_screen(game_state->window_pixels_mat, figure2);\par
00071 \par
00072 \par
00073     adl_character_draw(game_state->window_pixels_mat, {\cf23 'A'}, 50, 100, 700 , 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00074     adl_character_draw(game_state->window_pixels_mat, {\cf23 'B'}, 50, 100, 755 , 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00075     adl_character_draw(game_state->window_pixels_mat, {\cf23 'C'}, 50, 100, 810 , 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00076     adl_character_draw(game_state->window_pixels_mat, {\cf23 'D'}, 50, 100, 865 , 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00077     adl_character_draw(game_state->window_pixels_mat, {\cf23 'E'}, 50, 100, 920 , 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00078     adl_character_draw(game_state->window_pixels_mat, {\cf23 'F'}, 50, 100, 975 , 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00079     adl_character_draw(game_state->window_pixels_mat, {\cf23 'G'}, 50, 100, 1030, 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00080     adl_character_draw(game_state->window_pixels_mat, {\cf23 'H'}, 50, 100, 1085, 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00081     adl_character_draw(game_state->window_pixels_mat, {\cf23 'I'}, 50, 100, 1140, 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00082     adl_character_draw(game_state->window_pixels_mat, {\cf23 'J'}, 50, 100, 1195, 200, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00083     adl_character_draw(game_state->window_pixels_mat, {\cf23 'K'}, 50, 100, 700 , 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00084     adl_character_draw(game_state->window_pixels_mat, {\cf23 'L'}, 50, 100, 755 , 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00085     adl_character_draw(game_state->window_pixels_mat, {\cf23 'M'}, 50, 100, 810 , 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00086     adl_character_draw(game_state->window_pixels_mat, {\cf23 'N'}, 50, 100, 865 , 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00087     adl_character_draw(game_state->window_pixels_mat, {\cf23 'O'}, 50, 100, 920 , 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00088     adl_character_draw(game_state->window_pixels_mat, {\cf23 'P'}, 50, 100, 975 , 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00089     adl_character_draw(game_state->window_pixels_mat, {\cf23 'Q'}, 50, 100, 1030, 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00090     adl_character_draw(game_state->window_pixels_mat, {\cf23 'R'}, 50, 100, 1085, 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00091     adl_character_draw(game_state->window_pixels_mat, {\cf23 'S'}, 50, 100, 1140, 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00092     adl_character_draw(game_state->window_pixels_mat, {\cf23 'T'}, 50, 100, 1195, 305, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00093     adl_character_draw(game_state->window_pixels_mat, {\cf23 'U'}, 50, 100, 700 , 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00094     adl_character_draw(game_state->window_pixels_mat, {\cf23 'V'}, 50, 100, 755 , 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00095     adl_character_draw(game_state->window_pixels_mat, {\cf23 'W'}, 50, 100, 810 , 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00096     adl_character_draw(game_state->window_pixels_mat, {\cf23 'X'}, 50, 100, 865 , 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00097     adl_character_draw(game_state->window_pixels_mat, {\cf23 'Y'}, 50, 100, 920 , 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00098     adl_character_draw(game_state->window_pixels_mat, {\cf23 'Z'}, 50, 100, 975 , 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00099     adl_character_draw(game_state->window_pixels_mat, {\cf23 '.'}, 50, 100, 1030, 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00100     adl_character_draw(game_state->window_pixels_mat, {\cf23 ':'}, 50, 100, 1085, 410, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00101     adl_character_draw(game_state->window_pixels_mat, {\cf23 '0'}, 50, 100, 700 , 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00102     adl_character_draw(game_state->window_pixels_mat, {\cf23 '1'}, 50, 100, 755 , 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00103     adl_character_draw(game_state->window_pixels_mat, {\cf23 '2'}, 50, 100, 810 , 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00104     adl_character_draw(game_state->window_pixels_mat, {\cf23 '3'}, 50, 100, 865 , 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00105     adl_character_draw(game_state->window_pixels_mat, {\cf23 '4'}, 50, 100, 920 , 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00106     adl_character_draw(game_state->window_pixels_mat, {\cf23 '5'}, 50, 100, 975 , 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00107     adl_character_draw(game_state->window_pixels_mat, {\cf23 '6'}, 50, 100, 1030, 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00108     adl_character_draw(game_state->window_pixels_mat, {\cf23 '7'}, 50, 100, 1085, 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00109     adl_character_draw(game_state->window_pixels_mat, {\cf23 '8'}, 50, 100, 1140, 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00110     adl_character_draw(game_state->window_pixels_mat, {\cf23 '9'}, 50, 100, 1195, 515, 0xFFFFFFFF, ADL_DEFAULT_OFFSET_ZOOM);\par
00111 \par
00112 \}\par
00113 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matrix2D.h File Reference\par \pard\plain 
{\tc\tcl2 \v Matrix2D.h}
{\xe \v Matrix2D.h}
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A single-header C library for simple 2D matrix operations on doubles and uint32_t, including allocation, basic arithmetic, linear algebra, and helpers (LUP, inverse, determinant, DCM, etc.). }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stddef.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <stdbool.h>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <math.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Matrix2D.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matrix2D_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matrix2D_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Mat2D}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Mat2D_uint32}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Mat2D_Minor}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_MALLOC}\~ malloc\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by the library. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_ASSERT}\~ assert\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by the library for parameter validation. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_AT}(m,  i,  j)\~ (m).elements[i * m.stride_r + j]\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D} (0-based). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_AT_UINT32}(m,  i,  j)\~ (m).elements[i * m.stride_r + j]\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_uint32} (0-based). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b __USE_MISC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b PI}\~ M_PI\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_MINOR_AT}(mm,  i,  j)\~ {\b MAT2D_AT}(mm.ref_mat, mm.rows_list[i], mm.cols_list[j])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_Minor} (0-based), dereferencing into the underlying reference matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_PRINT}(m)\~ {\b mat2D_print}(m, #m, 0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix with its variable name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_PRINT_AS_COL}(m)\~ {\b mat2D_print_as_col}(m, #m, 0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix as a single column with its name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_MINOR_PRINT}(mm)\~ {\b mat2D_minor_print}(mm, #mm, 0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a minor with its variable name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b mat2D_normalize}(m)\~ {\b mat2D_mult}((m), 1.0 / {\b mat2D_calc_norma}((m)))\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place normalization of all elements so that the Frobenius norm becomes 1. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_rand_double} (void)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pseudo-random double in the range [0, 1]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b mat2D_alloc} (size_t rows, size_t cols)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of doubles. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_uint32} {\b mat2D_alloc_uint32} (size_t rows, size_t cols)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of uint32_t. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_free} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D} (elements pointer). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_free_uint32} ({\b Mat2D_uint32} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D_uint32} (elements pointer). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b mat2D_offset2d} ({\b Mat2D} m, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b mat2D_offset2d_uint32} ({\b Mat2D_uint32} m, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D_uint32}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_fill} ({\b Mat2D} m, double x)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of doubles with a scalar value. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_fill_sequence} ({\b Mat2D} m, double start, double step)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with an arithmetic sequence laid out in row-major order. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_fill_uint32} ({\b Mat2D_uint32} m, uint32_t x)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of uint32_t with a scalar value. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_rand} ({\b Mat2D} m, double low, double high)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with random doubles in [low, high). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_dot} ({\b Mat2D} dst, {\b Mat2D} a, {\b Mat2D} b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Matrix product: dst = a * b. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_dot_product} ({\b Mat2D} a, {\b Mat2D} b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dot product between two vectors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_cross} ({\b Mat2D} dst, {\b Mat2D} a, {\b Mat2D} b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
3D cross product: dst = a x b for 3x1 vectors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add} ({\b Mat2D} dst, {\b Mat2D} a)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place addition: dst += a. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add_row_time_factor_to_row} ({\b Mat2D} m, size_t des_r, size_t src_r, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) += factor * row(src_r). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub} ({\b Mat2D} dst, {\b Mat2D} a)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place subtraction: dst -= a. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub_row_time_factor_to_row} ({\b Mat2D} m, size_t des_r, size_t src_r, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) -= factor * row(src_r). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_mult} ({\b Mat2D} m, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place scalar multiplication: m *= factor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_mult_row} ({\b Mat2D} m, size_t r, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place row scaling: row(r) *= factor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_print} ({\b Mat2D} m, const char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix to stdout with a name and indentation padding. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_print_as_col} ({\b Mat2D} m, const char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix as a flattened column vector to stdout. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_identity} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a square matrix to the identity matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_make_identity} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reduce a matrix to identity via Gauss-Jordan elimination and return the cumulative scaling factor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_rot_mat_x} ({\b Mat2D} m, float angle_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the X-axis. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_rot_mat_y} ({\b Mat2D} m, float angle_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Y-axis. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_rot_mat_z} ({\b Mat2D} m, float angle_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Z-axis. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_DCM_zyx} ({\b Mat2D} DCM, float yaw_deg, float pitch_deg, float roll_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a 3x3 direction cosine matrix (DCM) from Z-Y-X Euler angles. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_copy} ({\b Mat2D} des, {\b Mat2D} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy all elements from src to des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_copy_mat_to_mat_at_window} ({\b Mat2D} des, {\b Mat2D} src, size_t is, size_t js, size_t ie, size_t je)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a rectangular window from src into des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_get_col} ({\b Mat2D} des, size_t des_col, {\b Mat2D} src, size_t src_col)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a column from src into a column of des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add_col_to_col} ({\b Mat2D} des, size_t des_col, {\b Mat2D} src, size_t src_col)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source column into a destination column: des[:, des_col] += src[:, src_col]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub_col_to_col} ({\b Mat2D} des, size_t des_col, {\b Mat2D} src, size_t src_col)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source column from a destination column: des[:, des_col] -= src[:, src_col]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_swap_rows} ({\b Mat2D} m, size_t r1, size_t r2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swap two rows of a matrix in-place. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_get_row} ({\b Mat2D} des, size_t des_row, {\b Mat2D} src, size_t src_row)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a row from src into a row of des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add_row_to_row} ({\b Mat2D} des, size_t des_row, {\b Mat2D} src, size_t src_row)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source row into a destination row: des[des_row, :] += src[src_row, :]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub_row_to_row} ({\b Mat2D} des, size_t des_row, {\b Mat2D} src, size_t src_row)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source row from a destination row: des[des_row, :] -= src[src_row, :]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_calc_norma} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the Frobenius norm of a matrix, sqrt(sum(m_ij^2)). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mat2D_mat_is_all_digit} ({\b Mat2D} m, double digit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a matrix equal a given digit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mat2D_row_is_all_digit} ({\b Mat2D} m, double digit, size_t r)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a row equal a given digit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mat2D_col_is_all_digit} ({\b Mat2D} m, double digit, size_t c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a column equal a given digit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_det_2x2_mat} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_triangulate} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Forward elimination to transform a matrix to upper triangular form. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_det} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of an NxN matrix via Gaussian elimination. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_LUP_decomposition_with_swap} ({\b Mat2D} src, {\b Mat2D} l, {\b Mat2D} p, {\b Mat2D} u)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute LUP decomposition: P*A = L*U with L unit diagonal. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_transpose} ({\b Mat2D} des, {\b Mat2D} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transpose a matrix: des = src^T. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_invert} ({\b Mat2D} des, {\b Mat2D} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Invert a square matrix using Gauss-Jordan elimination. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_solve_linear_sys_LUP_decomposition} ({\b Mat2D} A, {\b Mat2D} x, {\b Mat2D} B)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solve the linear system A x = B using LUP decomposition. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_Minor} {\b mat2D_minor_alloc_fill_from_mat} ({\b Mat2D} ref_mat, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a minor view by excluding row i and column j of ref_mat. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_Minor} {\b mat2D_minor_alloc_fill_from_mat_minor} ({\b Mat2D_Minor} ref_mm, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a nested minor view from an existing minor by excluding row i and column j of the minor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_minor_free} ({\b Mat2D_Minor} mm)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the index arrays owned by a minor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_minor_print} ({\b Mat2D_Minor} mm, const char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a minor matrix to stdout with a name and indentation padding. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_det_2x2_mat_minor} ({\b Mat2D_Minor} mm)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 minor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_minor_det} ({\b Mat2D_Minor} mm)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a minor via recursive expansion by minors. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A single-header C library for simple 2D matrix operations on doubles and uint32_t, including allocation, basic arithmetic, linear algebra, and helpers (LUP, inverse, determinant, DCM, etc.). \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Storage is contiguous row-major (C-style). The element at row i, column j (0-based) is located at {\f2 elements[i * stride_r + j]} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Dense matrices of {\f2 double}  are represented by {\b Mat2D}, and dense matrices of {\f2 uint32_t}  are represented by {\b Mat2D_uint32}.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some routines assert shape compatibility using MATRIX2D_ASSERT.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Random number generation uses the C library {\f2 rand()} ; it is not cryptographically secure.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Inversion is done via Gauss-Jordan elimination with partial pivoting only when a pivot is zero; this can be numerically unstable for ill-conditioned matrices. See notes below.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To compile the implementation, define MATRIX2D_IMPLEMENTATION in exactly one translation unit before including this header.\par}
\par
Example: #define MATRIX2D_IMPLEMENTATION #include "matrix2d.h"\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This one-file library is heavily inspired by Tsoding's nn.h implementation of matrix creation and operations: {\f2 https://github.com/tsoding/nn.h} and the video: {\f2 https://youtu.be/L1TbWe8bVOc?list=PLpM-Dvs8t0VZPZKggcql-MmjaBdZKeDMw}\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Numerical stability:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is a set of functions for minors that can be used to compute the determinant, but that approach is factorial in complexity and too slow for larger matrices. This library uses Gaussian elimination instead.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inversion function can fail or be unstable if pivot values become very small. Consider preconditioning or using a more robust decomposition (e.g., full pivoting, SVD) for ill-conditioned problems. \par}
}}}{
Definition in file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v __USE_MISC\:Matrix2D.h}
{\xe \v Matrix2D.h\:__USE_MISC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define __USE_MISC}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 151} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_AT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_AT( m,  i,  j)\~ (m).elements[i * m.stride_r + j]}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D} (0-based). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This macro does not perform bounds checking in the fast configuration. Use carefully. \par
}}}{
Definition at line {\b 145} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_AT_UINT32\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_AT_UINT32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_AT_UINT32( m,  i,  j)\~ (m).elements[i * m.stride_r + j]}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_uint32} (0-based). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This macro does not perform bounds checking in the fast configuration. Use carefully. \par
}}}{
Definition at line {\b 146} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_MINOR_AT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_MINOR_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_MINOR_AT( mm,  i,  j)\~ {\b MAT2D_AT}(mm.ref_mat, mm.rows_list[i], mm.cols_list[j])}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_Minor} (0-based), dereferencing into the underlying reference matrix. }}\par
{
Definition at line {\b 162} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_MINOR_PRINT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_MINOR_PRINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_MINOR_PRINT( mm)\~ {\b mat2D_minor_print}(mm, #mm, 0)}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a minor with its variable name. }}\par
{
Definition at line {\b 177} of file {\b Matrix2D.h}.}\par
}
{\xe \v mat2D_normalize\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_normalize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define mat2D_normalize( m)\~ {\b mat2D_mult}((m), 1.0 / {\b mat2D_calc_norma}((m)))}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place normalization of all elements so that the Frobenius norm becomes 1. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Equivalent to: m *= 1.0 / mat2D_calc_norma(m). \par
}{
Definition at line {\b 184} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_PRINT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_PRINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_PRINT( m)\~ {\b mat2D_print}(m, #m, 0)}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix with its variable name. }}\par
{
Definition at line {\b 167} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_PRINT_AS_COL\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_PRINT_AS_COL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_PRINT_AS_COL( m)\~ {\b mat2D_print_as_col}(m, #m, 0)}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix as a single column with its name. }}\par
{
Definition at line {\b 172} of file {\b Matrix2D.h}.}\par
}
{\xe \v MATRIX2D_ASSERT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MATRIX2D_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by the library for parameter validation. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defaults to C {\f2 assert} . Override by defining MATRIX2D_ASSERT before including this header if you want custom behavior. \par
}{
Definition at line {\b 68} of file {\b Matrix2D.h}.}\par
}
{\xe \v MATRIX2D_MALLOC\:Matrix2D.h}
{\xe \v Matrix2D.h\:MATRIX2D_MALLOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_MALLOC\~ malloc}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by the library. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defaults to {\f2 malloc} . Override by defining MATRIX2D_MALLOC before including this header if you want to use a custom allocator. \par
}{
Definition at line {\b 56} of file {\b Matrix2D.h}.}\par
}
{\xe \v PI\:Matrix2D.h}
{\xe \v Matrix2D.h\:PI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define PI\~ M_PI}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 154} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v mat2D_add\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a})}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place addition: dst += a. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination matrix to be incremented. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Summand of same shape as dst. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Shapes match. \par
}}}{
Definition at line {\b 496} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}.}\par
}
{\xe \v mat2D_add_col_to_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add_col_to_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add_col_to_col ({\b Mat2D}  {\i des}, size_t  {\i des_col}, {\b Mat2D}  {\i src}, size_t  {\i src_col})}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source column into a destination column: des[:, des_col] += src[:, src_col]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same row count as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_col} \cell }{Column index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_col} \cell }{Column index in source. \cell }
{\row }
}
}{
Definition at line {\b 828} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_add_row_time_factor_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add_row_time_factor_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add_row_time_factor_to_row ({\b Mat2D}  {\i m}, size_t  {\i des_r}, size_t  {\i src_r}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) += factor * row(src_r). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_r} \cell }{Destination row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_r} \cell }{Source row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 514} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
}
{\xe \v mat2D_add_row_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add_row_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add_row_to_row ({\b Mat2D}  {\i des}, size_t  {\i des_row}, {\b Mat2D}  {\i src}, size_t  {\i src_row})}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source row into a destination row: des[des_row, :] += src[src_row, :]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same number of columns as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_row} \cell }{Row index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_row} \cell }{Row index in source. \cell }
{\row }
}
}{
Definition at line {\b 897} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_alloc\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_alloc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} mat2D_alloc (size_t  {\i rows}, size_t  {\i cols})}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of doubles. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{Number of rows (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cols} \cell }{Number of columns (>= 1). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b Mat2D} with contiguous storage; must be freed with mat2D_free. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
m.stride_r == cols. \par
}}}{
Definition at line {\b 278} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D::elements}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D::rows}, and {\b Mat2D::stride_r}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b adl_figure_alloc()}, {\b check_window_mat_size()}, {\b mat2D_det()}, {\b mat2D_invert()}, {\b mat2D_set_DCM_zyx()}, {\b mat2D_solve_linear_sys_LUP_decomposition()}, and {\b setup_window()}.}\par
}
{\xe \v mat2D_alloc_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_alloc_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_uint32} mat2D_alloc_uint32 (size_t  {\i rows}, size_t  {\i cols})}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of uint32_t. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{Number of rows (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cols} \cell }{Number of columns (>= 1). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b Mat2D_uint32} with contiguous storage; free with mat2D_free_uint32. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
m.stride_r == cols. \par
}}}{
Definition at line {\b 297} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b Mat2D_uint32::elements}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D_uint32::rows}, and {\b Mat2D_uint32::stride_r}.}\par
{
\ql
Referenced by {\b adl_figure_alloc()}, {\b check_window_mat_size()}, and {\b setup_window()}.}\par
}
{\xe \v mat2D_calc_norma\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_calc_norma}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_calc_norma ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the Frobenius norm of a matrix, sqrt(sum(m_ij^2)). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Frobenius norm. \par
}}}{
Definition at line {\b 931} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_col_is_all_digit\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_col_is_all_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mat2D_col_is_all_digit ({\b Mat2D}  {\i m}, double  {\i digit}, size_t  {\i c})}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a column equal a given digit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i digit} \cell }{Value to compare. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{Column index. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if every element equals digit, false otherwise. \par
}}}{
Definition at line {\b 985} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_det()}.}\par
}
{\xe \v mat2D_copy\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_copy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_copy ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src})}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy all elements from src to des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Shapes match. \par
}}}{
Definition at line {\b 768} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b mat2D_det()}, {\b mat2D_invert()}, and {\b mat2D_LUP_decomposition_with_swap()}.}\par
}
{\xe \v mat2D_copy_mat_to_mat_at_window\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_copy_mat_to_mat_at_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_copy_mat_to_mat_at_window ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src}, size_t  {\i is}, size_t  {\i js}, size_t  {\i ie}, size_t  {\i je})}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a rectangular window from src into des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix. Must have size (ie - is + 1) x (je - js + 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i is} \cell }{Start row index in src (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i js} \cell }{Start column index in src (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ie} \cell }{End row index in src (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i je} \cell }{End column index in src (inclusive). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= is <= ie < src.rows, 0 <= js <= je < src.cols. \par
}}}{
Definition at line {\b 790} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_cross\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_cross}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_cross ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a}, {\b Mat2D}  {\i b})}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
3D cross product: dst = a x b for 3x1 vectors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{3x1 destination vector. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{3x1 input vector. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{3x1 input vector. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
All matrices have shape 3x1. \par
}}}{
Definition at line {\b 479} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_det\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_det}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_det ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of an NxN matrix via Gaussian elimination. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Square matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(m).\par
}}Copies m internally, triangulates it, and returns the product of diagonal elements (adjusted by any scaling factor as implemented). \par
}{
Definition at line {\b 1052} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_col_is_all_digit()}, {\b mat2D_copy()}, {\b mat2D_free()}, {\b mat2D_row_is_all_digit()}, {\b mat2D_triangulate()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_invert()}.}\par
}
{\xe \v mat2D_det_2x2_mat\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_det_2x2_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_det_2x2_mat ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 matrix. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix (must be 2x2). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(m) = a11 a22 - a12 a21. \par
}}}{
Definition at line {\b 1000} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_det_2x2_mat_minor\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_det_2x2_mat_minor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_det_2x2_mat_minor ({\b Mat2D_Minor}  {\i mm})}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 minor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Minor (must be 2x2). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(mm). \par
}}}{
Definition at line {\b 1383} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b MAT2D_MINOR_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D_Minor::rows}.}\par
{
\ql
Referenced by {\b mat2D_minor_det()}.}\par
}
{\xe \v mat2D_dot\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_dot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_dot ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a}, {\b Mat2D}  {\i b})}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Matrix product: dst = a * b. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination matrix (size a.rows x b.cols). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Left matrix (size a.rows x a.cols). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{Right matrix (size a.cols x b.cols). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a.cols == b.rows, dst.rows == a.rows, dst.cols == b.cols. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
dst is overwritten. \par
}}}{
Definition at line {\b 424} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b mat2D_set_DCM_zyx()}, and {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_dot_product\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_dot_product}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_dot_product ({\b Mat2D}  {\i a}, {\b Mat2D}  {\i b})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dot product between two vectors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Vector (shape n x 1 or 1 x n). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{Vector (same shape as a). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The scalar dot product sum. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a.rows == b.rows, a.cols == b.cols, and one dimension equals 1. \par
}}}{
Definition at line {\b 450} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_fill\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_fill ({\b Mat2D}  {\i m}, double  {\i x})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of doubles with a scalar value. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Value to assign to every element. \cell }
{\row }
}
}{
Definition at line {\b 362} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, and {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_fill_sequence\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_fill_sequence}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_fill_sequence ({\b Mat2D}  {\i m}, double  {\i start}, double  {\i step})}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with an arithmetic sequence laid out in row-major order. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start} \cell }{First value in the sequence. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i step} \cell }{Increment between consecutive elements.\cell }
{\row }
}
Element at linear index k gets value start + step * k. \par
}{
Definition at line {\b 378} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_offset2d()}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_fill_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_fill_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_fill_uint32 ({\b Mat2D_uint32}  {\i m}, uint32_t  {\i x})}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of uint32_t with a scalar value. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Value to assign to every element. \cell }
{\row }
}
}{
Definition at line {\b 391} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b MAT2D_AT_UINT32}, and {\b Mat2D_uint32::rows}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v mat2D_free\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_free ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D} (elements pointer). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix whose elements were allocated via MATRIX2D_MALLOC. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Safe to call with m.elements == NULL. \par
}}}{
Definition at line {\b 314} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::elements}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b check_window_mat_size()}, {\b mat2D_det()}, {\b mat2D_invert()}, {\b mat2D_set_DCM_zyx()}, and {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_free_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_free_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_free_uint32 ({\b Mat2D_uint32}  {\i m})}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D_uint32} (elements pointer). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix whose elements were allocated via MATRIX2D_MALLOC. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Safe to call with m.elements == NULL. \par
}}}{
Definition at line {\b 324} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::elements}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, and {\b destroy_window()}.}\par
}
{\xe \v mat2D_get_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_get_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_get_col ({\b Mat2D}  {\i des}, size_t  {\i des_col}, {\b Mat2D}  {\i src}, size_t  {\i src_col})}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a column from src into a column of des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same row count as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_col} \cell }{Column index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_col} \cell }{Column index in source. \cell }
{\row }
}
}{
Definition at line {\b 810} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_get_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_get_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_get_row ({\b Mat2D}  {\i des}, size_t  {\i des_row}, {\b Mat2D}  {\i src}, size_t  {\i src_row})}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a row from src into a row of des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same number of columns as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_row} \cell }{Row index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_row} \cell }{Row index in source. \cell }
{\row }
}
}{
Definition at line {\b 879} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_invert\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_invert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_invert ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src})}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Invert a square matrix using Gauss-Jordan elimination. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same shape as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source square matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
src is square and nonsingular.\par
}}If det(src) == 0, prints an error and sets des to all zeros. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
May be numerically unstable for ill-conditioned matrices. \par
}}}{
Definition at line {\b 1169} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_det()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_mult_row()}, {\b mat2D_set_identity()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_LUP_decomposition_with_swap\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_LUP_decomposition_with_swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_LUP_decomposition_with_swap ({\b Mat2D}  {\i src}, {\b Mat2D}  {\i l}, {\b Mat2D}  {\i p}, {\b Mat2D}  {\i u})}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute LUP decomposition: P*A = L*U with L unit diagonal. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input matrix A (not modified). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i l} \cell }{Lower triangular matrix with unit diagonal (output). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Permutation matrix (output). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u} \cell }{Upper triangular matrix (output). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
l, p, u are allocated to match src shape; src is square. \par
}}}{
Definition at line {\b 1107} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_fill()}, {\b mat2D_set_identity()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_make_identity\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_make_identity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_make_identity ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reduce a matrix to identity via Gauss-Jordan elimination and return the cumulative scaling factor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix reduced in-place to identity (if nonsingular). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The product of row scaling factors applied during elimination. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Intended as a helper for determinant-related operations. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Not robust to singular or ill-conditioned matrices. \par
}}}{
Definition at line {\b 643} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_mult_row()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_mat_is_all_digit\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_mat_is_all_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mat2D_mat_is_all_digit ({\b Mat2D}  {\i m}, double  {\i digit})}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a matrix equal a given digit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i digit} \cell }{Value to compare. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if every element equals digit, false otherwise. \par
}}}{
Definition at line {\b 949} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_minor_alloc_fill_from_mat\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_alloc_fill_from_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_Minor} mat2D_minor_alloc_fill_from_mat ({\b Mat2D}  {\i ref_mat}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a minor view by excluding row i and column j of ref_mat. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ref_mat} \cell }{Reference square matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Excluded row index in ref_mat. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Excluded column index in ref_mat. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b Mat2D_Minor} that references ref_mat. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Free rows_list and cols_list with mat2D_minor_free when done. \par
}}}{
Definition at line {\b 1279} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D_Minor::cols}, {\b Mat2D_Minor::cols_list}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D_Minor::ref_mat}, {\b Mat2D::rows}, {\b Mat2D_Minor::rows}, {\b Mat2D_Minor::rows_list}, and {\b Mat2D_Minor::stride_r}.}\par
}
{\xe \v mat2D_minor_alloc_fill_from_mat_minor\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_alloc_fill_from_mat_minor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_Minor} mat2D_minor_alloc_fill_from_mat_minor ({\b Mat2D_Minor}  {\i ref_mm}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a nested minor view from an existing minor by excluding row i and column j of the minor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ref_mm} \cell }{Reference minor. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Excluded row index in the minor. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Excluded column index in the minor. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A new {\b Mat2D_Minor} that references the same underlying matrix. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Free rows_list and cols_list with mat2D_minor_free when done. \par
}}}{
Definition at line {\b 1318} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b Mat2D_Minor::cols_list}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D_Minor::ref_mat}, {\b Mat2D_Minor::rows}, {\b Mat2D_Minor::rows_list}, and {\b Mat2D_Minor::stride_r}.}\par
{
\ql
Referenced by {\b mat2D_minor_det()}.}\par
}
{\xe \v mat2D_minor_det\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_det}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_minor_det ({\b Mat2D_Minor}  {\i mm})}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a minor via recursive expansion by minors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Square minor. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(mm). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Exponential complexity (factorial). Intended for educational or very small matrices only. \par
}}}{
Definition at line {\b 1396} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b mat2D_det_2x2_mat_minor()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, {\b MAT2D_MINOR_AT}, {\b mat2D_minor_free()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D_Minor::rows}.}\par
}
{\xe \v mat2D_minor_free\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_minor_free ({\b Mat2D_Minor}  {\i mm})}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the index arrays owned by a minor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Minor to free. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
After this call, mm.rows_list and mm.cols_list are invalid. \par
}}}{
Definition at line {\b 1353} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols_list}, and {\b Mat2D_Minor::rows_list}.}\par
{
\ql
Referenced by {\b mat2D_minor_det()}.}\par
}
{\xe \v mat2D_minor_print\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_minor_print ({\b Mat2D_Minor}  {\i mm}, const char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a minor matrix to stdout with a name and indentation padding. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Minor to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Left padding in spaces. \cell }
{\row }
}
}{
Definition at line {\b 1365} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b MAT2D_MINOR_AT}, and {\b Mat2D_Minor::rows}.}\par
}
{\xe \v mat2D_mult\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_mult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_mult ({\b Mat2D}  {\i m}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place scalar multiplication: m *= factor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 557} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_mult_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_mult_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_mult_row ({\b Mat2D}  {\i m}, size_t  {\i r}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place row scaling: row(r) *= factor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 572} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, and {\b mat2D_make_identity()}.}\par
}
{\xe \v mat2D_offset2d\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_offset2d}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t mat2D_offset2d ({\b Mat2D}  {\i m}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Row index (0-based). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Column index (0-based). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The linear offset i * stride_r + j. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= i < rows, 0 <= j < cols (asserted). \par
}}}{
Definition at line {\b 337} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MATRIX2D_ASSERT}, {\b Mat2D::rows}, and {\b Mat2D::stride_r}.}\par
{
\ql
Referenced by {\b mat2D_fill_sequence()}.}\par
}
{\xe \v mat2D_offset2d_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_offset2d_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t mat2D_offset2d_uint32 ({\b Mat2D_uint32}  {\i m}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D_uint32}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Row index (0-based). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Column index (0-based). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The linear offset i * stride_r + j. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= i < rows, 0 <= j < cols (asserted). \par
}}}{
Definition at line {\b 351} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b MATRIX2D_ASSERT}, {\b Mat2D_uint32::rows}, and {\b Mat2D_uint32::stride_r}.}\par
}
{\xe \v mat2D_print\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_print ({\b Mat2D}  {\i m}, const char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix to stdout with a name and indentation padding. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Left padding in spaces. \cell }
{\row }
}
}{
Definition at line {\b 585} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_print_as_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_print_as_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_print_as_col ({\b Mat2D}  {\i m}, const char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix as a flattened column vector to stdout. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to print (flattened in row-major). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Left padding in spaces. \cell }
{\row }
}
}{
Definition at line {\b 604} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D::elements}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_rand\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_rand}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_rand ({\b Mat2D}  {\i m}, double  {\i low}, double  {\i high})}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with random doubles in [low, high). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i low} \cell }{Lower bound (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i high} \cell }{Upper bound (exclusive). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
high > low. \par
}}}{
Definition at line {\b 407} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_rand_double()}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_rand_double\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_rand_double}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_rand_double (void )}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pseudo-random double in the range [0, 1]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Uses C library rand() and RAND_MAX. Not cryptographically secure. \par
}}}{
Definition at line {\b 266} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_rand()}.}\par
}
{\xe \v mat2D_row_is_all_digit\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_row_is_all_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mat2D_row_is_all_digit ({\b Mat2D}  {\i m}, double  {\i digit}, size_t  {\i r})}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a row equal a given digit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i digit} \cell }{Value to compare. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Row index. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if every element equals digit, false otherwise. \par
}}}{
Definition at line {\b 968} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_det()}.}\par
}
{\xe \v mat2D_set_DCM_zyx\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_DCM_zyx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_DCM_zyx ({\b Mat2D}  {\i DCM}, float  {\i yaw_deg}, float  {\i pitch_deg}, float  {\i roll_deg})}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a 3x3 direction cosine matrix (DCM) from Z-Y-X Euler angles. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i DCM} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i yaw_deg} \cell }{Rotation about Z in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pitch_deg} \cell }{Rotation about Y in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i roll_deg} \cell }{Rotation about X in degrees.\cell }
{\row }
}
Computes DCM = R_x(roll) * R_y(pitch) * R_z(yaw). \par
}{
Definition at line {\b 743} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b mat2D_alloc()}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, and {\b mat2D_set_rot_mat_z()}.}\par
}
{\xe \v mat2D_set_identity\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_identity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_identity ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a square matrix to the identity matrix. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix (must be square). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
m.rows == m.cols. \par
}}}{
Definition at line {\b 619} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, and {\b mat2D_set_rot_mat_z()}.}\par
}
{\xe \v mat2D_set_rot_mat_x\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_rot_mat_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_rot_mat_x ({\b Mat2D}  {\i m}, float  {\i angle_deg})}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the X-axis. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Angle in degrees. \cell }
{\row }
}
}{
Definition at line {\b 689} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_set_identity()}, {\b MATRIX2D_ASSERT}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_set_DCM_zyx()}.}\par
}
{\xe \v mat2D_set_rot_mat_y\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_rot_mat_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_rot_mat_y ({\b Mat2D}  {\i m}, float  {\i angle_deg})}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Y-axis. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Angle in degrees. \cell }
{\row }
}
}{
Definition at line {\b 706} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_set_identity()}, {\b MATRIX2D_ASSERT}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_set_DCM_zyx()}.}\par
}
{\xe \v mat2D_set_rot_mat_z\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_rot_mat_z}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_rot_mat_z ({\b Mat2D}  {\i m}, float  {\i angle_deg})}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Z-axis. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Angle in degrees. \cell }
{\row }
}
}{
Definition at line {\b 723} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_set_identity()}, {\b MATRIX2D_ASSERT}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, and {\b mat2D_set_DCM_zyx()}.}\par
}
{\xe \v mat2D_solve_linear_sys_LUP_decomposition\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_solve_linear_sys_LUP_decomposition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_solve_linear_sys_LUP_decomposition ({\b Mat2D}  {\i A}, {\b Mat2D}  {\i x}, {\b Mat2D}  {\i B})}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solve the linear system A x = B using LUP decomposition. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i A} \cell }{Coefficient matrix (NxN). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Solution vector (N x 1) (output). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i B} \cell }{Right-hand side vector (N x 1).\cell }
{\row }
}
Internally computes LUP and uses explicit inverses of L and U. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Forming inverses explicitly can be less stable; a forward/backward substitution would be preferable for production-quality code. \par
}}}{
Definition at line {\b 1236} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b mat2D_dot()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_sub\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a})}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place subtraction: dst -= a. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination matrix to be decremented. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Subtrahend of same shape as dst. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Shapes match. \par
}}}{
Definition at line {\b 527} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}.}\par
}
{\xe \v mat2D_sub_col_to_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub_col_to_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub_col_to_col ({\b Mat2D}  {\i des}, size_t  {\i des_col}, {\b Mat2D}  {\i src}, size_t  {\i src_col})}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source column from a destination column: des[:, des_col] -= src[:, src_col]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same row count as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_col} \cell }{Column index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_col} \cell }{Column index in source. \cell }
{\row }
}
}{
Definition at line {\b 846} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_sub_row_time_factor_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub_row_time_factor_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub_row_time_factor_to_row ({\b Mat2D}  {\i m}, size_t  {\i des_r}, size_t  {\i src_r}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) -= factor * row(src_r). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_r} \cell }{Destination row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_r} \cell }{Source row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 545} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, and {\b mat2D_triangulate()}.}\par
}
{\xe \v mat2D_sub_row_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub_row_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub_row_to_row ({\b Mat2D}  {\i des}, size_t  {\i des_row}, {\b Mat2D}  {\i src}, size_t  {\i src_row})}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source row from a destination row: des[des_row, :] -= src[src_row, :]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same number of columns as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_row} \cell }{Row index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_row} \cell }{Row index in source. \cell }
{\row }
}
}{
Definition at line {\b 915} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_swap_rows\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_swap_rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_swap_rows ({\b Mat2D}  {\i m}, size_t  {\i r1}, size_t  {\i r2})}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swap two rows of a matrix in-place. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r1} \cell }{First row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r2} \cell }{Second row index. \cell }
{\row }
}
}{
Definition at line {\b 863} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, and {\b mat2D_triangulate()}.}\par
}
{\xe \v mat2D_transpose\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_transpose}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_transpose ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src})}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transpose a matrix: des = src^T. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (shape src.cols x src.rows). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
}
}{
Definition at line {\b 1149} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_triangulate\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_triangulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_triangulate ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Forward elimination to transform a matrix to upper triangular form. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix transformed in-place. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Product of row scaling factors (currently 1 in this implementation). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Used as part of determinant computation via triangularization. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Not robust for linearly dependent rows or tiny pivots. \par
}}}{
Definition at line {\b 1013} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_det()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matrix2D.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00039 {\cf21 #ifndef MATRIX2D_H_}\par
00040 {\cf21 #define MATRIX2D_H_}\par
00041 \par
00042 {\cf21 #include <stddef.h>}\par
00043 {\cf21 #include <stdio.h>}\par
00044 {\cf21 #include <stdlib.h>}\par
00045 {\cf21 #include <stdint.h>}\par
00046 {\cf21 #include <stdbool.h>}\par
00047 \par
00055 {\cf21 #ifndef MATRIX2D_MALLOC}\par
00056 {\cf21 #define MATRIX2D_MALLOC malloc}\par
00057 {\cf21 #endif }{\cf20 //MATRIX2D_MALLOC}\par
00058 \par
00066 {\cf21 #ifndef MATRIX2D_ASSERT}\par
00067 {\cf21 #include <assert.h>}\par
00068 {\cf21 #define MATRIX2D_ASSERT assert}\par
00069 {\cf21 #endif }{\cf20 //MATRIX2D_ASSERT}\par
00070 \par
00081 {\cf17 typedef} {\cf17 struct }\{\par
00082     {\cf18 size_t} rows;\par
00083     {\cf18 size_t} cols;\par
00084     {\cf18 size_t} stride_r; {\cf20 /* how many element you need to traves to get to the element underneath */}\par
00085     {\cf18 double} *elements;\par
00086 \} Mat2D;\par
00087 \par
00098 {\cf17 typedef} {\cf17 struct }\{\par
00099     {\cf18 size_t} rows;\par
00100     {\cf18 size_t} cols;\par
00101     {\cf18 size_t} stride_r; {\cf20 /* how many element you need to traves to get to the element underneath */}\par
00102     uint32_t *elements;\par
00103 \} Mat2D_uint32;\par
00104 \par
00119 {\cf17 typedef} {\cf17 struct }\{\par
00120     {\cf18 size_t} rows;\par
00121     {\cf18 size_t} cols;\par
00122     {\cf18 size_t} stride_r; {\cf20 /* how many element you need to traves to get to the element underneath */}\par
00123     {\cf18 size_t} *rows_list;\par
00124     {\cf18 size_t} *cols_list;\par
00125     Mat2D ref_mat;\par
00126 \} Mat2D_Minor;\par
00127 \par
00141 {\cf21 #if 0}\par
00142 {\cf21 #define MAT2D_AT(m, i, j) (m).elements[mat2D_offset2d((m), (i), (j))]}\par
00143 {\cf21 #define MAT2D_AT_UINT32(m, i, j) (m).elements[mat2D_offset2d_uint32((m), (i), (j))]}\par
00144 {\cf21 #else }{\cf20 /* use this macro for batter performance but no assertion */}{\cf21 }\par
00145 {\cf21 #define MAT2D_AT(m, i, j) (m).elements[i * m.stride_r + j]}\par
00146 {\cf21 #define MAT2D_AT_UINT32(m, i, j) (m).elements[i * m.stride_r + j]}\par
00147 {\cf21 #endif}\par
00148 \par
00149 {\cf21 #ifndef PI}\par
00150 {\cf21     #ifndef __USE_MISC}\par
00151 {\cf21     #define __USE_MISC}\par
00152 {\cf21     #endif}\par
00153 {\cf21     #include <math.h>}\par
00154 {\cf21     #define PI M_PI}\par
00155 {\cf21 #endif}\par
00156 \par
00162 {\cf21 #define MAT2D_MINOR_AT(mm, i, j) MAT2D_AT(mm.ref_mat, mm.rows_list[i], mm.cols_list[j])}\par
00167 {\cf21 #define MAT2D_PRINT(m) mat2D_print(m, #m, 0)}\par
00172 {\cf21 #define MAT2D_PRINT_AS_COL(m) mat2D_print_as_col(m, #m, 0)}\par
00177 {\cf21 #define MAT2D_MINOR_PRINT(mm) mat2D_minor_print(mm, #mm, 0)}\par
00184 {\cf21 #define mat2D_normalize(m) mat2D_mult((m), 1.0 / mat2D_calc_norma((m)))}\par
00185 \par
00186 {\cf18 double} mat2D_rand_double({\cf18 void});\par
00187 \par
00188 Mat2D mat2D_alloc({\cf18 size_t} rows, {\cf18 size_t} cols);\par
00189 Mat2D_uint32 mat2D_alloc_uint32({\cf18 size_t} rows, {\cf18 size_t} cols);\par
00190 {\cf18 void} mat2D_free(Mat2D m);\par
00191 {\cf18 void} mat2D_free_uint32(Mat2D_uint32 m);\par
00192 {\cf18 size_t} mat2D_offset2d(Mat2D m, {\cf18 size_t} i, {\cf18 size_t} j);\par
00193 {\cf18 size_t} mat2D_offset2d_uint32(Mat2D_uint32 m, {\cf18 size_t} i, {\cf18 size_t} j);\par
00194 \par
00195 {\cf18 void} mat2D_fill(Mat2D m, {\cf18 double} x);\par
00196 {\cf18 void} mat2D_fill_sequence(Mat2D m, {\cf18 double} start, {\cf18 double} step);\par
00197 {\cf18 void} mat2D_fill_uint32(Mat2D_uint32 m, uint32_t x);\par
00198 {\cf18 void} mat2D_rand(Mat2D m, {\cf18 double} low, {\cf18 double} high);\par
00199 \par
00200 {\cf18 void} mat2D_dot(Mat2D dst, Mat2D a, Mat2D b);\par
00201 {\cf18 double} mat2D_dot_product(Mat2D a, Mat2D b);\par
00202 {\cf18 void} mat2D_cross(Mat2D dst, Mat2D a, Mat2D b);\par
00203 \par
00204 {\cf18 void} mat2D_add(Mat2D dst, Mat2D a);\par
00205 {\cf18 void} mat2D_add_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor);\par
00206 \par
00207 {\cf18 void} mat2D_sub(Mat2D dst, Mat2D a);\par
00208 {\cf18 void} mat2D_sub_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor);\par
00209 \par
00210 {\cf18 void} mat2D_mult(Mat2D m, {\cf18 double} factor);\par
00211 {\cf18 void} mat2D_mult_row(Mat2D m, {\cf18 size_t} r, {\cf18 double} factor);\par
00212 \par
00213 {\cf18 void} mat2D_print(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding);\par
00214 {\cf18 void} mat2D_print_as_col(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding);\par
00215 \par
00216 {\cf18 void} mat2D_set_identity(Mat2D m);\par
00217 {\cf18 double} mat2D_make_identity(Mat2D m);\par
00218 {\cf18 void} mat2D_set_rot_mat_x(Mat2D m, {\cf18 float} angle_deg);\par
00219 {\cf18 void} mat2D_set_rot_mat_y(Mat2D m, {\cf18 float} angle_deg);\par
00220 {\cf18 void} mat2D_set_rot_mat_z(Mat2D m, {\cf18 float} angle_deg);\par
00221 {\cf18 void} mat2D_set_DCM_zyx(Mat2D DCM, {\cf18 float} yaw_deg, {\cf18 float} pitch_deg, {\cf18 float} roll_deg);\par
00222 \par
00223 {\cf18 void} mat2D_copy(Mat2D des, Mat2D src);\par
00224 {\cf18 void} mat2D_copy_mat_to_mat_at_window(Mat2D des, Mat2D src, {\cf18 size_t} is, {\cf18 size_t} js, {\cf18 size_t} ie, {\cf18 size_t} je);\par
00225 \par
00226 {\cf18 void} mat2D_get_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col);\par
00227 {\cf18 void} mat2D_add_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col);\par
00228 {\cf18 void} mat2D_sub_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col);\par
00229 \par
00230 {\cf18 void} mat2D_swap_rows(Mat2D m, {\cf18 size_t} r1, {\cf18 size_t} r2);\par
00231 {\cf18 void} mat2D_get_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row);\par
00232 {\cf18 void} mat2D_add_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row);\par
00233 {\cf18 void} mat2D_sub_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row);\par
00234 \par
00235 {\cf18 double} mat2D_calc_norma(Mat2D m);\par
00236 \par
00237 {\cf18 bool} mat2D_mat_is_all_digit(Mat2D m, {\cf18 double} digit);\par
00238 {\cf18 bool} mat2D_row_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} r);\par
00239 {\cf18 bool} mat2D_col_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} c);\par
00240 \par
00241 {\cf18 double} mat2D_det_2x2_mat(Mat2D m);\par
00242 {\cf18 double} mat2D_triangulate(Mat2D m);\par
00243 {\cf18 double} mat2D_det(Mat2D m);\par
00244 {\cf18 void} mat2D_LUP_decomposition_with_swap(Mat2D src, Mat2D l, Mat2D p, Mat2D u);\par
00245 {\cf18 void} mat2D_transpose(Mat2D des, Mat2D src);\par
00246 {\cf18 void} mat2D_invert(Mat2D des, Mat2D src);\par
00247 {\cf18 void} mat2D_solve_linear_sys_LUP_decomposition(Mat2D A, Mat2D x, Mat2D B);\par
00248 \par
00249 Mat2D_Minor mat2D_minor_alloc_fill_from_mat(Mat2D ref_mat, {\cf18 size_t} i, {\cf18 size_t} j);\par
00250 Mat2D_Minor mat2D_minor_alloc_fill_from_mat_minor(Mat2D_Minor ref_mm, {\cf18 size_t} i, {\cf18 size_t} j);\par
00251 {\cf18 void} mat2D_minor_free(Mat2D_Minor mm);\par
00252 {\cf18 void} mat2D_minor_print(Mat2D_Minor mm, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding);\par
00253 {\cf18 double} mat2D_det_2x2_mat_minor(Mat2D_Minor mm);\par
00254 {\cf18 double} mat2D_minor_det(Mat2D_Minor mm);\par
00255 \par
00256 {\cf21 #endif }{\cf20 // MATRIX2D_H_}\par
00257 \par
00258 {\cf21 #ifdef MATRIX2D_IMPLEMENTATION}\par
00259 {\cf21 #undef MATRIX2D_IMPLEMENTATION}\par
00260 \par
00261 \par
00266 {\cf18 double} mat2D_rand_double({\cf18 void})\par
00267 \{\par
00268     {\cf19 return} ({\cf18 double}) rand() / (double) RAND_MAX;\par
00269 \}\par
00270 \par
00278 Mat2D mat2D_alloc({\cf18 size_t} rows, {\cf18 size_t} cols)\par
00279 \{\par
00280     Mat2D m;\par
00281     m.rows = rows;\par
00282     m.cols = cols;\par
00283     m.stride_r = cols;\par
00284     m.elements = ({\cf18 double}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*rows*cols);\par
00285     MATRIX2D_ASSERT(m.elements != NULL);\par
00286     \par
00287     {\cf19 return} m;\par
00288 \}\par
00289 \par
00297 Mat2D_uint32 mat2D_alloc_uint32({\cf18 size_t} rows, {\cf18 size_t} cols)\par
00298 \{\par
00299     Mat2D_uint32 m;\par
00300     m.rows = rows;\par
00301     m.cols = cols;\par
00302     m.stride_r = cols;\par
00303     m.elements = (uint32_t*)MATRIX2D_MALLOC({\cf17 sizeof}(uint32_t)*rows*cols);\par
00304     MATRIX2D_ASSERT(m.elements != NULL);\par
00305     \par
00306     {\cf19 return} m;\par
00307 \}\par
00308 \par
00314 {\cf18 void} mat2D_free(Mat2D m)\par
00315 \{\par
00316     free(m.elements);\par
00317 \}\par
00318 \par
00324 {\cf18 void} mat2D_free_uint32(Mat2D_uint32 m)\par
00325 \{\par
00326     free(m.elements);\par
00327 \}\par
00328 \par
00337 {\cf18 size_t} mat2D_offset2d(Mat2D m, {\cf18 size_t} i, {\cf18 size_t} j)\par
00338 \{\par
00339     MATRIX2D_ASSERT(i < m.rows && j < m.cols);\par
00340     {\cf19 return} i * m.stride_r + j;\par
00341 \}\par
00342 \par
00351 {\cf18 size_t} mat2D_offset2d_uint32(Mat2D_uint32 m, {\cf18 size_t} i, {\cf18 size_t} j)\par
00352 \{\par
00353     MATRIX2D_ASSERT(i < m.rows && j < m.cols);\par
00354     {\cf19 return} i * m.stride_r + j;\par
00355 \}\par
00356 \par
00362 {\cf18 void} mat2D_fill(Mat2D m, {\cf18 double} x)\par
00363 \{\par
00364     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00365         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00366             MAT2D_AT(m, i, j) = x;\par
00367         \}\par
00368     \}\par
00369 \}\par
00370 \par
00378 {\cf18 void} mat2D_fill_sequence(Mat2D m, {\cf18 double} start, {\cf18 double} step) \{\par
00379     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; i++) \{\par
00380         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; j++) \{\par
00381             MAT2D_AT(m, i, j) = start + step * mat2D_offset2d(m, i, j);\par
00382         \}\par
00383     \}\par
00384 \}\par
00385 \par
00391 {\cf18 void} mat2D_fill_uint32(Mat2D_uint32 m, uint32_t x)\par
00392 \{\par
00393     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00394         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00395             MAT2D_AT_UINT32(m, i, j) = x;\par
00396         \}\par
00397     \}\par
00398 \}\par
00399 \par
00407 {\cf18 void} mat2D_rand(Mat2D m, {\cf18 double} low, {\cf18 double} high)\par
00408 \{\par
00409     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00410         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00411             MAT2D_AT(m, i, j) = mat2D_rand_double()*(high - low) + low;\par
00412         \}\par
00413     \}\par
00414 \}\par
00415 \par
00424 {\cf18 void} mat2D_dot(Mat2D dst, Mat2D a, Mat2D b)\par
00425 \{\par
00426     MATRIX2D_ASSERT(a.cols == b.rows);\par
00427     MATRIX2D_ASSERT(a.rows == dst.rows);\par
00428     MATRIX2D_ASSERT(b.cols == dst.cols);\par
00429 \par
00430     {\cf18 size_t} i, j, k;\par
00431 \par
00432     {\cf19 for} (i = 0; i < dst.rows; i++) \{\par
00433         {\cf19 for} (j = 0; j < dst.cols; j++) \{\par
00434             MAT2D_AT(dst, i, j) = 0;\par
00435             {\cf19 for} (k = 0; k < a.cols; k++) \{\par
00436                 MAT2D_AT(dst, i, j) += MAT2D_AT(a, i, k)*MAT2D_AT(b, k, j);\par
00437             \}\par
00438         \}\par
00439     \}\par
00440 \par
00441 \}\par
00442 \par
00450 {\cf18 double} mat2D_dot_product(Mat2D a, Mat2D b)\par
00451 \{\par
00452     MATRIX2D_ASSERT(a.rows == b.rows);\par
00453     MATRIX2D_ASSERT(a.cols == b.cols);\par
00454     MATRIX2D_ASSERT((1 == a.cols && 1 == b.cols) || (1 == a.rows && 1 == b.rows));\par
00455 \par
00456     {\cf18 double} dot_product = 0;\par
00457 \par
00458     {\cf19 if} (1 == a.cols) \{\par
00459         {\cf19 for} ({\cf18 size_t} i = 0; i < a.rows; i++) \{\par
00460             dot_product += MAT2D_AT(a, i, 0) * MAT2D_AT(b, i, 0);\par
00461         \}\par
00462     \} {\cf19 else} \{\par
00463         {\cf19 for} ({\cf18 size_t} j = 0; j < a.cols; j++) \{\par
00464             dot_product += MAT2D_AT(a, 0, j) * MAT2D_AT(b, 0, j);\par
00465         \}\par
00466     \}\par
00467     \par
00468     {\cf19 return} dot_product;\par
00469     \par
00470 \}\par
00471 \par
00479 {\cf18 void} mat2D_cross(Mat2D dst, Mat2D a, Mat2D b)\par
00480 \{\par
00481     MATRIX2D_ASSERT(3 == dst.rows && 1 == dst.cols);\par
00482     MATRIX2D_ASSERT(3 == a.rows && 1 == a.cols);\par
00483     MATRIX2D_ASSERT(3 == b.rows && 1 == b.cols);\par
00484 \par
00485     MAT2D_AT(dst, 0, 0) = MAT2D_AT(a, 1, 0) * MAT2D_AT(b, 2, 0) - MAT2D_AT(a, 2, 0) * MAT2D_AT(b, 1, 0);\par
00486     MAT2D_AT(dst, 1, 0) = MAT2D_AT(a, 2, 0) * MAT2D_AT(b, 0, 0) - MAT2D_AT(a, 0, 0) * MAT2D_AT(b, 2, 0);\par
00487     MAT2D_AT(dst, 2, 0) = MAT2D_AT(a, 0, 0) * MAT2D_AT(b, 1, 0) - MAT2D_AT(a, 1, 0) * MAT2D_AT(b, 0, 0);\par
00488 \}\par
00489 \par
00496 {\cf18 void} mat2D_add(Mat2D dst, Mat2D a)\par
00497 \{\par
00498     MATRIX2D_ASSERT(dst.rows == a.rows);\par
00499     MATRIX2D_ASSERT(dst.cols == a.cols);\par
00500     {\cf19 for} ({\cf18 size_t} i = 0; i < dst.rows; ++i) \{\par
00501         {\cf19 for} ({\cf18 size_t} j = 0; j < dst.cols; ++j) \{\par
00502             MAT2D_AT(dst, i, j) += MAT2D_AT(a, i, j);\par
00503         \}\par
00504     \}\par
00505 \}\par
00506 \par
00514 {\cf18 void} mat2D_add_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor)\par
00515 \{\par
00516     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00517         MAT2D_AT(m, des_r, j) += factor * MAT2D_AT(m, src_r, j);\par
00518     \}\par
00519 \}\par
00520 \par
00527 {\cf18 void} mat2D_sub(Mat2D dst, Mat2D a)\par
00528 \{\par
00529     MATRIX2D_ASSERT(dst.rows == a.rows);\par
00530     MATRIX2D_ASSERT(dst.cols == a.cols);\par
00531     {\cf19 for} ({\cf18 size_t} i = 0; i < dst.rows; ++i) \{\par
00532         {\cf19 for} ({\cf18 size_t} j = 0; j < dst.cols; ++j) \{\par
00533             MAT2D_AT(dst, i, j) -= MAT2D_AT(a, i, j);\par
00534         \}\par
00535     \}\par
00536 \}\par
00537 \par
00545 {\cf18 void} mat2D_sub_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor)\par
00546 \{\par
00547     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00548         MAT2D_AT(m, des_r, j) -= factor * MAT2D_AT(m, src_r, j);\par
00549     \}\par
00550 \}\par
00551 \par
00557 {\cf18 void} mat2D_mult(Mat2D m, {\cf18 double} factor)\par
00558 \{\par
00559     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00560         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00561             MAT2D_AT(m, i, j) *= factor;\par
00562         \}\par
00563     \}\par
00564 \}\par
00565 \par
00572 {\cf18 void} mat2D_mult_row(Mat2D m, {\cf18 size_t} r, {\cf18 double} factor)\par
00573 \{\par
00574     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00575         MAT2D_AT(m, r, j) *= factor;\par
00576     \}\par
00577 \}\par
00578 \par
00585 {\cf18 void} mat2D_print(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding)\par
00586 \{\par
00587     printf({\cf22 "%*s%s = [\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
00588     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00589         printf({\cf22 "%*s    "}, ({\cf18 int}) padding, {\cf22 ""});\par
00590         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00591             printf({\cf22 "%9.6f "}, MAT2D_AT(m, i, j));\par
00592         \}\par
00593         printf({\cf22 "\\n"});\par
00594     \}\par
00595     printf({\cf22 "%*s]\\n"}, ({\cf18 int}) padding, {\cf22 ""});\par
00596 \}\par
00597 \par
00604 {\cf18 void} mat2D_print_as_col(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding)\par
00605 \{\par
00606     printf({\cf22 "%*s%s = [\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
00607     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows*m.cols; ++i) \{\par
00608             printf({\cf22 "%*s    "}, ({\cf18 int}) padding, {\cf22 ""});\par
00609             printf({\cf22 "%f\\n"}, m.elements[i]);\par
00610     \}\par
00611     printf({\cf22 "%*s]\\n"}, ({\cf18 int}) padding, {\cf22 ""});\par
00612 \}\par
00613 \par
00619 {\cf18 void} mat2D_set_identity(Mat2D m)\par
00620 \{\par
00621     MATRIX2D_ASSERT(m.cols == m.rows);\par
00622     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00623         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00624             MAT2D_AT(m, i, j) = i == j ? 1 : 0;\par
00625             {\cf20 // if (i == j) \{}\par
00626             {\cf20 //     MAT2D_AT(m, i, j) = 1;}\par
00627             {\cf20 // \}}\par
00628             {\cf20 // else \{}\par
00629             {\cf20 //     MAT2D_AT(m, i, j) = 0;}\par
00630             {\cf20 // \}}\par
00631         \}\par
00632     \}\par
00633 \}\par
00634 \par
00643 {\cf18 double} mat2D_make_identity(Mat2D m)\par
00644 \{\par
00645     {\cf20 /* make identity matrix using Gauss elimination */}\par
00646     {\cf20 /* preforming Gauss elimination: https://en.wikipedia.org/wiki/Gaussian_elimination */}\par
00647     {\cf20 /* returns the factor multiplying the determinant */}\par
00648 \par
00649     {\cf18 double} factor_to_return = 1;\par
00650 \par
00651     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(m.rows-1, m.cols); i++) \{\par
00652         {\cf20 /* check if it is the biggest first number (absolute value) */}\par
00653         {\cf18 size_t} biggest_r = i;\par
00654         {\cf19 for} ({\cf18 size_t} index = i; index < m.rows; index++) \{\par
00655             {\cf19 if} (fabs(MAT2D_AT(m, index, index)) > fabs(MAT2D_AT(m, biggest_r, 0))) \{\par
00656                 biggest_r = index;\par
00657             \}\par
00658         \}\par
00659         {\cf19 if} (i != biggest_r) \{\par
00660             mat2D_swap_rows(m, i, biggest_r);\par
00661             factor_to_return *= -1;\par
00662         \}\par
00663         {\cf19 for} ({\cf18 size_t} j = i+1; j < m.cols; j++) \{\par
00664             {\cf18 double} factor = 1 / MAT2D_AT(m, i, i);\par
00665             mat2D_sub_row_time_factor_to_row(m, j, i, MAT2D_AT(m, j, i) * factor);\par
00666             mat2D_mult_row(m, i, factor);\par
00667             factor_to_return *= factor;\par
00668         \}\par
00669     \}\par
00670     {\cf18 double} factor = 1 / MAT2D_AT(m, m.rows-1, m.cols-1);\par
00671     mat2D_mult_row(m, m.rows-1, factor);\par
00672     factor_to_return *= factor;\par
00673     {\cf19 for} ({\cf18 size_t} c = m.cols-1; c > 0; c--) \{\par
00674         {\cf19 for} ({\cf18 int} r = c-1; r >= 0; r--) \{\par
00675             {\cf18 double} factor = 1 / MAT2D_AT(m, c, c);\par
00676             mat2D_sub_row_time_factor_to_row(m, r, c, MAT2D_AT(m, r, c) * factor);\par
00677         \}\par
00678     \}\par
00679 \par
00680 \par
00681     {\cf19 return} factor_to_return;\par
00682 \}\par
00683 \par
00689 {\cf18 void} mat2D_set_rot_mat_x(Mat2D m, {\cf18 float} angle_deg)\par
00690 \{\par
00691     MATRIX2D_ASSERT(3 == m.cols && 3 == m.rows);\par
00692 \par
00693     {\cf18 float} angle_rad = angle_deg * PI / 180;\par
00694     mat2D_set_identity(m);\par
00695     MAT2D_AT(m, 1, 1) =  cos(angle_rad);\par
00696     MAT2D_AT(m, 1, 2) =  sin(angle_rad);\par
00697     MAT2D_AT(m, 2, 1) = -sin(angle_rad);\par
00698     MAT2D_AT(m, 2, 2) =  cos(angle_rad);\par
00699 \}\par
00700 \par
00706 {\cf18 void} mat2D_set_rot_mat_y(Mat2D m, {\cf18 float} angle_deg)\par
00707 \{\par
00708     MATRIX2D_ASSERT(3 == m.cols && 3 == m.rows);\par
00709 \par
00710     {\cf18 float} angle_rad = angle_deg * PI / 180;\par
00711     mat2D_set_identity(m);\par
00712     MAT2D_AT(m, 0, 0) =  cos(angle_rad);\par
00713     MAT2D_AT(m, 0, 2) = -sin(angle_rad);\par
00714     MAT2D_AT(m, 2, 0) =  sin(angle_rad);\par
00715     MAT2D_AT(m, 2, 2) =  cos(angle_rad);\par
00716 \}\par
00717 \par
00723 {\cf18 void} mat2D_set_rot_mat_z(Mat2D m, {\cf18 float} angle_deg)\par
00724 \{\par
00725     MATRIX2D_ASSERT(3 == m.cols && 3 == m.rows);\par
00726 \par
00727     {\cf18 float} angle_rad = angle_deg * PI / 180;\par
00728     mat2D_set_identity(m);\par
00729     MAT2D_AT(m, 0, 0) =  cos(angle_rad);\par
00730     MAT2D_AT(m, 0, 1) =  sin(angle_rad);\par
00731     MAT2D_AT(m, 1, 0) = -sin(angle_rad);\par
00732     MAT2D_AT(m, 1, 1) =  cos(angle_rad);\par
00733 \}\par
00734 \par
00743 {\cf18 void} mat2D_set_DCM_zyx(Mat2D DCM, {\cf18 float} yaw_deg, {\cf18 float} pitch_deg, {\cf18 float} roll_deg)\par
00744 \{\par
00745     Mat2D RotZ = mat2D_alloc(3,3);\par
00746     mat2D_set_rot_mat_z(RotZ, yaw_deg);\par
00747     Mat2D RotY = mat2D_alloc(3,3);\par
00748     mat2D_set_rot_mat_y(RotY, pitch_deg);\par
00749     Mat2D RotX = mat2D_alloc(3,3);\par
00750     mat2D_set_rot_mat_x(RotX, roll_deg);\par
00751     Mat2D temp = mat2D_alloc(3,3);\par
00752 \par
00753     mat2D_dot(temp, RotY, RotZ);\par
00754     mat2D_dot(DCM, RotX, temp); {\cf20 /* I have a DCM */}\par
00755 \par
00756     mat2D_free(RotZ);\par
00757     mat2D_free(RotY);\par
00758     mat2D_free(RotX);\par
00759     mat2D_free(temp);\par
00760 \}\par
00761 \par
00768 {\cf18 void} mat2D_copy(Mat2D des, Mat2D src)\par
00769 \{\par
00770     MATRIX2D_ASSERT(des.cols == src.cols);\par
00771     MATRIX2D_ASSERT(des.rows == src.rows);\par
00772 \par
00773     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; ++i) \{\par
00774         {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; ++j) \{\par
00775             MAT2D_AT(des, i, j) = MAT2D_AT(src, i, j);\par
00776         \}\par
00777     \}\par
00778 \}\par
00779 \par
00790 {\cf18 void} mat2D_copy_mat_to_mat_at_window(Mat2D des, Mat2D src, {\cf18 size_t} is, {\cf18 size_t} js, {\cf18 size_t} ie, {\cf18 size_t} je)\par
00791 \{\par
00792     MATRIX2D_ASSERT(je > js && ie > is);\par
00793     MATRIX2D_ASSERT(je-js+1 == des.cols);\par
00794     MATRIX2D_ASSERT(ie-is+1 == des.rows);\par
00795 \par
00796     {\cf19 for} ({\cf18 size_t} index = 0; index < des.rows; ++index) \{\par
00797         {\cf19 for} ({\cf18 size_t} jndex = 0; jndex < des.cols; ++jndex) \{\par
00798             MAT2D_AT(des, index, jndex) = MAT2D_AT(src, is+index, js+jndex);\par
00799         \}\par
00800     \}\par
00801 \}\par
00802 \par
00810 {\cf18 void} mat2D_get_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col)\par
00811 \{\par
00812     MATRIX2D_ASSERT(src_col < src.cols);\par
00813     MATRIX2D_ASSERT(des.rows == src.rows);\par
00814     MATRIX2D_ASSERT(des_col < des.cols);\par
00815 \par
00816     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; i++) \{\par
00817         MAT2D_AT(des, i, des_col) = MAT2D_AT(src, i, src_col);\par
00818     \}\par
00819 \}\par
00820 \par
00828 {\cf18 void} mat2D_add_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col)\par
00829 \{\par
00830     MATRIX2D_ASSERT(src_col < src.cols);\par
00831     MATRIX2D_ASSERT(des.rows == src.rows);\par
00832     MATRIX2D_ASSERT(des_col < des.cols);\par
00833 \par
00834     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; i++) \{\par
00835         MAT2D_AT(des, i, des_col) += MAT2D_AT(src, i, src_col);\par
00836     \}\par
00837 \}\par
00838 \par
00846 {\cf18 void} mat2D_sub_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col)\par
00847 \{\par
00848     MATRIX2D_ASSERT(src_col < src.cols);\par
00849     MATRIX2D_ASSERT(des.rows == src.rows);\par
00850     MATRIX2D_ASSERT(des_col < des.cols);\par
00851 \par
00852     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; i++) \{\par
00853         MAT2D_AT(des, i, des_col) -= MAT2D_AT(src, i, src_col);\par
00854     \}\par
00855 \}\par
00856 \par
00863 {\cf18 void} mat2D_swap_rows(Mat2D m, {\cf18 size_t} r1, {\cf18 size_t} r2)\par
00864 \{\par
00865     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; j++) \{\par
00866         {\cf18 double} temp = MAT2D_AT(m, r1, j);\par
00867         MAT2D_AT(m, r1, j) = MAT2D_AT(m, r2, j);\par
00868         MAT2D_AT(m, r2, j) = temp;\par
00869     \}\par
00870 \}\par
00871 \par
00879 {\cf18 void} mat2D_get_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row)\par
00880 \{\par
00881     MATRIX2D_ASSERT(src_row < src.rows);\par
00882     MATRIX2D_ASSERT(des.cols == src.cols);\par
00883     MATRIX2D_ASSERT(des_row < des.rows);\par
00884 \par
00885     {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; j++) \{\par
00886         MAT2D_AT(des, des_row, j) = MAT2D_AT(src, src_row, j);\par
00887     \}\par
00888 \}\par
00889 \par
00897 {\cf18 void} mat2D_add_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row)\par
00898 \{\par
00899     MATRIX2D_ASSERT(src_row < src.rows);\par
00900     MATRIX2D_ASSERT(des.cols == src.cols);\par
00901     MATRIX2D_ASSERT(des_row < des.rows);\par
00902 \par
00903     {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; j++) \{\par
00904         MAT2D_AT(des, des_row, j) += MAT2D_AT(src, src_row, j);\par
00905     \}\par
00906 \}\par
00907 \par
00915 {\cf18 void} mat2D_sub_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row)\par
00916 \{\par
00917     MATRIX2D_ASSERT(src_row < src.rows);\par
00918     MATRIX2D_ASSERT(des.cols == src.cols);\par
00919     MATRIX2D_ASSERT(des_row < des.rows);\par
00920 \par
00921     {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; j++) \{\par
00922         MAT2D_AT(des, des_row, j) -= MAT2D_AT(src, src_row, j);\par
00923     \}\par
00924 \}\par
00925 \par
00931 {\cf18 double} mat2D_calc_norma(Mat2D m)\par
00932 \{\par
00933     {\cf18 double} sum = 0;\par
00934 \par
00935     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00936         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00937             sum += MAT2D_AT(m, i, j) * MAT2D_AT(m, i, j);\par
00938         \}\par
00939     \}\par
00940     {\cf19 return} sqrt(sum);\par
00941 \}\par
00942 \par
00949 {\cf18 bool} mat2D_mat_is_all_digit(Mat2D m, {\cf18 double} digit)\par
00950 \{\par
00951     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00952         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00953             {\cf19 if} (MAT2D_AT(m, i, j) != digit) \{\par
00954                 {\cf19 return} {\cf17 false};\par
00955             \}\par
00956         \}\par
00957     \}\par
00958     {\cf19 return} {\cf17 true};\par
00959 \}\par
00960 \par
00968 {\cf18 bool} mat2D_row_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} r)\par
00969 \{\par
00970     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00971         {\cf19 if} (MAT2D_AT(m, r, j) != digit) \{\par
00972             {\cf19 return} {\cf17 false};\par
00973         \}\par
00974     \}\par
00975     {\cf19 return} {\cf17 true};\par
00976 \}\par
00977 \par
00985 {\cf18 bool} mat2D_col_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} c)\par
00986 \{\par
00987     {\cf19 for} ({\cf18 size_t} i = 0; i < m.cols; ++i) \{\par
00988         {\cf19 if} (MAT2D_AT(m, i, c) != digit) \{\par
00989             {\cf19 return} {\cf17 false};\par
00990         \}\par
00991     \}\par
00992     {\cf19 return} {\cf17 true};\par
00993 \}\par
00994 \par
01000 {\cf18 double} mat2D_det_2x2_mat(Mat2D m)\par
01001 \{\par
01002     MATRIX2D_ASSERT(2 == m.cols && 2 == m.rows && {\cf22 "Not a 2x2 matrix"});\par
01003     {\cf19 return} MAT2D_AT(m, 0, 0) * MAT2D_AT(m, 1, 1) - MAT2D_AT(m, 0, 1) * MAT2D_AT(m, 1, 0);\par
01004 \}\par
01005 \par
01013 {\cf18 double} mat2D_triangulate(Mat2D m)\par
01014 \{\par
01015     {\cf20 /* preforming Gauss elimination: https://en.wikipedia.org/wiki/Gaussian_elimination */}\par
01016     {\cf20 /* returns the factor multiplying the determinant */}\par
01017 \par
01018     {\cf18 double} factor_to_return = 1;\par
01019 \par
01020     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(m.rows-1, m.cols); i++) \{\par
01021         {\cf19 if} (!MAT2D_AT(m, i, i)) \{   {\cf20 /* swapping only if it is zero */}\par
01022             {\cf20 /* finding biggest first number (absolute value) */}\par
01023             {\cf18 size_t} biggest_r = i;\par
01024             {\cf19 for} ({\cf18 size_t} index = i; index < m.rows; index++) \{\par
01025                 {\cf19 if} (fabs(MAT2D_AT(m, index, i)) > fabs(MAT2D_AT(m, biggest_r, i))) \{\par
01026                     biggest_r = index;\par
01027                 \}\par
01028             \}\par
01029             {\cf19 if} (i != biggest_r) \{\par
01030                 mat2D_swap_rows(m, i, biggest_r);\par
01031             \}\par
01032         \}\par
01033         {\cf19 for} ({\cf18 size_t} j = i+1; j < m.cols; j++) \{\par
01034             {\cf18 double} factor = 1 / MAT2D_AT(m, i, i);\par
01035             {\cf19 if} (!isfinite(factor)) \{\par
01036                 printf({\cf22 "%s:%d: [Error] unable to transfrom into uperr triangular matrix. Probably some of the rows are not independent.\\n"}, __FILE__, __LINE__);\par
01037             \}\par
01038             {\cf18 double} mat_value = MAT2D_AT(m, j, i);\par
01039             mat2D_sub_row_time_factor_to_row(m, j, i, mat_value * factor);\par
01040         \}\par
01041     \}\par
01042     {\cf19 return} factor_to_return;\par
01043 \}\par
01044 \par
01052 {\cf18 double} mat2D_det(Mat2D m)\par
01053 \{\par
01054     MATRIX2D_ASSERT(m.cols == m.rows && {\cf22 "should be a square matrix"});\par
01055 \par
01056     {\cf20 /* checking if there is a row or column with all zeros */}\par
01057     {\cf20 /* checking rows */}\par
01058     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; i++) \{\par
01059         {\cf19 if} (mat2D_row_is_all_digit(m, 0, i)) \{\par
01060             {\cf19 return} 0;\par
01061         \}\par
01062     \}\par
01063     {\cf20 /* checking cols */}\par
01064     {\cf19 for} ({\cf18 size_t} j = 0; j < m.rows; j++) \{\par
01065         {\cf19 if} (mat2D_col_is_all_digit(m, 0, j)) \{\par
01066             {\cf19 return} 0;\par
01067         \}\par
01068     \}\par
01069 \par
01070     {\cf20 /* This is an implementation of naive determinant calculation using minors. This is too slow */}\par
01071 \par
01072     {\cf20 // double det = 0;}\par
01073     {\cf20 // /* TODO: finding beast row or col? */}\par
01074     {\cf20 // for (size_t i = 0, j = 0; i < m.rows; i++) \{ /* first column */}\par
01075     {\cf20 //     if (MAT2D_AT(m, i, j) < 1e-10) continue;}\par
01076     {\cf20 //     Mat2D_Minor sub_mm = mat2D_minor_alloc_fill_from_mat(m, i, j);}\par
01077     {\cf20 //     int factor = (i+j)%2 ? -1 : 1;}\par
01078     {\cf20 //     if (sub_mm.cols != 2) \{}\par
01079     {\cf20 //         MATRIX2D_ASSERT(sub_mm.cols == sub_mm.rows && "should be a square matrix");}\par
01080     {\cf20 //         det += MAT2D_AT(m, i, j) * (factor) * mat2D_minor_det(sub_mm);}\par
01081     {\cf20 //     \} else if (sub_mm.cols == 2 && sub_mm.rows == 2) \{}\par
01082     {\cf20 //         det += MAT2D_AT(m, i, j) * (factor) * mat2D_det_2x2_mat_minor(sub_mm);;}\par
01083     {\cf20 //     \}}\par
01084     {\cf20 //     mat2D_minor_free(sub_mm);}\par
01085     {\cf20 // \}}\par
01086 \par
01087     Mat2D temp_m = mat2D_alloc(m.rows, m.cols);\par
01088     mat2D_copy(temp_m, m);\par
01089     {\cf18 double} factor = mat2D_triangulate(temp_m);\par
01090     {\cf18 double} diag_mul = 1; \par
01091     {\cf19 for} ({\cf18 size_t} i = 0; i < temp_m.rows; i++) \{\par
01092         diag_mul *= MAT2D_AT(temp_m, i, i);\par
01093     \}\par
01094     mat2D_free(temp_m);\par
01095 \par
01096     {\cf19 return} diag_mul / factor;\par
01097 \}\par
01098 \par
01107 {\cf18 void} mat2D_LUP_decomposition_with_swap(Mat2D src, Mat2D l, Mat2D p, Mat2D u)\par
01108 \{\par
01109     {\cf20 /* performing LU decomposition Following the Wikipedia page: https://en.wikipedia.org/wiki/LU_decomposition */}\par
01110 \par
01111     mat2D_copy(u, src);\par
01112     mat2D_set_identity(p);\par
01113     mat2D_fill(l, 0);\par
01114 \par
01115     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(u.rows-1, u.cols); i++) \{\par
01116         {\cf19 if} (!MAT2D_AT(u, i, i)) \{   {\cf20 /* swapping only if it is zero */}\par
01117             {\cf20 /* finding biggest first number (absolute value) */}\par
01118             {\cf18 size_t} biggest_r = i;\par
01119             {\cf19 for} ({\cf18 size_t} index = i; index < u.rows; index++) \{\par
01120                 {\cf19 if} (fabs(MAT2D_AT(u, index, i)) > fabs(MAT2D_AT(u, biggest_r, i))) \{\par
01121                     biggest_r = index;\par
01122                 \}\par
01123             \}\par
01124             {\cf19 if} (i != biggest_r) \{\par
01125                 mat2D_swap_rows(u, i, biggest_r);\par
01126                 mat2D_swap_rows(p, i, biggest_r);\par
01127                 mat2D_swap_rows(l, i, biggest_r);\par
01128             \}\par
01129         \}\par
01130         {\cf19 for} ({\cf18 size_t} j = i+1; j < u.cols; j++) \{\par
01131             {\cf18 double} factor = 1 / MAT2D_AT(u, i, i);\par
01132             {\cf19 if} (!isfinite(factor)) \{\par
01133                 printf({\cf22 "%s:%d: [Error] unable to transfrom into uper triangular matrix. Probably some of the rows are not independent.\\n"}, __FILE__, __LINE__);\par
01134             \}\par
01135             {\cf18 double} mat_value = MAT2D_AT(u, j, i);\par
01136             mat2D_sub_row_time_factor_to_row(u, j, i, mat_value * factor);\par
01137             MAT2D_AT(l, j, i) = mat_value * factor;\par
01138         \}\par
01139         MAT2D_AT(l, i, i) = 1;\par
01140     \}\par
01141     MAT2D_AT(l, l.rows-1, l.cols-1) = 1;\par
01142 \}\par
01143 \par
01149 {\cf18 void} mat2D_transpose(Mat2D des, Mat2D src)\par
01150 \{\par
01151     MATRIX2D_ASSERT(des.cols == src.rows);\par
01152     MATRIX2D_ASSERT(des.rows == src.cols);\par
01153 \par
01154     {\cf19 for} ({\cf18 size_t} index = 0; index < des.rows; ++index) \{\par
01155         {\cf19 for} ({\cf18 size_t} jndex = 0; jndex < des.cols; ++jndex) \{\par
01156             MAT2D_AT(des, index, jndex) = MAT2D_AT(src, jndex, index);\par
01157         \}\par
01158     \}\par
01159 \}\par
01160 \par
01169 {\cf18 void} mat2D_invert(Mat2D des, Mat2D src)\par
01170 \{\par
01171     MATRIX2D_ASSERT(src.cols == src.rows && {\cf22 "should be an NxN matrix"});\par
01172     MATRIX2D_ASSERT(des.cols == src.cols && des.rows == des.cols);\par
01173 \par
01174     Mat2D m = mat2D_alloc(src.rows, src.cols);\par
01175     mat2D_copy(m, src);\par
01176 \par
01177     mat2D_set_identity(des);\par
01178     \par
01179     {\cf19 if} (!mat2D_det(m)) \{\par
01180         mat2D_fill(des, 0);\par
01181         printf({\cf22 "%s:%d: [Error] Can't invert the matrix. Determinant is zero! Set the inverse matrix to all zeros\\n"}, __FILE__, __LINE__);\par
01182         {\cf19 return};\par
01183     \}\par
01184 \par
01185     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(m.rows-1, m.cols); i++) \{\par
01186         {\cf19 if} (!MAT2D_AT(m, i, i)) \{   {\cf20 /* swapping only if it is zero */}\par
01187             {\cf20 /* finding biggest first number (absolute value) */}\par
01188             {\cf18 size_t} biggest_r = i;\par
01189             {\cf19 for} ({\cf18 size_t} index = i; index < m.rows; index++) \{\par
01190                 {\cf19 if} (fabs(MAT2D_AT(m, index, i)) > fabs(MAT2D_AT(m, biggest_r, i))) \{\par
01191                     biggest_r = index;\par
01192                 \}\par
01193             \}\par
01194             {\cf19 if} (i != biggest_r) \{\par
01195                 mat2D_swap_rows(m, i, biggest_r);\par
01196                 mat2D_swap_rows(des, i, biggest_r);\par
01197                 printf({\cf22 "%s:%d: [INFO] swapping row %zu with row %zu.\\n"}, __FILE__, __LINE__, i, biggest_r);\par
01198             \} {\cf19 else} \{\par
01199                 MATRIX2D_ASSERT(0 && {\cf22 "can't inverse"});\par
01200             \}\par
01201         \}\par
01202         {\cf19 for} ({\cf18 size_t} j = i+1; j < m.cols; j++) \{\par
01203             {\cf18 double} factor = 1 / MAT2D_AT(m, i, i);\par
01204             {\cf18 double} mat_value = MAT2D_AT(m, j, i);\par
01205             mat2D_sub_row_time_factor_to_row(m, j, i, mat_value * factor);\par
01206             mat2D_mult_row(m, i, factor);\par
01207 \par
01208             mat2D_sub_row_time_factor_to_row(des, j, i, mat_value * factor);\par
01209             mat2D_mult_row(des, i, factor);\par
01210         \}\par
01211     \}\par
01212     {\cf18 double} factor = 1 / MAT2D_AT(m, m.rows-1, m.cols-1);\par
01213     mat2D_mult_row(m, m.rows-1, factor);\par
01214     mat2D_mult_row(des, des.rows-1, factor);\par
01215     {\cf19 for} ({\cf18 size_t} c = m.cols-1; c > 0; c--) \{\par
01216         {\cf19 for} ({\cf18 int} r = c-1; r >= 0; r--) \{\par
01217             {\cf18 double} factor = 1 / MAT2D_AT(m, c, c);\par
01218             {\cf18 double} mat_value = MAT2D_AT(m, r, c);\par
01219             mat2D_sub_row_time_factor_to_row(m, r, c, mat_value * factor);\par
01220             mat2D_sub_row_time_factor_to_row(des, r, c, mat_value * factor);\par
01221         \}\par
01222     \}\par
01223 \par
01224     mat2D_free(m);\par
01225 \}\par
01226 \par
01236 {\cf18 void} mat2D_solve_linear_sys_LUP_decomposition(Mat2D A, Mat2D x, Mat2D B)\par
01237 \{\par
01238     MATRIX2D_ASSERT(A.cols == x.rows);\par
01239     MATRIX2D_ASSERT(1 == x.cols);\par
01240     MATRIX2D_ASSERT(A.rows == B.rows);\par
01241     MATRIX2D_ASSERT(1 == B.cols);\par
01242 \par
01243     Mat2D y     = mat2D_alloc(x.rows, x.cols);\par
01244     Mat2D l     = mat2D_alloc(A.rows, A.cols);\par
01245     Mat2D p     = mat2D_alloc(A.rows, A.cols);\par
01246     Mat2D u     = mat2D_alloc(A.rows, A.cols);\par
01247     Mat2D inv_l = mat2D_alloc(l.rows, l.cols);\par
01248     Mat2D inv_u = mat2D_alloc(u.rows, u.cols);\par
01249 \par
01250     mat2D_LUP_decomposition_with_swap(A, l, p, u);\par
01251 \par
01252     mat2D_invert(inv_l, l);\par
01253     mat2D_invert(inv_u, u);\par
01254 \par
01255     mat2D_fill(x, 0);   {\cf20 /* x here is only a temp mat*/}\par
01256     mat2D_fill(y, 0);\par
01257     mat2D_dot(x, p, B);\par
01258     mat2D_dot(y, inv_l, x);\par
01259 \par
01260     mat2D_fill(x, 0);\par
01261     mat2D_dot(x, inv_u, y);\par
01262 \par
01263     mat2D_free(y);\par
01264     mat2D_free(l);\par
01265     mat2D_free(p);\par
01266     mat2D_free(u);\par
01267     mat2D_free(inv_l);\par
01268     mat2D_free(inv_u);\par
01269 \}\par
01270 \par
01279 Mat2D_Minor mat2D_minor_alloc_fill_from_mat(Mat2D ref_mat, {\cf18 size_t} i, {\cf18 size_t} j)\par
01280 \{\par
01281     MATRIX2D_ASSERT(ref_mat.cols == ref_mat.rows && {\cf22 "minor is defined only for square matrix"});\par
01282 \par
01283     Mat2D_Minor mm;\par
01284     mm.cols = ref_mat.cols-1;\par
01285     mm.rows = ref_mat.rows-1;\par
01286     mm.stride_r = ref_mat.cols-1;\par
01287     mm.cols_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mat.cols-1));\par
01288     mm.rows_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mat.rows-1));\par
01289     mm.ref_mat = ref_mat;\par
01290 \par
01291     MATRIX2D_ASSERT(mm.cols_list != NULL && mm.rows_list != NULL);\par
01292 \par
01293     {\cf19 for} ({\cf18 size_t} index = 0, temp_index = 0; index < ref_mat.rows; index++) \{\par
01294         {\cf19 if} (index != i) \{\par
01295             mm.rows_list[temp_index] = index;\par
01296             temp_index++;\par
01297         \}\par
01298     \}\par
01299     {\cf19 for} ({\cf18 size_t} jndex = 0, temp_jndex = 0; jndex < ref_mat.rows; jndex++) \{\par
01300         {\cf19 if} (jndex != j) \{\par
01301             mm.cols_list[temp_jndex] = jndex;\par
01302             temp_jndex++;\par
01303         \}\par
01304     \}\par
01305 \par
01306     {\cf19 return} mm;\par
01307 \}\par
01308 \par
01318 Mat2D_Minor mat2D_minor_alloc_fill_from_mat_minor(Mat2D_Minor ref_mm, {\cf18 size_t} i, {\cf18 size_t} j)\par
01319 \{\par
01320     MATRIX2D_ASSERT(ref_mm.cols == ref_mm.rows && {\cf22 "minor is defined only for square matrix"});\par
01321 \par
01322     Mat2D_Minor mm;\par
01323     mm.cols = ref_mm.cols-1;\par
01324     mm.rows = ref_mm.rows-1;\par
01325     mm.stride_r = ref_mm.cols-1;\par
01326     mm.cols_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mm.cols-1));\par
01327     mm.rows_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mm.rows-1));\par
01328     mm.ref_mat = ref_mm.ref_mat;\par
01329 \par
01330     MATRIX2D_ASSERT(mm.cols_list != NULL && mm.rows_list != NULL);\par
01331 \par
01332     {\cf19 for} ({\cf18 size_t} index = 0, temp_index = 0; index < ref_mm.rows; index++) \{\par
01333         {\cf19 if} (index != i) \{\par
01334             mm.rows_list[temp_index] = ref_mm.rows_list[index];\par
01335             temp_index++;\par
01336         \}\par
01337     \}\par
01338     {\cf19 for} ({\cf18 size_t} jndex = 0, temp_jndex = 0; jndex < ref_mm.rows; jndex++) \{\par
01339         {\cf19 if} (jndex != j) \{\par
01340             mm.cols_list[temp_jndex] = ref_mm.cols_list[jndex];\par
01341             temp_jndex++;\par
01342         \}\par
01343     \}\par
01344 \par
01345     {\cf19 return} mm;\par
01346 \}\par
01347 \par
01353 {\cf18 void} mat2D_minor_free(Mat2D_Minor mm)\par
01354 \{\par
01355     free(mm.cols_list);\par
01356     free(mm.rows_list);\par
01357 \}\par
01358 \par
01365 {\cf18 void} mat2D_minor_print(Mat2D_Minor mm, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding)\par
01366 \{\par
01367     printf({\cf22 "%*s%s = [\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
01368     {\cf19 for} ({\cf18 size_t} i = 0; i < mm.rows; ++i) \{\par
01369         printf({\cf22 "%*s    "}, ({\cf18 int}) padding, {\cf22 ""});\par
01370         {\cf19 for} ({\cf18 size_t} j = 0; j < mm.cols; ++j) \{\par
01371             printf({\cf22 "%f "}, MAT2D_MINOR_AT(mm, i, j));\par
01372         \}\par
01373         printf({\cf22 "\\n"});\par
01374     \}\par
01375     printf({\cf22 "%*s]\\n"}, ({\cf18 int}) padding, {\cf22 ""});\par
01376 \}\par
01377 \par
01383 {\cf18 double} mat2D_det_2x2_mat_minor(Mat2D_Minor mm)\par
01384 \{\par
01385     MATRIX2D_ASSERT(2 == mm.cols && 2 == mm.rows && {\cf22 "Not a 2x2 matrix"});\par
01386     {\cf19 return} MAT2D_MINOR_AT(mm, 0, 0) * MAT2D_MINOR_AT(mm, 1, 1) - MAT2D_MINOR_AT(mm, 0, 1) * MAT2D_MINOR_AT(mm, 1, 0);\par
01387 \}\par
01388 \par
01396 {\cf18 double} mat2D_minor_det(Mat2D_Minor mm)\par
01397 \{\par
01398     MATRIX2D_ASSERT(mm.cols == mm.rows && {\cf22 "should be a square matrix"});\par
01399 \par
01400     {\cf18 double} det = 0;\par
01401     {\cf20 /* TODO: finding beast row or col? */}\par
01402     {\cf19 for} ({\cf18 size_t} i = 0, j = 0; i < mm.rows; i++) \{ {\cf20 /* first column */}\par
01403         {\cf19 if} (MAT2D_MINOR_AT(mm, i, j) < 1e-10) {\cf19 continue};\par
01404         Mat2D_Minor sub_mm = mat2D_minor_alloc_fill_from_mat_minor(mm, i, j);\par
01405         {\cf18 int} factor = (i+j)%2 ? -1 : 1;\par
01406         {\cf19 if} (sub_mm.cols != 2) \{\par
01407             MATRIX2D_ASSERT(sub_mm.cols == sub_mm.rows && {\cf22 "should be a square matrix"});\par
01408             det += MAT2D_MINOR_AT(mm, i, j) * (factor) * mat2D_minor_det(sub_mm);\par
01409         \} {\cf19 else} {\cf19 if} (sub_mm.cols == 2 && sub_mm.rows == 2) \{\par
01410             det += MAT2D_MINOR_AT(mm, i, j) * (factor) * mat2D_det_2x2_mat_minor(sub_mm);;\par
01411         \}\par
01412         mat2D_minor_free(sub_mm);\par
01413     \}\par
01414     {\cf19 return} det;\par
01415 \}\par
01416 \par
01417 \par
01418 {\cf21 #endif }{\cf20 // MATRIX2D_IMPLEMENTATION}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
temp.c File Reference\par \pard\plain 
{\tc\tcl2 \v temp.c}
{\xe \v temp.c}
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "./Almog_Draw_Library.h"}\par
{\f2 #include "./display.c"}\par
{\f2 #include "./Matrix2D.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for temp.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "temp_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SETUP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UPDATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RENDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_IMPLEMENTATION}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad} {\b quad1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri} {\b tri}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ALMOG_DRAW_LIBRARY_IMPLEMENTATION\:temp.c}
{\xe \v temp.c\:ALMOG_DRAW_LIBRARY_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 4} of file {\b temp.c}.}\par
}
{\xe \v MATRIX2D_IMPLEMENTATION\:temp.c}
{\xe \v temp.c\:MATRIX2D_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b temp.c}.}\par
}
{\xe \v RENDER\:temp.c}
{\xe \v temp.c\:RENDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RENDER}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b temp.c}.}\par
}
{\xe \v SETUP\:temp.c}
{\xe \v temp.c\:SETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SETUP}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1} of file {\b temp.c}.}\par
}
{\xe \v UPDATE\:temp.c}
{\xe \v temp.c\:UPDATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UPDATE}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2} of file {\b temp.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v render\:temp.c}
{\xe \v temp.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b temp.c}.}\par
{
\ql
References {\b adl_linear_map()}, {\b adl_quad_draw()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b Mat2D::cols}, {\b game_state_t::inv_z_buffer_mat}, {\b MAT2D_AT}, {\b MAT2D_AT_UINT32}, {\b game_state_t::offset_zoom_param}, {\b quad1}, {\b RGB_hexRGB}, {\b Mat2D::rows}, {\b tri}, and {\b game_state_t::window_pixels_mat}.}\par
}
{\xe \v setup\:temp.c}
{\xe \v temp.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b temp.c}.}\par
{
\ql
References {\b Tri::colors}, {\b Quad::colors}, {\b Tri::light_intensity}, {\b Quad::light_intensity}, {\b Tri::points}, {\b Quad::points}, {\b quad1}, {\b Tri::to_draw}, {\b Quad::to_draw}, {\b game_state_t::to_limit_fps}, and {\b tri}.}\par
}
{\xe \v update\:temp.c}
{\xe \v temp.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b temp.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v quad1\:temp.c}
{\xe \v temp.c\:quad1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad} quad1}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 10} of file {\b temp.c}.}\par
{
\ql
Referenced by {\b render()}, and {\b setup()}.}\par
}
{\xe \v tri\:temp.c}
{\xe \v temp.c\:tri}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri} tri}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b temp.c}.}\par
{
\ql
Referenced by {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b render()}, and {\b setup()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
temp.c\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #define SETUP}\par
00002 {\cf21 #define UPDATE}\par
00003 {\cf21 #define RENDER}\par
00004 {\cf21 #define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00005 {\cf21 #include "./Almog_Draw_Library.h"}\par
00006 {\cf21 #include "./display.c"}\par
00007 {\cf21 #define MATRIX2D_IMPLEMENTATION}\par
00008 {\cf21 #include "./Matrix2D.h"}\par
00009 \par
00010 Quad quad1;\par
00011 Tri tri;\par
00012 \par
00013 {\cf18 void} setup(game_state_t *game_state)\par
00014 \{\par
00015     {\cf20 // game_state->const_fps = 30;}\par
00016     game_state->to_limit_fps = 0;\par
00017 \par
00018     quad1.points[3] = (Point)\{200, 100, 1, 1\};\par
00019     quad1.points[2] = (Point)\{600, 50 , 1, 1\};\par
00020     quad1.points[1] = (Point)\{200, 700, 1, 1\};\par
00021     quad1.points[0] = (Point)\{100, 300, 1, 1\};\par
00022     quad1.to_draw = {\cf17 true};\par
00023     quad1.light_intensity[0] = 1;\par
00024     quad1.light_intensity[1] = 1;\par
00025     quad1.light_intensity[2] = 1;\par
00026     quad1.light_intensity[3] = 1;\par
00027     quad1.colors[0] = 0xFFFFFFFF;\par
00028     quad1.colors[1] = 0xFF0000FF;\par
00029     quad1.colors[2] = 0xFF00FF00;\par
00030     quad1.colors[3] = 0xFFFF0000;\par
00031 \par
00032     tri.points[2] = (Point)\{750 , 100, 1, 1\};\par
00033     tri.points[1] = (Point)\{1250, 700, 1, 1\};\par
00034     tri.points[0] = (Point)\{650 , 500, 1, 1\};\par
00035     tri.to_draw = {\cf17 true};\par
00036     tri.light_intensity[0] = 1;\par
00037     tri.light_intensity[1] = 1;\par
00038     tri.light_intensity[2] = 1;\par
00039     tri.colors[0] = 0xFFFFFFFF;\par
00040     tri.colors[1] = 0xFF0000FF;\par
00041     tri.colors[2] = 0xFF00FF00;\par
00042 \par
00043 \}\par
00044 \par
00045 {\cf18 void} update(game_state_t *game_state)\par
00046 \{\par
00047     SDL_Delay(1);\par
00048 \}\par
00049 \par
00050 {\cf18 void} render(game_state_t *game_state)\par
00051 \{\par
00052     adl_quad_fill_interpolate_color_mean_value(game_state->window_pixels_mat, game_state->inv_z_buffer_mat, quad1, game_state->offset_zoom_param);\par
00053     adl_quad_draw(game_state->window_pixels_mat, game_state->inv_z_buffer_mat, quad1, 0xFF000000, game_state->offset_zoom_param);\par
00054 \par
00055     adl_tri_fill_Pinedas_rasterizer_interpolate_color(game_state->window_pixels_mat, game_state->inv_z_buffer_mat, tri, game_state->offset_zoom_param);\par
00056     adl_tri_draw(game_state->window_pixels_mat, tri, 0xff000000, game_state->offset_zoom_param);\par
00057 \par
00058 {\cf21     #if 0}\par
00059     Mat2D inv_z_buffer = game_state->inv_z_buffer_mat;\par
00060     {\cf18 double} max_inv_z = 0;\par
00061     {\cf18 double} min_inv_z = DBL_MAX;\par
00062     {\cf19 for} ({\cf18 size_t} i = 0; i < inv_z_buffer.rows; i++) \{\par
00063         {\cf19 for} ({\cf18 size_t} j = 0; j < inv_z_buffer.cols; j++) \{\par
00064             {\cf19 if} (MAT2D_AT(inv_z_buffer, i, j) > max_inv_z) \{\par
00065                 max_inv_z = MAT2D_AT(inv_z_buffer, i, j);\par
00066             \}\par
00067             {\cf19 if} (MAT2D_AT(inv_z_buffer, i, j) < min_inv_z && MAT2D_AT(inv_z_buffer, i, j) > 0) \{\par
00068                 min_inv_z = MAT2D_AT(inv_z_buffer, i, j);\par
00069             \}\par
00070         \}\par
00071     \}\par
00072     {\cf19 for} ({\cf18 size_t} i = 0; i < inv_z_buffer.rows; i++) \{\par
00073         {\cf19 for} ({\cf18 size_t} j = 0; j < inv_z_buffer.cols; j++) \{\par
00074             {\cf18 double} z_fraq = MAT2D_AT(inv_z_buffer, i, j);\par
00075             z_fraq = fmax(z_fraq, min_inv_z);\par
00076             z_fraq = adl_linear_map(z_fraq, min_inv_z, max_inv_z, 0.1, 1);\par
00077             uint32_t color = RGB_hexRGB(0xFF*z_fraq, 0xFF*z_fraq, 0xFF*z_fraq); \par
00078             MAT2D_AT_UINT32(game_state->window_pixels_mat, i, j) = color;\par
00079         \}\par
00080     \}\par
00081 {\cf21     #endif}\par
00082 \}\par
00083 \par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}