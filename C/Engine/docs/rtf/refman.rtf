{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Almog Engine }Almog Engine}
{\comment Generated by doxygen1.9.1.}
{\creatim \yr2025\mo10\dy28\hr23\min4\sec16}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Almog Engine}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Oct 28 2025 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Camera} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Curve} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Curve_ada} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Figure} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b game_state_t} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Grid} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Light_source} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mat2D} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mat2D_Minor} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mat2D_uint32} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Material} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Offset_zoom_param} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Point} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Quad} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Quad_mesh} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Quad_mesh_array} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Scene} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Tri} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Tri_mesh} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Tri_mesh_array} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b src/{\b grid_example.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b teapot_example.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b temp.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/include/{\b Almog_Draw_Library.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Immediate-mode 2D/3D raster helpers for drawing onto {\b Mat2D_uint32} pixel buffers })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/include/{\b Almog_Dynamic_Array.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header-only C macros that implement a simple dynamic array })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/include/{\b Almog_Engine.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Software 3D rendering and scene utilities for meshes, camera, and projection })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/include/{\b Almog_String_Manipulation.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lightweight string and line manipulation helpers })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/include/{\b display.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/include/{\b Matrix2D.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A single-header C library for simple 2D matrix operations on doubles and uint32_t, including allocation, basic arithmetic, linear algebra, and helpers (LUP, inverse, determinant, DCM, etc.) })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Camera Struct Reference\par \pard\plain 
{\tc\tcl2 \v Camera}
{\xe \v Camera}
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
\par
{
{\f2 #include <Almog_Engine.h>}}\par
Collaboration diagram for Camera:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCamera__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b init_position}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b current_position}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b offset_position}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b direction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b z_near}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b z_far}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b fov_deg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b aspect_ratio}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b roll_offset_deg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b pitch_offset_deg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b yaw_offset_deg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b camera_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b camera_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b camera_z}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 144} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v aspect_ratio\:Camera}
{\xe \v Camera\:aspect_ratio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::aspect_ratio}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 152} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_scene_init()}, {\b check_window_mat_size()}, and {\b update()}.}\par
}
{\xe \v camera_x\:Camera}
{\xe \v Camera\:camera_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::camera_x}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 156} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v camera_y\:Camera}
{\xe \v Camera\:camera_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::camera_y}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 157} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v camera_z\:Camera}
{\xe \v Camera\:camera_z}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::camera_z}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 158} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v current_position\:Camera}
{\xe \v Camera\:current_position}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::current_position}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 146} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_project_world2screen()}, {\b ae_tri_calc_light_intensity()}, {\b ae_tri_project_world2screen()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v direction\:Camera}
{\xe \v Camera\:direction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::direction}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 148} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v fov_deg\:Camera}
{\xe \v Camera\:fov_deg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::fov_deg}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 151} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_scene_init()}, and {\b update()}.}\par
}
{\xe \v init_position\:Camera}
{\xe \v Camera\:init_position}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::init_position}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 145} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, and {\b ae_camera_reset_pos()}.}\par
}
{\xe \v offset_position\:Camera}
{\xe \v Camera\:offset_position}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Camera::offset_position}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 147} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_view_mat_set()}, and {\b process_input_window()}.}\par
}
{\xe \v pitch_offset_deg\:Camera}
{\xe \v Camera\:pitch_offset_deg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::pitch_offset_deg}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 154} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_view_mat_set()}, and {\b process_input_window()}.}\par
}
{\xe \v roll_offset_deg\:Camera}
{\xe \v Camera\:roll_offset_deg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::roll_offset_deg}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 153} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_view_mat_set()}, and {\b process_input_window()}.}\par
}
{\xe \v yaw_offset_deg\:Camera}
{\xe \v Camera\:yaw_offset_deg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::yaw_offset_deg}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 155} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v z_far\:Camera}
{\xe \v Camera\:z_far}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::z_far}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 150} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_scene_init()}, and {\b update()}.}\par
}
{\xe \v z_near\:Camera}
{\xe \v Camera\:z_near}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Camera::z_near}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 149} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_init()}, {\b ae_line_project_world2screen()}, {\b ae_quad_project_world2screen()}, {\b ae_scene_init()}, {\b ae_tri_project_world2screen()}, and {\b update()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Engine.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Curve Struct Reference\par \pard\plain 
{\tc\tcl2 \v Curve}
{\xe \v Curve}
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Curve:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCurve__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 60} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Curve}
{\xe \v Curve\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve::capacity}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v color\:Curve}
{\xe \v Curve\:color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Curve::color}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curve_add_to_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v elements\:Curve}
{\xe \v Curve\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point}* Curve::elements}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, {\b adl_grid_draw()}, {\b ae_curve_copy()}, {\b ae_curve_project_world2screen()}, {\b ae_print_points()}, and {\b ae_tri_mesh_get_from_obj_file()}.}\par
}
{\xe \v length\:Curve}
{\xe \v Curve\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve::length}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, {\b adl_grid_draw()}, {\b ae_curve_copy()}, {\b ae_curve_project_world2screen()}, and {\b ae_print_points()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Curve_ada Struct Reference\par \pard\plain 
{\tc\tcl2 \v Curve_ada}
{\xe \v Curve_ada}
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Curve_ada:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCurve__ada__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 70} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Curve_ada}
{\xe \v Curve_ada\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve_ada::capacity}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 72} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v elements\:Curve_ada}
{\xe \v Curve_ada\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve}* Curve_ada::elements}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 73} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, {\b adl_grid_draw()}, {\b ae_curve_ada_project_world2screen()}, and {\b ae_grid_project_world2screen()}.}\par
}
{\xe \v length\:Curve_ada}
{\xe \v Curve_ada\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Curve_ada::length}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 71} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curves_plot_on_figure()}, {\b adl_grid_draw()}, {\b ae_curve_ada_project_world2screen()}, and {\b ae_grid_project_world2screen()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Figure Struct Reference\par \pard\plain 
{\tc\tcl2 \v Figure}
{\xe \v Figure}
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Figure:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structFigure__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b min_x_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b max_x_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b min_y_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b max_y_pixel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b x_axis_head_size}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b y_axis_head_size}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Offset_zoom_param} {\b offset_zoom_param}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve_ada} {\b src_curve_array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b top_left_position}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_uint32} {\b pixels_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b inv_z_buffer_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b background_color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw_axis}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw_max_min_values}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 118} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v background_color\:Figure}
{\xe \v Figure\:background_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Figure::background_color}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 134} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v inv_z_buffer_mat\:Figure}
{\xe \v Figure\:inv_z_buffer_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Figure::inv_z_buffer_mat}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 133} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, and {\b adl_figure_alloc()}.}\par
}
{\xe \v max_x\:Figure}
{\xe \v Figure\:max_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::max_x}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 124} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v max_x_pixel\:Figure}
{\xe \v Figure\:max_x_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::max_x_pixel}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 120} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v max_y\:Figure}
{\xe \v Figure\:max_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::max_y}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 126} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v max_y_pixel\:Figure}
{\xe \v Figure\:max_y_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::max_y_pixel}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 122} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_x\:Figure}
{\xe \v Figure\:min_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::min_x}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 123} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_x_pixel\:Figure}
{\xe \v Figure\:min_x_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::min_x_pixel}}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 119} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_y\:Figure}
{\xe \v Figure\:min_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Figure::min_y}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 125} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v min_y_pixel\:Figure}
{\xe \v Figure\:min_y_pixel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::min_y_pixel}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 121} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v offset_zoom_param\:Figure}
{\xe \v Figure\:offset_zoom_param}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Offset_zoom_param} Figure::offset_zoom_param}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 129} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v pixels_mat\:Figure}
{\xe \v Figure\:pixels_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_uint32} Figure::pixels_mat}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 132} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b adl_figure_copy_to_screen()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v src_curve_array\:Figure}
{\xe \v Figure\:src_curve_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve_ada} Figure::src_curve_array}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 130} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, and {\b adl_figure_alloc()}.}\par
}
{\xe \v to_draw_axis\:Figure}
{\xe \v Figure\:to_draw_axis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Figure::to_draw_axis}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 135} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v to_draw_max_min_values\:Figure}
{\xe \v Figure\:to_draw_max_min_values}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Figure::to_draw_max_min_values}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 136} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v top_left_position\:Figure}
{\xe \v Figure\:top_left_position}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Figure::top_left_position}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 131} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_figure_alloc()}, and {\b adl_figure_copy_to_screen()}.}\par
}
{\xe \v x_axis_head_size\:Figure}
{\xe \v Figure\:x_axis_head_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::x_axis_head_size}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 127} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_axis_draw_on_figure()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v y_axis_head_size\:Figure}
{\xe \v Figure\:y_axis_head_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Figure::y_axis_head_size}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 128} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_axis_draw_on_figure()}, and {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
game_state_t Struct Reference\par \pard\plain 
{\tc\tcl2 \v game_state_t}
{\xe \v game_state_t}
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
Collaboration diagram for game_state_t:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structgame__state__t__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b game_is_running}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b delta_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b elapsed_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b const_fps}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b fps}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b frame_target_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_render}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_update}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b previous_frame_time}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b left_button_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_limit_fps}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b to_clear_renderer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b space_bar_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b w_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b s_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b a_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b d_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b e_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b q_was_pressed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Window * {\b window}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b window_w}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b window_h}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Renderer * {\b renderer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Surface * {\b window_surface}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SDL_Texture * {\b window_texture}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_uint32} {\b window_pixels_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b inv_z_buffer_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Scene} {\b scene}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 38} of file {\b display.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v a_was_pressed\:game_state_t}
{\xe \v game_state_t\:a_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::a_was_pressed}}
\par
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 55} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v const_fps\:game_state_t}
{\xe \v game_state_t\:const_fps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::const_fps}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, {\b setup()}, and {\b update_window()}.}\par
}
{\xe \v d_was_pressed\:game_state_t}
{\xe \v game_state_t\:d_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::d_was_pressed}}
\par
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 56} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v delta_time\:game_state_t}
{\xe \v game_state_t\:delta_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::delta_time}}
\par
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, and {\b update_window()}.}\par
}
{\xe \v e_was_pressed\:game_state_t}
{\xe \v game_state_t\:e_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::e_was_pressed}}
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 57} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v elapsed_time\:game_state_t}
{\xe \v game_state_t\:elapsed_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::elapsed_time}}
\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b update_window()}.}\par
}
{\xe \v fps\:game_state_t}
{\xe \v game_state_t\:fps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::fps}}
\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b update_window()}.}\par
}
{\xe \v frame_target_time\:game_state_t}
{\xe \v game_state_t\:frame_target_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float game_state_t::frame_target_time}}
\par
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, and {\b update_window()}.}\par
}
{\xe \v game_is_running\:game_state_t}
{\xe \v game_state_t\:game_is_running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::game_is_running}}
\par
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 39} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v inv_z_buffer_mat\:game_state_t}
{\xe \v game_state_t\:inv_z_buffer_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} game_state_t::inv_z_buffer_mat}}
\par
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b destroy_window()}, {\b render()}, {\b render_window()}, and {\b setup_window()}.}\par
}
{\xe \v left_button_pressed\:game_state_t}
{\xe \v game_state_t\:left_button_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::left_button_pressed}}
\par
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 48} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v previous_frame_time\:game_state_t}
{\xe \v game_state_t\:previous_frame_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t game_state_t::previous_frame_time}}
\par
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v q_was_pressed\:game_state_t}
{\xe \v game_state_t\:q_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::q_was_pressed}}
\par
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 58} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v renderer\:game_state_t}
{\xe \v game_state_t\:renderer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Renderer* game_state_t::renderer}}
\par
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b display.c}.}\par
{
\ql
Referenced by {\b destroy_window()}, {\b initialize_window()}, and {\b main()}.}\par
}
{\xe \v s_was_pressed\:game_state_t}
{\xe \v game_state_t\:s_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::s_was_pressed}}
\par
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 54} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v scene\:game_state_t}
{\xe \v game_state_t\:scene}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Scene} game_state_t::scene}}
\par
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 71} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b destroy_window()}, {\b process_input_window()}, {\b render()}, {\b setup()}, {\b setup_window()}, and {\b update()}.}\par
}
{\xe \v space_bar_was_pressed\:game_state_t}
{\xe \v game_state_t\:space_bar_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::space_bar_was_pressed}}
\par
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v to_clear_renderer\:game_state_t}
{\xe \v game_state_t\:to_clear_renderer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_clear_renderer}}
\par
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b render_window()}.}\par
}
{\xe \v to_limit_fps\:game_state_t}
{\xe \v game_state_t\:to_limit_fps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_limit_fps}}
\par
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b display.c}.}\par
{
\ql
Referenced by {\b fix_framerate()}, {\b main()}, {\b setup()}, and {\b update_window()}.}\par
}
{\xe \v to_render\:game_state_t}
{\xe \v game_state_t\:to_render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_render}}
\par
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v to_update\:game_state_t}
{\xe \v game_state_t\:to_update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::to_update}}
\par
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}, and {\b process_input_window()}.}\par
}
{\xe \v w_was_pressed\:game_state_t}
{\xe \v game_state_t\:w_was_pressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::w_was_pressed}}
\par
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b display.c}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v window\:game_state_t}
{\xe \v game_state_t\:window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Window* game_state_t::window}}
\par
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 60} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b destroy_window()}, {\b initialize_window()}, {\b main()}, {\b render_window()}, {\b setup_window()}, and {\b update_window()}.}\par
}
{\xe \v window_h\:game_state_t}
{\xe \v game_state_t\:window_h}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::window_h}}
\par
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b initialize_window()}, {\b main()}, {\b setup_window()}, {\b update()}, and {\b update_window()}.}\par
}
{\xe \v window_pixels_mat\:game_state_t}
{\xe \v game_state_t\:window_pixels_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_uint32} game_state_t::window_pixels_mat}}
\par
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 68} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b destroy_window()}, {\b render()}, {\b render_window()}, and {\b setup_window()}.}\par
}
{\xe \v window_surface\:game_state_t}
{\xe \v game_state_t\:window_surface}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Surface* game_state_t::window_surface}}
\par
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 65} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b destroy_window()}, and {\b setup_window()}.}\par
}
{\xe \v window_texture\:game_state_t}
{\xe \v game_state_t\:window_texture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SDL_Texture* game_state_t::window_texture}}
\par
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 66} of file {\b display.c}.}\par
{
\ql
Referenced by {\b destroy_window()}.}\par
}
{\xe \v window_w\:game_state_t}
{\xe \v game_state_t\:window_w}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int game_state_t::window_w}}
\par
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b display.c}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, {\b initialize_window()}, {\b main()}, {\b setup_window()}, {\b update()}, and {\b update_window()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b display.c}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Grid Struct Reference\par \pard\plain 
{\tc\tcl2 \v Grid}
{\xe \v Grid}
{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Grid:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structGrid__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curve_ada} {\b curves}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_e1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_e1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b min_e2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b max_e2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b num_samples_e1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b num_samples_e2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b de1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b de2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b plane} [3]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 139} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v curves\:Grid}
{\xe \v Grid\:curves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Curve_ada} Grid::curves}}
\par
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 140} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}, {\b adl_grid_draw()}, and {\b ae_grid_project_world2screen()}.}\par
}
{\xe \v de1\:Grid}
{\xe \v Grid\:de1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::de1}}
\par
{\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 147} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v de2\:Grid}
{\xe \v Grid\:de2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::de2}}
\par
{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 148} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v max_e1\:Grid}
{\xe \v Grid\:max_e1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::max_e1}}
\par
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 142} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v max_e2\:Grid}
{\xe \v Grid\:max_e2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::max_e2}}
\par
{\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 144} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v min_e1\:Grid}
{\xe \v Grid\:min_e1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::min_e1}}
\par
{\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 141} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v min_e2\:Grid}
{\xe \v Grid\:min_e2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Grid::min_e2}}
\par
{\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 143} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v num_samples_e1\:Grid}
{\xe \v Grid\:num_samples_e1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Grid::num_samples_e1}}
\par
{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 145} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v num_samples_e2\:Grid}
{\xe \v Grid\:num_samples_e2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Grid::num_samples_e2}}
\par
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 146} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\xe \v plane\:Grid}
{\xe \v Grid\:plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Grid::plane[3]}}
\par
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 149} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Light_source Struct Reference\par \pard\plain 
{\tc\tcl2 \v Light_source}
{\xe \v Light_source}
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
\par
{
{\f2 #include <Almog_Engine.h>}}\par
Collaboration diagram for Light_source:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structLight__source__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b light_direction_or_pos}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b light_intensity}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 161} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v light_direction_or_pos\:Light_source}
{\xe \v Light_source\:light_direction_or_pos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Light_source::light_direction_or_pos}}
\par
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 162} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_quad_project_world2screen()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v light_intensity\:Light_source}
{\xe \v Light_source\:light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Light_source::light_intensity}}
\par
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 163} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Engine.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mat2D Struct Reference\par \pard\plain 
{\tc\tcl2 \v Mat2D}
{\xe \v Mat2D}
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles. }}\par
{
{\f2 #include <Matrix2D.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cols}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b stride_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
rows: number of rows (height)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cols: number of columns (width)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
stride_r: number of elements between successive rows in memory (for contiguous storage, stride_r == cols)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
elements: pointer to contiguous storage of size rows * cols \par}
\par
}{
Definition at line {\b 81} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cols\:Mat2D}
{\xe \v Mat2D\:cols}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D::cols}}
\par
{\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 83} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b ae_point_to_mat2D()}, {\b ae_projection_mat_set()}, {\b ae_quad_calc_normal()}, {\b ae_tri_calc_normal()}, {\b ae_z_buffer_copy_to_screen()}, {\b mat2D_add()}, {\b mat2D_add_col_to_col()}, {\b mat2D_add_row_time_factor_to_row()}, {\b mat2D_add_row_to_row()}, {\b mat2D_alloc()}, {\b mat2D_calc_norma()}, {\b mat2D_col_is_all_digit()}, {\b mat2D_copy()}, {\b mat2D_copy_mat_to_mat_at_window()}, {\b mat2D_cross()}, {\b mat2D_det()}, {\b mat2D_det_2x2_mat()}, {\b mat2D_dot()}, {\b mat2D_dot_product()}, {\b mat2D_fill()}, {\b mat2D_fill_sequence()}, {\b mat2D_get_col()}, {\b mat2D_get_row()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, {\b mat2D_mat_is_all_digit()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_mult()}, {\b mat2D_mult_row()}, {\b mat2D_offset2d()}, {\b mat2D_print()}, {\b mat2D_print_as_col()}, {\b mat2D_rand()}, {\b mat2D_row_is_all_digit()}, {\b mat2D_set_identity()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, {\b mat2D_set_rot_mat_z()}, {\b mat2D_solve_linear_sys_LUP_decomposition()}, {\b mat2D_sub()}, {\b mat2D_sub_col_to_col()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_sub_row_to_row()}, {\b mat2D_swap_rows()}, {\b mat2D_transpose()}, {\b mat2D_triangulate()}, and {\b render_window()}.}\par
}
{\xe \v elements\:Mat2D}
{\xe \v Mat2D\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double* Mat2D::elements}}
\par
{\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 85} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b mat2D_alloc()}, {\b mat2D_free()}, {\b mat2D_print_as_col()}, and {\b render_window()}.}\par
}
{\xe \v rows\:Mat2D}
{\xe \v Mat2D\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D::rows}}
\par
{\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 82} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_alloc()}, {\b ae_point_to_mat2D()}, {\b ae_projection_mat_set()}, {\b ae_quad_calc_normal()}, {\b ae_tri_calc_normal()}, {\b ae_z_buffer_copy_to_screen()}, {\b mat2D_add()}, {\b mat2D_add_col_to_col()}, {\b mat2D_add_row_to_row()}, {\b mat2D_alloc()}, {\b mat2D_calc_norma()}, {\b mat2D_copy()}, {\b mat2D_copy_mat_to_mat_at_window()}, {\b mat2D_cross()}, {\b mat2D_det()}, {\b mat2D_det_2x2_mat()}, {\b mat2D_dot()}, {\b mat2D_dot_product()}, {\b mat2D_fill()}, {\b mat2D_fill_sequence()}, {\b mat2D_get_col()}, {\b mat2D_get_row()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, {\b mat2D_mat_is_all_digit()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_mult()}, {\b mat2D_offset2d()}, {\b mat2D_print()}, {\b mat2D_print_as_col()}, {\b mat2D_rand()}, {\b mat2D_set_identity()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, {\b mat2D_set_rot_mat_z()}, {\b mat2D_solve_linear_sys_LUP_decomposition()}, {\b mat2D_sub()}, {\b mat2D_sub_col_to_col()}, {\b mat2D_sub_row_to_row()}, {\b mat2D_transpose()}, {\b mat2D_triangulate()}, and {\b render_window()}.}\par
}
{\xe \v stride_r\:Mat2D}
{\xe \v Mat2D\:stride_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D::stride_r}}
\par
{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 84} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_alloc()}, and {\b mat2D_offset2d()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Matrix2D.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mat2D_Minor Struct Reference\par \pard\plain 
{\tc\tcl2 \v Mat2D_Minor}
{\xe \v Mat2D_Minor}
{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix. }}\par
{
{\f2 #include <Matrix2D.h>}}\par
Collaboration diagram for Mat2D_Minor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structMat2D__Minor__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cols}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b stride_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t * {\b rows_list}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t * {\b cols_list}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b ref_mat}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a minor by excluding one row and one column of a reference matrix. It holds index lists mapping into the reference matrix, without owning the data of the reference matrix itself.\par
Memory ownership:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
rows_list and cols_list are heap-allocated by minor allocators and must be freed with mat2D_minor_free.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The underlying matrix data (ref_mat.elements) is not owned by the minor and must not be freed by the minor functions. \par}
\par
}{
Definition at line {\b 119} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cols\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:cols}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_Minor::cols}}
\par
{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 121} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_det_2x2_mat_minor()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, {\b mat2D_minor_det()}, and {\b mat2D_minor_print()}.}\par
}
{\xe \v cols_list\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:cols_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t* Mat2D_Minor::cols_list}}
\par
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 124} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, and {\b mat2D_minor_free()}.}\par
}
{\xe \v ref_mat\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:ref_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Mat2D_Minor::ref_mat}}
\par
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 125} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, and {\b mat2D_minor_alloc_fill_from_mat_minor()}.}\par
}
{\xe \v rows\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_Minor::rows}}
\par
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 120} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_det_2x2_mat_minor()}, {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, {\b mat2D_minor_det()}, and {\b mat2D_minor_print()}.}\par
}
{\xe \v rows_list\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:rows_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t* Mat2D_Minor::rows_list}}
\par
{\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 123} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, and {\b mat2D_minor_free()}.}\par
}
{\xe \v stride_r\:Mat2D_Minor}
{\xe \v Mat2D_Minor\:stride_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_Minor::stride_r}}
\par
{\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 122} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_minor_alloc_fill_from_mat()}, and {\b mat2D_minor_alloc_fill_from_mat_minor()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Matrix2D.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mat2D_uint32 Struct Reference\par \pard\plain 
{\tc\tcl2 \v Mat2D_uint32}
{\xe \v Mat2D_uint32}
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t. }}\par
{
{\f2 #include <Matrix2D.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cols}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b stride_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
rows: number of rows (height)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cols: number of columns (width)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
stride_r: number of elements between successive rows in memory (for contiguous storage, stride_r == cols)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
elements: pointer to contiguous storage of size rows * cols \par}
\par
}{
Definition at line {\b 98} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cols\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:cols}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_uint32::cols}}
\par
{\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 100} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_figure_alloc()}, {\b adl_figure_copy_to_screen()}, {\b adl_line_draw()}, {\b adl_point_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b mat2D_alloc_uint32()}, {\b mat2D_fill_uint32()}, {\b mat2D_offset2d_uint32()}, and {\b render_window()}.}\par
}
{\xe \v elements\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t* Mat2D_uint32::elements}}
\par
{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 102} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b copy_mat_to_surface_RGB()}, {\b mat2D_alloc_uint32()}, {\b mat2D_free_uint32()}, and {\b render_window()}.}\par
}
{\xe \v rows\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_uint32::rows}}
\par
{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 99} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_axis_draw_on_figure()}, {\b adl_figure_alloc()}, {\b adl_figure_copy_to_screen()}, {\b adl_line_draw()}, {\b adl_max_min_values_draw_on_figure()}, {\b adl_point_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b check_window_mat_size()}, {\b copy_mat_to_surface_RGB()}, {\b mat2D_alloc_uint32()}, {\b mat2D_fill_uint32()}, {\b mat2D_offset2d_uint32()}, and {\b render_window()}.}\par
}
{\xe \v stride_r\:Mat2D_uint32}
{\xe \v Mat2D_uint32\:stride_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Mat2D_uint32::stride_r}}
\par
{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 101} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_alloc_uint32()}, and {\b mat2D_offset2d_uint32()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Matrix2D.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Material Struct Reference\par \pard\plain 
{\tc\tcl2 \v Material}
{\xe \v Material}
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
\par
{
{\f2 #include <Almog_Engine.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b specular_power_alpha}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b c_ambi}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b c_diff}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b c_spec}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 166} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v c_ambi\:Material}
{\xe \v Material\:c_ambi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Material::c_ambi}}
\par
{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 168} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v c_diff\:Material}
{\xe \v Material\:c_diff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Material::c_diff}}
\par
{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 169} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v c_spec\:Material}
{\xe \v Material\:c_spec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Material::c_spec}}
\par
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 170} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v specular_power_alpha\:Material}
{\xe \v Material\:specular_power_alpha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Material::specular_power_alpha}}
\par
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 167} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Engine.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Offset_zoom_param Struct Reference\par \pard\plain 
{\tc\tcl2 \v Offset_zoom_param}
{\xe \v Offset_zoom_param}
{\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b zoom_multiplier}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b offset_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b offset_y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mouse_x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mouse_y}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 40} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v mouse_x\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:mouse_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Offset_zoom_param::mouse_x}}
\par
{\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v mouse_y\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:mouse_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Offset_zoom_param::mouse_y}}
\par
{\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v offset_x\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:offset_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Offset_zoom_param::offset_x}}
\par
{\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_line_draw()}, and {\b adl_point_draw()}.}\par
}
{\xe \v offset_y\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:offset_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Offset_zoom_param::offset_y}}
\par
{\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_line_draw()}, and {\b adl_point_draw()}.}\par
}
{\xe \v zoom_multiplier\:Offset_zoom_param}
{\xe \v Offset_zoom_param\:zoom_multiplier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Offset_zoom_param::zoom_multiplier}}
\par
{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_line_draw()}, and {\b adl_point_draw()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Point Struct Reference\par \pard\plain 
{\tc\tcl2 \v Point}
{\xe \v Point}
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b x}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b y}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b z}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b w}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 50} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v w\:Point}
{\xe \v Point\:w}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::w}}
\par
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 54} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_point_normalize_xyz()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_get_average_normal()}, {\b ae_quad_get_average_point()}, {\b ae_quad_transform_to_view()}, {\b ae_scene_init()}, {\b ae_tri_calc_light_intensity()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_get_average_normal()}, {\b ae_tri_get_average_point()}, {\b ae_tri_project_world2screen()}, and {\b ae_tri_transform_to_view()}.}\par
}
{\xe \v x\:Point}
{\xe \v Point\:x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::x}}
\par
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 51} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_copy_to_screen()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tan_half_angle()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_mat2D_to_point()}, {\b ae_point_normalize_xyz()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_point_to_mat2D()}, {\b ae_print_points()}, {\b ae_print_tri()}, {\b ae_quad_get_average_normal()}, {\b ae_quad_get_average_point()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_transform_to_view()}, {\b ae_scene_init()}, {\b ae_signed_dist_point_and_plane()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_get_average_normal()}, {\b ae_tri_get_average_point()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_stl_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_mesh_set_bounding_box()}, {\b ae_tri_mesh_translate()}, {\b ae_tri_project_world2screen()}, and {\b ae_tri_transform_to_view()}.}\par
}
{\xe \v y\:Point}
{\xe \v Point\:y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::y}}
\par
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_curve_add_to_figure()}, {\b adl_curves_plot_on_figure()}, {\b adl_figure_copy_to_screen()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tan_half_angle()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_point_normalize_xyz()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_point_to_mat2D()}, {\b ae_print_points()}, {\b ae_print_tri()}, {\b ae_quad_get_average_normal()}, {\b ae_quad_get_average_point()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_transform_to_view()}, {\b ae_scene_init()}, {\b ae_signed_dist_point_and_plane()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_get_average_normal()}, {\b ae_tri_get_average_point()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_stl_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_mesh_set_bounding_box()}, {\b ae_tri_mesh_translate()}, {\b ae_tri_project_world2screen()}, and {\b ae_tri_transform_to_view()}.}\par
}
{\xe \v z\:Point}
{\xe \v Point\:z}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Point::z}}
\par
{\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_cartesian_grid_create()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_point_normalize_xyz()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_point_to_mat2D()}, {\b ae_print_points()}, {\b ae_print_tri()}, {\b ae_quad_get_average_normal()}, {\b ae_quad_get_average_point()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_transform_to_view()}, {\b ae_scene_init()}, {\b ae_signed_dist_point_and_plane()}, {\b ae_tri_compare()}, {\b ae_tri_get_average_normal()}, {\b ae_tri_get_average_point()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_stl_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_mesh_set_bounding_box()}, {\b ae_tri_mesh_translate()}, {\b ae_tri_project_world2screen()}, and {\b ae_tri_transform_to_view()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Quad Struct Reference\par \pard\plain 
{\tc\tcl2 \v Quad}
{\xe \v Quad}
{\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Quad:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structQuad__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b points} [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b normals} [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b colors} [4]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b light_intensity} [4]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 91} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v colors\:Quad}
{\xe \v Quad\:colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Quad::colors[4]}}
\par
{\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 94} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b ae_quad_clip_with_plane()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\xe \v light_intensity\:Quad}
{\xe \v Quad\:light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Quad::light_intensity[4]}}
\par
{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 96} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_project_world2screen()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\xe \v normals\:Quad}
{\xe \v Quad\:normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Quad::normals[4]}}
\par
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 93} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_quad_get_average_normal()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_set_normals()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\xe \v points\:Quad}
{\xe \v Quad\:points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Quad::points[4]}}
\par
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 92} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_calc_normal()}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_get_average_point()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_set_normals()}, {\b ae_quad_transform_to_view()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\xe \v to_draw\:Quad}
{\xe \v Quad\:to_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Quad::to_draw}}
\par
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 95} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, {\b adl_quad2tris()}, {\b adl_quad_mesh_draw()}, {\b adl_quad_mesh_fill()}, {\b adl_quad_mesh_fill_interpolate_color()}, {\b adl_quad_mesh_fill_interpolate_normal()}, {\b ae_quad_project_world2screen()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Quad_mesh Struct Reference\par \pard\plain 
{\tc\tcl2 \v Quad_mesh}
{\xe \v Quad_mesh}
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Quad_mesh:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structQuad__mesh__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 111} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Quad_mesh}
{\xe \v Quad_mesh\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Quad_mesh::capacity}}
\par
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v elements\:Quad_mesh}
{\xe \v Quad_mesh\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad}* Quad_mesh::elements}}
\par
{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 114} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_draw()}, {\b adl_quad_mesh_fill()}, {\b adl_quad_mesh_fill_interpolate_color()}, {\b adl_quad_mesh_fill_interpolate_normal()}, {\b ae_quad_mesh_project_world2screen()}, {\b ae_quad_project_world2screen()}, {\b ae_scene_free()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\xe \v length\:Quad_mesh}
{\xe \v Quad_mesh\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Quad_mesh::length}}
\par
{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 112} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_draw()}, {\b adl_quad_mesh_fill()}, {\b adl_quad_mesh_fill_interpolate_color()}, {\b adl_quad_mesh_fill_interpolate_normal()}, {\b ae_quad_mesh_project_world2screen()}, {\b ae_quad_project_world2screen()}, and {\b ae_tri_mesh_get_from_quad_mesh()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Quad_mesh_array Struct Reference\par \pard\plain 
{\tc\tcl2 \v Quad_mesh_array}
{\xe \v Quad_mesh_array}
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
\par
{
{\f2 #include <Almog_Engine.h>}}\par
Collaboration diagram for Quad_mesh_array:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structQuad__mesh__array__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad_mesh} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 137} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Quad_mesh_array}
{\xe \v Quad_mesh_array\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Quad_mesh_array::capacity}}
\par
{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 139} of file {\b Almog_Engine.h}.}\par
}
{\xe \v elements\:Quad_mesh_array}
{\xe \v Quad_mesh_array\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad_mesh}* Quad_mesh_array::elements}}
\par
{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 140} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}.}\par
}
{\xe \v length\:Quad_mesh_array}
{\xe \v Quad_mesh_array\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Quad_mesh_array::length}}
\par
{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 138} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Engine.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Scene Struct Reference\par \pard\plain 
{\tc\tcl2 \v Scene}
{\xe \v Scene}
{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
\par
{
{\f2 #include <Almog_Engine.h>}}\par
Collaboration diagram for Scene:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structScene__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh_array} {\b in_world_tri_meshes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh_array} {\b projected_tri_meshes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh_array} {\b original_tri_meshes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad_mesh_array} {\b in_world_quad_meshes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad_mesh_array} {\b projected_quad_meshes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad_mesh_array} {\b original_quad_meshes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Camera} {\b camera}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b up_direction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b proj_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b view_mat}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Light_source} {\b light_source0}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Material} {\b material0}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 173} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v camera\:Scene}
{\xe \v Scene\:camera}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Camera} Scene::camera}}
\par
{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 182} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_camera_free()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_line_project_world2screen()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_project_world2screen()}, {\b ae_scene_init()}, {\b ae_tri_calc_light_intensity()}, {\b ae_tri_project_world2screen()}, {\b check_window_mat_size()}, {\b process_input_window()}, and {\b update()}.}\par
}
{\xe \v in_world_quad_meshes\:Scene}
{\xe \v Scene\:in_world_quad_meshes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad_mesh_array} Scene::in_world_quad_meshes}}
\par
{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 178} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}.}\par
}
{\xe \v in_world_tri_meshes\:Scene}
{\xe \v Scene\:in_world_tri_meshes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh_array} Scene::in_world_tri_meshes}}
\par
{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 174} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b render()}, {\b setup()}, and {\b update()}.}\par
}
{\xe \v light_source0\:Scene}
{\xe \v Scene\:light_source0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Light_source} Scene::light_source0}}
\par
{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 187} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_quad_project_world2screen()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v material0\:Scene}
{\xe \v Scene\:material0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Material} Scene::material0}}
\par
{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 188} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_scene_init()}, and {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v original_quad_meshes\:Scene}
{\xe \v Scene\:original_quad_meshes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad_mesh_array} Scene::original_quad_meshes}}
\par
{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 180} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}.}\par
}
{\xe \v original_tri_meshes\:Scene}
{\xe \v Scene\:original_tri_meshes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh_array} Scene::original_tri_meshes}}
\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 176} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, and {\b setup()}.}\par
}
{\xe \v proj_mat\:Scene}
{\xe \v Scene\:proj_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Scene::proj_mat}}
\par
{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 184} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b ae_scene_init()}, and {\b update()}.}\par
}
{\xe \v projected_quad_meshes\:Scene}
{\xe \v Scene\:projected_quad_meshes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad_mesh_array} Scene::projected_quad_meshes}}
\par
{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 179} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}.}\par
}
{\xe \v projected_tri_meshes\:Scene}
{\xe \v Scene\:projected_tri_meshes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh_array} Scene::projected_tri_meshes}}
\par
{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 175} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b render()}, {\b setup()}, and {\b update()}.}\par
}
{\xe \v up_direction\:Scene}
{\xe \v Scene\:up_direction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Scene::up_direction}}
\par
{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 183} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b ae_scene_init()}, and {\b update()}.}\par
}
{\xe \v view_mat\:Scene}
{\xe \v Scene\:view_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} Scene::view_mat}}
\par
{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 185} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b ae_scene_init()}, and {\b update()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Engine.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Tri Struct Reference\par \pard\plain 
{\tc\tcl2 \v Tri}
{\xe \v Tri}
{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Tri:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structTri__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b points} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b tex_points} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b normals} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b colors} [3]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b to_draw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b light_intensity} [3]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 79} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v colors\:Tri}
{\xe \v Tri\:colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t Tri::colors[3]}}
\par
{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 83} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_quad_mesh()}, and {\b ae_tri_mesh_get_from_stl_file()}.}\par
}
{\xe \v light_intensity\:Tri}
{\xe \v Tri\:light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Tri::light_intensity[3]}}
\par
{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 85} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_tri_calc_light_intensity()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_quad_mesh()}, {\b ae_tri_mesh_get_from_stl_file()}, and {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v normals\:Tri}
{\xe \v Tri\:normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Tri::normals[3]}}
\par
{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 82} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b ae_tri_calc_light_intensity()}, {\b ae_tri_get_average_normal()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_get_from_quad_mesh()}, {\b ae_tri_mesh_get_from_stl_file()}, {\b ae_tri_project_world2screen()}, and {\b ae_tri_set_normals()}.}\par
}
{\xe \v points\:Tri}
{\xe \v Tri\:points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Tri::points[3]}}
\par
{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 80} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_draw()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_print_tri()}, {\b ae_tri_calc_light_intensity()}, {\b ae_tri_calc_normal()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_compare()}, {\b ae_tri_create()}, {\b ae_tri_get_average_point()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_quad_mesh()}, {\b ae_tri_mesh_get_from_stl_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_mesh_set_bounding_box()}, {\b ae_tri_mesh_translate()}, {\b ae_tri_project_world2screen()}, {\b ae_tri_set_normals()}, and {\b ae_tri_transform_to_view()}.}\par
}
{\xe \v tex_points\:Tri}
{\xe \v Tri\:tex_points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} Tri::tex_points[3]}}
\par
{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 81} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b ae_tri_clip_with_plane()}, {\b ae_tri_mesh_flip_normals()}, and {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v to_draw\:Tri}
{\xe \v Tri\:to_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Tri::to_draw}}
\par
{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 84} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_quad2tris()}, {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_print_tri()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_quad_mesh()}, {\b ae_tri_mesh_get_from_stl_file()}, and {\b ae_tri_project_world2screen()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Tri_mesh Struct Reference\par \pard\plain 
{\tc\tcl2 \v Tri_mesh}
{\xe \v Tri_mesh}
{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\par
{
{\f2 #include <Almog_Draw_Library.h>}}\par
Collaboration diagram for Tri_mesh:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structTri__mesh__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 102} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Tri_mesh}
{\xe \v Tri_mesh\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Tri_mesh::capacity}}
\par
{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 104} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v elements\:Tri_mesh}
{\xe \v Tri_mesh\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri}* Tri_mesh::elements}}
\par
{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 105} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_print_tri_mesh()}, {\b ae_scene_free()}, {\b ae_tri_mesh_appand_copy()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_mesh_set_bounding_box()}, {\b ae_tri_mesh_set_normals()}, {\b ae_tri_mesh_translate()}, and {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v length\:Tri_mesh}
{\xe \v Tri_mesh\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Tri_mesh::length}}
\par
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 103} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b ae_print_tri_mesh()}, {\b ae_tri_mesh_appand_copy()}, {\b ae_tri_mesh_create_copy()}, {\b ae_tri_mesh_flip_normals()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_mesh_set_bounding_box()}, {\b ae_tri_mesh_set_normals()}, {\b ae_tri_mesh_translate()}, {\b ae_tri_project_world2screen()}, {\b render()}, and {\b setup()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Draw_Library.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Tri_mesh_array Struct Reference\par \pard\plain 
{\tc\tcl2 \v Tri_mesh_array}
{\xe \v Tri_mesh_array}
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
\par
{
{\f2 #include <Almog_Engine.h>}}\par
Collaboration diagram for Tri_mesh_array:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structTri__mesh__array__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b length}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh} * {\b elements}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 128} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Tri_mesh_array}
{\xe \v Tri_mesh_array\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Tri_mesh_array::capacity}}
\par
{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 130} of file {\b Almog_Engine.h}.}\par
}
{\xe \v elements\:Tri_mesh_array}
{\xe \v Tri_mesh_array\:elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh}* Tri_mesh_array::elements}}
\par
{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 131} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b render()}, {\b setup()}, and {\b update()}.}\par
}
{\xe \v length\:Tri_mesh_array}
{\xe \v Tri_mesh_array\:length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Tri_mesh_array::length}}
\par
{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 129} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_scene_free()}, {\b render()}, {\b setup()}, and {\b update()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/include/{\b Almog_Engine.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/grid_example.c File Reference\par \pard\plain 
{\tc\tcl2 \v src/grid_example.c}
{\xe \v src/grid_example.c}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "./include/display.c"}\par
{\f2 #include "./include/Matrix2D.h"}\par
{\f2 #include "./include/Almog_Draw_Library.h"}\par
{\f2 #include "./include/Almog_Engine.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for grid_example.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "grid__example_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SETUP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UPDATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RENDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_ENGINE_IMPLEMENTATION}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Grid} {\b grid}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Grid} {\b grid_proj}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ALMOG_DRAW_LIBRARY_IMPLEMENTATION\:grid_example.c}
{\xe \v grid_example.c\:ALMOG_DRAW_LIBRARY_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b grid_example.c}.}\par
}
{\xe \v ALMOG_ENGINE_IMPLEMENTATION\:grid_example.c}
{\xe \v grid_example.c\:ALMOG_ENGINE_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_ENGINE_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b grid_example.c}.}\par
}
{\xe \v MATRIX2D_IMPLEMENTATION\:grid_example.c}
{\xe \v grid_example.c\:MATRIX2D_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b grid_example.c}.}\par
}
{\xe \v RENDER\:grid_example.c}
{\xe \v grid_example.c\:RENDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RENDER}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b grid_example.c}.}\par
}
{\xe \v SETUP\:grid_example.c}
{\xe \v grid_example.c\:SETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SETUP}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1} of file {\b grid_example.c}.}\par
}
{\xe \v UPDATE\:grid_example.c}
{\xe \v grid_example.c\:UPDATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UPDATE}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2} of file {\b grid_example.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v render\:grid_example.c}
{\xe \v grid_example.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b grid_example.c}.}\par
{
\ql
References {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_grid_draw()}, {\b grid_proj}, and {\b game_state_t::window_pixels_mat}.}\par
}
{\xe \v setup\:grid_example.c}
{\xe \v grid_example.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b grid_example.c}.}\par
{
\ql
References {\b adl_cartesian_grid_create()}, {\b game_state_t::const_fps}, {\b grid}, and {\b grid_proj}.}\par
}
{\xe \v update\:grid_example.c}
{\xe \v grid_example.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b grid_example.c}.}\par
{
\ql
References {\b ae_grid_project_world2screen()}, {\b ae_projection_mat_set()}, {\b ae_view_mat_set()}, {\b Camera::aspect_ratio}, {\b Scene::camera}, {\b Camera::fov_deg}, {\b grid}, {\b grid_proj}, {\b Scene::proj_mat}, {\b game_state_t::scene}, {\b Scene::up_direction}, {\b Scene::view_mat}, {\b game_state_t::window_h}, {\b game_state_t::window_w}, {\b Camera::z_far}, and {\b Camera::z_near}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v grid\:grid_example.c}
{\xe \v grid_example.c\:grid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Grid} grid}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b grid_example.c}.}\par
{
\ql
Referenced by {\b adl_cartesian_grid_create()}, {\b adl_grid_draw()}, {\b setup()}, and {\b update()}.}\par
}
{\xe \v grid_proj\:grid_example.c}
{\xe \v grid_example.c\:grid_proj}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Grid} grid_proj}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b grid_example.c}.}\par
{
\ql
Referenced by {\b render()}, {\b setup()}, and {\b update()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
grid_example.c\par \pard\plain 
{\tc\tcl2 \v src/grid_example.c}
{\xe \v src/grid_example.c}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #define SETUP}\par
00002 {\cf21 #define UPDATE}\par
00003 {\cf21 #define RENDER}\par
00004 {\cf21 #include "./include/display.c"}\par
00005 {\cf21 #define MATRIX2D_IMPLEMENTATION}\par
00006 {\cf21 #include "./include/Matrix2D.h"}\par
00007 {\cf21 #define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00008 {\cf21 #include "./include/Almog_Draw_Library.h"}\par
00009 {\cf21 #define ALMOG_ENGINE_IMPLEMENTATION}\par
00010 {\cf21 #include "./include/Almog_Engine.h"}\par
00011 \par
00012 Grid grid;\par
00013 Grid grid_proj;\par
00014 {\cf18 void} setup(game_state_t *game_state)\par
00015 \{\par
00016     {\cf20 // game_state->to_limit_fps = 0;}\par
00017     game_state->const_fps = 500;\par
00018 \par
00019     grid      = adl_cartesian_grid_create(-1, 1, -2, 2, 10, 20, {\cf22 "XZ"}, 1);\par
00020     grid_proj = adl_cartesian_grid_create(-1, 1, -2, 2, 10, 20, {\cf22 "XZ"}, 1);\par
00021 \}\par
00022 \par
00023 {\cf18 void} update(game_state_t *game_state)\par
00024 \{\par
00025     ae_projection_mat_set(game_state->scene.proj_mat, game_state->scene.camera.aspect_ratio, game_state->scene.camera.fov_deg, game_state->scene.camera.z_near, game_state->scene.camera.z_far);\par
00026     ae_view_mat_set(game_state->scene.view_mat, game_state->scene.camera, game_state->scene.up_direction);\par
00027 \par
00028     ae_grid_project_world2screen(game_state->scene.proj_mat, game_state->scene.view_mat, grid_proj, grid, game_state->window_w, game_state->window_h, &(game_state->scene));\par
00029 \par
00030 \}\par
00031 \par
00032 {\cf18 void} render(game_state_t *game_state)\par
00033 \{\par
00034     adl_grid_draw(game_state->window_pixels_mat, grid_proj, 0xffffffff, ADL_DEFAULT_OFFSET_ZOOM);\par
00035 \par
00036 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/include/Almog_Draw_Library.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_Draw_Library.h}
{\xe \v src/include/Almog_Draw_Library.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Immediate-mode 2D/3D raster helpers for drawing onto {\b Mat2D_uint32} pixel buffers. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <math.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <limits.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <float.h>}\par
{\f2 #include "./Matrix2D.h"}\par
{\f2 #include "./Almog_Dynamic_Array.h"}\par
{\f2 #include <assert.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Almog_Draw_Library.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Draw__Library_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Draw__Library_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Offset_zoom_param}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Point}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Curve}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Curve_ada}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Tri}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Quad}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Tri_mesh}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Quad_mesh}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Figure}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Grid}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_ASSERT}\~ assert\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b POINT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CURVE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CURVE_ADA}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TRI}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b QUAD}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TRI_MESH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b QUAD_MESH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HexARGB_RGBA}(x)\~ ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HexARGB_RGB_VAR}(x,  r,  g,  b)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HexARGB_RGBA_VAR}(x,  r,  g,  b,  a)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RGB_hexRGB}(r,  g,  b)\~ (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RGBA_hexARGB}(r,  g,  b,  a)\~ (int)(0x01000000l*(int)(fminf(a, 255)) + 0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RED_hexARGB}\~ 0xFFFF0000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GREEN_hexARGB}\~ 0xFF00FF00\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b BLUE_hexARGB}\~ 0xFF0000FF\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b PURPLE_hexARGB}\~ 0xFFFF00FF\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CYAN_hexARGB}\~ 0xFF00FFFF\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b YELLOW_hexARGB}\~ 0xFFFFFF00\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b edge_cross_point}(a1,  b,  a2,  p)\~ (b.x-a1.x)*(p.y-a2.y)-(b.y-a1.y)*(p.x-a2.x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b is_top_edge}(x,  y)\~ (y == 0 && x > 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b is_left_edge}(x,  y)\~ (y < 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b is_top_left}(ps,  pe)\~ ({\b is_top_edge}(pe.x-ps.x, pe.y-ps.y) || {\b is_left_edge}(pe.x-ps.x, pe.y-ps.y))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_POINT_VAL}\~ 1e5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_assert_point_is_valid}(p)\~ {\b ADL_ASSERT}(isfinite(p.x) && isfinite(p.y) && isfinite(p.z) && isfinite(p.w))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_assert_tri_is_valid}(tri)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_assert_quad_is_valid}(quad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_FIGURE_PADDING_PRECENTAGE}\~ 20\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_FIGURE_PADDING}\~ 70\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MIN_FIGURE_PADDING}\~ 20\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_HEAD_SIZE}\~ 15\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_FIGURE_HEAD_ANGLE_DEG}\~ 30\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_FIGURE_AXIS_COLOR}\~ 0xff000000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_CHARACTER_OFFSET}\~ 10\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MIN_CHARACTER_OFFSET}\~ 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_SENTENCE_LEN}\~ 256\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_MAX_ZOOM}\~ 1e3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADL_DEFAULT_OFFSET_ZOOM}\~ ({\b Offset_zoom_param})\{1,0,0,0,0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_offset_zoom_point}(p,  window_w,  window_h,  offset_zoom_param)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b adl_offset2d}(i,  j,  ni)\~ (j) * (ni) + (i)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_point_draw} ({\b Mat2D_uint32} screen_mat, int x, int y, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a single pixel with alpha blending. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_line_draw} ({\b Mat2D_uint32} screen_mat, const float x1_input, const float y1_input, const float x2_input, const float y2_input, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an anti-aliased-like line by vertical spans (integer grid). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_lines_draw} (const {\b Mat2D_uint32} screen_mat, const {\b Point} *points, const size_t len, const uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a polyline connecting an array of points. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_lines_loop_draw} (const {\b Mat2D_uint32} screen_mat, const {\b Point} *points, const size_t len, const uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a closed polyline (loop). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_arrow_draw} ({\b Mat2D_uint32} screen_mat, int xs, int ys, int xe, int ye, float head_size, float angle_deg, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an arrow from start to end with a triangular head. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_character_draw} ({\b Mat2D_uint32} screen_mat, char c, int width_pixel, int hight_pixel, int x_top_left, int y_top_left, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a vector glyph for a single ASCII character. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_sentence_draw} ({\b Mat2D_uint32} screen_mat, const char sentence[], size_t len, const int x_top_left, const int y_top_left, const int hight_pixel, const uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a horizontal sentence using vector glyphs. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_rectangle_draw_min_max} ({\b Mat2D_uint32} screen_mat, int min_x, int max_x, int min_y, int max_y, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a rectangle outline defined by min/max corners (inclusive). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_rectangle_fill_min_max} ({\b Mat2D_uint32} screen_mat, int min_x, int max_x, int min_y, int max_y, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a rectangle defined by min/max corners (inclusive). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_draw} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a quad (four points, looped). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_fill} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad using mean-value (Barycentric) coordinates and flat base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_fill_interpolate_normal_mean_value} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-pixel light interpolation (mean value coords). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_fill_interpolate_color_mean_value} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Quad} quad, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-vertex colors (mean value coords). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_draw} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all quads in a mesh. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_fill} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh with a uniform base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_fill_interpolate_normal} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using interpolated lighting. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad_mesh_fill_interpolate_color} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Quad_mesh} mesh, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using per-vertex colors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_circle_draw} ({\b Mat2D_uint32} screen_mat, float center_x, float center_y, float r, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an approximate circle outline (1px thickness). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_circle_fill} ({\b Mat2D_uint32} screen_mat, float center_x, float center_y, float r, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a circle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_draw} ({\b Mat2D_uint32} screen_mat, {\b Tri} tri, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_fill_Pinedas_rasterizer} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Tri} tri, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with flat base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Tri} tri, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with per-vertex colors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer, {\b Tri} tri, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle with interpolated lighting over a uniform color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_draw} ({\b Mat2D_uint32} screen_mat, {\b Tri_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all triangles in a mesh. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_fill_Pinedas_rasterizer} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Tri_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Tri_mesh} mesh, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer_mat, {\b Tri_mesh} mesh, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with interpolated lighting. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b adl_tan_half_angle} ({\b Point} vi, {\b Point} vj, {\b Point} p, float li, float lj)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute tan(alpha/2) for the angle at point p between segments p->vi and p->vj. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b adl_linear_map} (float s, float min_in, float max_in, float min_out, float max_out)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Affine map from one scalar range to another (no clamping). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_quad2tris} ({\b Quad} quad, {\b Tri} *tri1, {\b Tri} *tri2, char split_line[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Split a quad into two triangles along a chosen diagonal. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_linear_sRGB_to_okLab} (uint32_t hex_ARGB, float *L, float *a, float *b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to Oklab components. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_okLab_to_linear_sRGB} (float L, float a, float b, uint32_t *hex_ARGB)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert Oklab components to a linear sRGB ARGB color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_linear_sRGB_to_okLch} (uint32_t hex_ARGB, float *L, float *c, float *h_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to OkLch components. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_okLch_to_linear_sRGB} (float L, float c, float h_deg, uint32_t *hex_ARGB)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert OkLch components to a linear sRGB ARGB color. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_interpolate_ARGBcolor_on_okLch} (uint32_t color1, uint32_t color2, float t, float num_of_rotations, uint32_t *color_out)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolate between two ARGB colors in OkLch space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Figure} {\b adl_figure_alloc} (size_t rows, size_t cols, {\b Point} top_left_position)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate and initialize a {\b Figure} with an internal pixel buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_figure_copy_to_screen} ({\b Mat2D_uint32} screen_mat, {\b Figure} figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Blit a {\b Figure}'s pixels onto a destination screen buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_axis_draw_on_figure} ({\b Figure} *figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw X/Y axes with arrowheads into a {\b Figure}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_max_min_values_draw_on_figure} ({\b Figure} figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw min/max numeric labels for the current data range. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_curve_add_to_figure} ({\b Figure} *figure, {\b Point} *src_points, size_t src_len, uint32_t color)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a curve (polyline) to a {\b Figure} and update its data bounds. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_curves_plot_on_figure} ({\b Figure} figure)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Render all added curves into a {\b Figure}'s pixel buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_2Dscalar_interp_on_figure} ({\b Figure} figure, double *x_2Dmat, double *y_2Dmat, double *scalar_2Dmat, int ni, int nj, char color_scale[], float num_of_rotations)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualize a scalar field on a {\b Figure} by colored quads. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Grid} {\b adl_cartesian_grid_create} (float min_e1, float max_e1, float min_e2, float max_e2, int num_samples_e1, int num_samples_e2, char plane[], float third_direction_position)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a Cartesian grid (as curves) on one of the principal planes. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adl_grid_draw} ({\b Mat2D_uint32} screen_mat, {\b Grid} {\b grid}, uint32_t color, {\b Offset_zoom_param} offset_zoom_param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a previously created {\b Grid} as line segments. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Immediate-mode 2D/3D raster helpers for drawing onto {\b Mat2D_uint32} pixel buffers. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Conventions{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pixel buffer: {\b Mat2D_uint32} with elements encoded as ARGB 0xAARRGGBB.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Coordinates: x grows to the right, y grows downward; origin is the top-left corner of the destination buffer.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Depth: Functions that accept inv_z_buffer perform a depth test using inverse-Z (larger values are closer). The buffer stores doubles.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Transform: Most drawing functions accept an {\b Offset_zoom_param} describing a pan/zoom transform that is applied about the screen center. Use ADL_DEFAULT_OFFSET_ZOOM for identity.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Colors: Unless noted otherwise, colors are ARGB in 0xAARRGGBB format.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Alpha: adl_point_draw alpha-blends source over destination and writes an opaque result (A = 255) to the pixel buffer.\par}
\par
This header contains function declarations and optional implementations (guarded by ALMOG_DRAW_LIBRARY_IMPLEMENTATION). \par
}{
Definition in file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ADL_ASSERT\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_assert_point_is_valid\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_assert_point_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_assert_point_is_valid( p)\~ {\b ADL_ASSERT}(isfinite(p.x) && isfinite(p.y) && isfinite(p.z) && isfinite(p.w))}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 243} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_assert_quad_is_valid\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_assert_quad_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_assert_quad_is_valid( quad)}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         adl_assert_point_is_valid(quad.points[0]);   \\\par
        adl_assert_point_is_valid(quad.points[1]);                                  \\\par
        adl_assert_point_is_valid(quad.points[2]);                                  \\\par
        adl_assert_point_is_valid(quad.points[3])\par
}
{
Definition at line {\b 247} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_assert_tri_is_valid\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_assert_tri_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_assert_tri_is_valid( tri)}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         adl_assert_point_is_valid(tri.points[0]); \\\par
        adl_assert_point_is_valid(tri.points[1]);                              \\\par
        adl_assert_point_is_valid(tri.points[2])\par
}
{
Definition at line {\b 244} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_DEFAULT_OFFSET_ZOOM\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_DEFAULT_OFFSET_ZOOM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_DEFAULT_OFFSET_ZOOM\~ ({\b Offset_zoom_param})\{1,0,0,0,0\}}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 264} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_FIGURE_AXIS_COLOR\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_FIGURE_AXIS_COLOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_FIGURE_AXIS_COLOR\~ 0xff000000}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 257} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_FIGURE_HEAD_ANGLE_DEG\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_FIGURE_HEAD_ANGLE_DEG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_FIGURE_HEAD_ANGLE_DEG\~ 30}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 256} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_FIGURE_PADDING_PRECENTAGE\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_FIGURE_PADDING_PRECENTAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_FIGURE_PADDING_PRECENTAGE\~ 20}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 252} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_CHARACTER_OFFSET\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_CHARACTER_OFFSET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_CHARACTER_OFFSET\~ 10}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 259} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_FIGURE_PADDING\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_FIGURE_PADDING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_FIGURE_PADDING\~ 70}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 253} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_HEAD_SIZE\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_HEAD_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_HEAD_SIZE\~ 15}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 255} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_POINT_VAL\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_POINT_VAL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_POINT_VAL\~ 1e5}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 242} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_SENTENCE_LEN\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_SENTENCE_LEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_SENTENCE_LEN\~ 256}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 261} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MAX_ZOOM\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MAX_ZOOM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MAX_ZOOM\~ 1e3}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 262} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MIN_CHARACTER_OFFSET\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MIN_CHARACTER_OFFSET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MIN_CHARACTER_OFFSET\~ 5}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 260} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v ADL_MIN_FIGURE_PADDING\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:ADL_MIN_FIGURE_PADDING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADL_MIN_FIGURE_PADDING\~ 20}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 254} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_offset2d\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_offset2d}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_offset2d( i,  j,  ni)\~ (j) * (ni) + (i)}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2227} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v adl_offset_zoom_point\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_offset_zoom_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define adl_offset_zoom_point( p,  window_w,  window_h,  offset_zoom_param)}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     (p).x = ((p).x - (window_w)/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + (window_w)/2; \\\par
    (p).y = ((p).y - (window_h)/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + (window_h)/2\par
}
{
Definition at line {\b 265} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v BLUE_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:BLUE_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define BLUE_hexARGB\~ 0xFF0000FF}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 232} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v CURVE\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:CURVE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CURVE}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v CURVE_ADA\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:CURVE_ADA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CURVE_ADA}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v CYAN_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:CYAN_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CYAN_hexARGB\~ 0xFF00FFFF}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 234} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v edge_cross_point\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:edge_cross_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define edge_cross_point( a1,  b,  a2,  p)\~ (b.x-a1.x)*(p.y-a2.y)-(b.y-a1.y)*(p.x-a2.x)}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 237} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v GREEN_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:GREEN_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GREEN_hexARGB\~ 0xFF00FF00}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 231} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v HexARGB_RGB_VAR\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:HexARGB_RGB_VAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HexARGB_RGB_VAR( x,  r,  g,  b)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 157} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v HexARGB_RGBA\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:HexARGB_RGBA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HexARGB_RGBA( x)\~ ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 154} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v HexARGB_RGBA_VAR\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:HexARGB_RGBA_VAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HexARGB_RGBA_VAR( x,  r,  g,  b,  a)\~ r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 160} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v is_left_edge\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:is_left_edge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define is_left_edge( x,  y)\~ (y < 0)}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 239} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v is_top_edge\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:is_top_edge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define is_top_edge( x,  y)\~ (y == 0 && x > 0)}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 238} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v is_top_left\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:is_top_left}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define is_top_left( ps,  pe)\~ ({\b is_top_edge}(pe.x-ps.x, pe.y-ps.y) || {\b is_left_edge}(pe.x-ps.x, pe.y-ps.y))}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 240} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v POINT\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:POINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define POINT}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v PURPLE_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:PURPLE_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define PURPLE_hexARGB\~ 0xFFFF00FF}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 233} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v QUAD\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:QUAD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define QUAD}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 90} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v QUAD_MESH\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:QUAD_MESH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define QUAD_MESH}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 110} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v RED_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:RED_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RED_hexARGB\~ 0xFFFF0000}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 230} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v RGB_hexRGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:RGB_hexRGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RGB_hexRGB( r,  g,  b)\~ (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 163} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v RGBA_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:RGBA_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RGBA_hexARGB( r,  g,  b,  a)\~ (int)(0x01000000l*(int)(fminf(a, 255)) + 0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 166} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v TRI\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:TRI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TRI}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 78} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v TRI_MESH\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:TRI_MESH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TRI_MESH}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 101} of file {\b Almog_Draw_Library.h}.}\par
}
{\xe \v YELLOW_hexARGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:YELLOW_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define YELLOW_hexARGB\~ 0xFFFFFF00}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 235} of file {\b Almog_Draw_Library.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v adl_2Dscalar_interp_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_2Dscalar_interp_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_2Dscalar_interp_on_figure ({\b Figure}  {\i figure}, double *  {\i x_2Dmat}, double *  {\i y_2Dmat}, double *  {\i scalar_2Dmat}, int  {\i ni}, int  {\i nj}, char  {\i color_scale}[], float  {\i num_of_rotations})}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualize a scalar field on a {\b Figure} by colored quads. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Treats x_2Dmat and y_2Dmat as a structured 2D grid of positions (column-major with stride ni) and colors each cell using scalar_2Dmat mapped through a two-color OkLch gradient. Also updates figure bounds from the provided data. Depth-tested inside the figure's buffers.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{{\b Figure} to render into (uses its own pixel buffers). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_2Dmat} \cell }{{\b Grid} X coordinates, size ni*nj. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_2Dmat} \cell }{{\b Grid} Y coordinates, size ni*nj. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scalar_2Dmat} \cell }{Scalar values per grid node, size ni*nj. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ni} \cell }{Number of samples along the first index (rows). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nj} \cell }{Number of samples along the second index (cols). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color_scale} \cell }{Two-letter code of endpoints ("b-c","b-g","b-r", "b-y","g-y","g-p","g-r","r-y"). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_of_rotations} \cell }{Hue turns for the OkLch interpolation (can be fractional/negative). \cell }
{\row }
}
}{
Definition at line {\b 2247} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_axis_draw_on_figure()}, {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_interpolate_ARGBcolor_on_okLch()}, {\b adl_linear_map()}, {\b adl_max_min_values_draw_on_figure()}, {\b adl_offset2d}, {\b adl_offset_zoom_point}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b Figure::background_color}, {\b BLUE_hexARGB}, {\b Quad::colors}, {\b Mat2D::cols}, {\b Mat2D_uint32::cols}, {\b CYAN_hexARGB}, {\b Mat2D::elements}, {\b GREEN_hexARGB}, {\b Figure::inv_z_buffer_mat}, {\b Quad::light_intensity}, {\b mat2D_fill_uint32()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Quad::points}, {\b PURPLE_hexARGB}, {\b RED_hexARGB}, {\b Mat2D::rows}, {\b Mat2D_uint32::rows}, {\b Quad::to_draw}, {\b Figure::to_draw_axis}, {\b Figure::to_draw_max_min_values}, {\b Point::w}, {\b Point::x}, {\b Point::y}, {\b YELLOW_hexARGB}, and {\b Point::z}.}\par
}
{\xe \v adl_arrow_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_arrow_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_arrow_draw ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i xs}, int  {\i ys}, int  {\i xe}, int  {\i ye}, float  {\i head_size}, float  {\i angle_deg}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an arrow from start to end with a triangular head. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The head is constructed by rotating around the arrow tip by +/- angle_deg and using head_size as a fraction of the shaft length.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
: This function is a bit complicated and expansive but this is what I could come up with\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xs} \cell }{Start X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ys} \cell }{Start Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xe} \cell }{End X (before pan/zoom), i.e., the arrow tip. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ye} \cell }{End Y (before pan/zoom), i.e., the arrow tip. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i head_size} \cell }{Head size as a fraction of total length in [0,1]. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Head wing rotation angle in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Arrow color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 451} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, {\b mat2D_add()}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_dot()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_set_rot_mat_z()}, and {\b mat2D_sub()}.}\par
{
\ql
Referenced by {\b adl_axis_draw_on_figure()}.}\par
}
{\xe \v adl_axis_draw_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_axis_draw_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_axis_draw_on_figure ({\b Figure} *  {\i figure})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw X/Y axes with arrowheads into a {\b Figure}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uses the current figure's pixel extents and padding to place axes, and stores the computed head sizes for later label layout.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{[in,out] {\b Figure} to draw onto. \cell }
{\row }
}
}{
Definition at line {\b 2077} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_arrow_draw()}, {\b ADL_FIGURE_AXIS_COLOR}, {\b ADL_FIGURE_HEAD_ANGLE_DEG}, {\b ADL_FIGURE_PADDING_PRECENTAGE}, {\b ADL_MAX_FIGURE_PADDING}, {\b ADL_MAX_HEAD_SIZE}, {\b ADL_MIN_FIGURE_PADDING}, {\b Mat2D_uint32::cols}, {\b Figure::max_x_pixel}, {\b Figure::max_y_pixel}, {\b Figure::min_x_pixel}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D_uint32::rows}, {\b Figure::x_axis_head_size}, and {\b Figure::y_axis_head_size}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v adl_cartesian_grid_create\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_cartesian_grid_create}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Grid} adl_cartesian_grid_create (float  {\i min_e1}, float  {\i max_e1}, float  {\i min_e2}, float  {\i max_e2}, int  {\i num_samples_e1}, int  {\i num_samples_e2}, char  {\i plane}[], float  {\i third_direction_position})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a Cartesian grid (as curves) on one of the principal planes. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Supported planes (case-insensitive): "XY","xy","XZ","xz","YX","yx","YZ","yz","ZX","zx","ZY","zy". The third_direction_position places the grid along the axis normal to the plane (e.g., Z for "XY").\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_e1} \cell }{Minimum coordinate along the first axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_e1} \cell }{Maximum coordinate along the first axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_e2} \cell }{Minimum coordinate along the second axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_e2} \cell }{Maximum coordinate along the second axis of the plane. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_samples_e1} \cell }{Number of segments along first axis. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_samples_e2} \cell }{Number of segments along second axis. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane} \cell }{Plane code string ("XY","xy","XZ","xz","YX","yx","YZ","yz","ZX","zx","ZY","zy"). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i third_direction_position} \cell }{Position along the axis normal to plane. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Grid} structure containing the generated curves and spacing. \par
}}}{
Definition at line {\b 2446} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Grid::curves}, {\b Grid::de1}, {\b Grid::de2}, {\b grid}, {\b Grid::max_e1}, {\b Grid::max_e2}, {\b Grid::min_e1}, {\b Grid::min_e2}, {\b Grid::num_samples_e1}, {\b Grid::num_samples_e2}, {\b Grid::plane}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v adl_character_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_character_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_character_draw ({\b Mat2D_uint32}  {\i screen_mat}, char  {\i c}, int  {\i width_pixel}, int  {\i hight_pixel}, int  {\i x_top_left}, int  {\i y_top_left}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a vector glyph for a single ASCII character. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Only a limited set of characters is supported (A\'96Z, a\'96z, 0\'969, space, '.', ':', '-', '+'). Unsupported characters are rendered as a framed box with an 'X'. Coordinates are for the character's top-left corner.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{The character to draw. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i width_pixel} \cell }{Character box width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hight_pixel} \cell }{Character box height in pixels (spelled as in API). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_top_left} \cell }{X of top-left corner (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_top_left} \cell }{Y of top-left corner (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 519} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, {\b adl_rectangle_draw_min_max()}, and {\b adl_rectangle_fill_min_max()}.}\par
{
\ql
Referenced by {\b adl_sentence_draw()}.}\par
}
{\xe \v adl_circle_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_circle_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_circle_draw ({\b Mat2D_uint32}  {\i screen_mat}, float  {\i center_x}, float  {\i center_y}, float  {\i r}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an approximate circle outline (1px thickness). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The outline is approximated on the integer grid by sampling a band around radius r.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_x} \cell }{Circle center X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_y} \cell }{Circle center Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Circle radius in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1360} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}.}\par
}
{\xe \v adl_circle_fill\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_circle_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_circle_fill ({\b Mat2D_uint32}  {\i screen_mat}, float  {\i center_x}, float  {\i center_y}, float  {\i r}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a circle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_x} \cell }{Circle center X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i center_y} \cell }{Circle center Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Circle radius in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Fill color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1382} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}.}\par
}
{\xe \v adl_curve_add_to_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_curve_add_to_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_curve_add_to_figure ({\b Figure} *  {\i figure}, {\b Point} *  {\i src_points}, size_t  {\i src_len}, uint32_t  {\i color})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a curve (polyline) to a {\b Figure} and update its data bounds. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The input points are copied into the figure's source curve array with the given color. {\b Figure} min/max bounds are updated to include them.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{[in,out] Target figure. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_points} \cell }{Array of source points (in data space). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_len} \cell }{Number of points. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{{\b Curve} color (0xAARRGGBB). \cell }
{\row }
}
}{
Definition at line {\b 2163} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Curve::color}, {\b Figure::max_x}, {\b Figure::max_y}, {\b Figure::min_x}, {\b Figure::min_y}, {\b Figure::src_curve_array}, {\b Point::x}, and {\b Point::y}.}\par
}
{\xe \v adl_curves_plot_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_curves_plot_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_curves_plot_on_figure ({\b Figure}  {\i figure})}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Render all added curves into a {\b Figure}'s pixel buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clears the pixel buffer to background_color, draws axes if enabled, maps data-space points to pixel-space using current min/max bounds, draws the polylines, and optionally draws min/max labels.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{{\b Figure} to render into (uses its own pixel buffer). \cell }
{\row }
}
}{
Definition at line {\b 2198} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_axis_draw_on_figure()}, {\b adl_line_draw()}, {\b adl_linear_map()}, {\b adl_max_min_values_draw_on_figure()}, {\b Figure::background_color}, {\b Curve::color}, {\b Mat2D::cols}, {\b Curve::elements}, {\b Curve_ada::elements}, {\b Mat2D::elements}, {\b Figure::inv_z_buffer_mat}, {\b Curve::length}, {\b Curve_ada::length}, {\b mat2D_fill_uint32()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D::rows}, {\b Figure::src_curve_array}, {\b Figure::to_draw_axis}, {\b Figure::to_draw_max_min_values}, {\b Point::x}, and {\b Point::y}.}\par
}
{\xe \v adl_figure_alloc\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_figure_alloc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Figure} adl_figure_alloc (size_t  {\i rows}, size_t  {\i cols}, {\b Point}  {\i top_left_position})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate and initialize a {\b Figure} with an internal pixel buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the pixel buffer (rows x cols), an inverse-Z buffer (zeroed), an empty source curve array, and default padding/axes bounds. The background_color, to_draw_axis, and to_draw_max_min_values should be set by the caller before rendering.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{Height of the figure in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cols} \cell }{Width of the figure in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i top_left_position} \cell }{Target position when copying to a screen. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A new {\b Figure} with allocated buffers. \par
}}}{
Definition at line {\b 2014} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ada_init_array}, {\b ADL_ASSERT}, {\b adl_assert_point_is_valid}, {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b ADL_FIGURE_PADDING_PRECENTAGE}, {\b ADL_MAX_FIGURE_PADDING}, {\b Mat2D::cols}, {\b Mat2D_uint32::cols}, {\b Mat2D::elements}, {\b Figure::inv_z_buffer_mat}, {\b mat2D_alloc()}, {\b mat2D_alloc_uint32()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D::rows}, {\b Mat2D_uint32::rows}, {\b Figure::src_curve_array}, and {\b Figure::top_left_position}.}\par
}
{\xe \v adl_figure_copy_to_screen\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_figure_copy_to_screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_figure_copy_to_screen ({\b Mat2D_uint32}  {\i screen_mat}, {\b Figure}  {\i figure})}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Blit a {\b Figure}'s pixels onto a destination screen buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs per-pixel blending using adl_point_draw and the identity transform. The figure's top_left_position is used as the destination offset.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{Source figure to copy from. \cell }
{\row }
}
}{
Definition at line {\b 2057} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b MAT2D_AT_UINT32}, {\b Figure::pixels_mat}, {\b Mat2D_uint32::rows}, {\b Figure::top_left_position}, {\b Point::x}, and {\b Point::y}.}\par
}
{\xe \v adl_grid_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_grid_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_grid_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Grid}  {\i grid}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a previously created {\b Grid} as line segments. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i grid} \cell }{{\b Grid} to draw (curves are 2-point polylines). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 2724} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_lines_draw()}, {\b Grid::curves}, {\b Curve::elements}, {\b Curve_ada::elements}, {\b grid}, {\b Curve::length}, and {\b Curve_ada::length}.}\par
{
\ql
Referenced by {\b render()}.}\par
}
{\xe \v adl_interpolate_ARGBcolor_on_okLch\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_interpolate_ARGBcolor_on_okLch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_interpolate_ARGBcolor_on_okLch (uint32_t  {\i color1}, uint32_t  {\i color2}, float  {\i t}, float  {\i num_of_rotations}, uint32_t *  {\i color_out})}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolate between two ARGB colors in OkLch space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lightness and chroma are interpolated linearly. Hue is interpolated in degrees after adding 360*num_of_rotations to the second hue, allowing control over the winding direction.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color1} \cell }{Start color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color2} \cell }{End color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i t} \cell }{Interpolation factor in [0,1]. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num_of_rotations} \cell }{Number of hue turns to add to color2 (can be fractional/negative). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color_out} \cell }{[out] Interpolated ARGB color (A=255). \cell }
{\row }
}
}{
Definition at line {\b 1986} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_linear_sRGB_to_okLch()}, and {\b adl_okLch_to_linear_sRGB()}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}.}\par
}
{\xe \v adl_line_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_line_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_line_draw ({\b Mat2D_uint32}  {\i screen_mat}, const float  {\i x1_input}, const float  {\i y1_input}, const float  {\i x2_input}, const float  {\i y2_input}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw an anti-aliased-like line by vertical spans (integer grid). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The line is rasterized with a simple integer-span approach. Pan/zoom is applied about the screen center prior to rasterization.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x1_input} \cell }{Line start X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y1_input} \cell }{Line start Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x2_input} \cell }{Line end X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y2_input} \cell }{Line end Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 316} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ADL_ASSERT}, {\b ADL_MAX_POINT_VAL}, {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b Offset_zoom_param::offset_x}, {\b Offset_zoom_param::offset_y}, {\b Mat2D_uint32::rows}, and {\b Offset_zoom_param::zoom_multiplier}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b adl_character_draw()}, {\b adl_curves_plot_on_figure()}, {\b adl_lines_draw()}, {\b adl_lines_loop_draw()}, {\b adl_rectangle_draw_min_max()}, {\b adl_rectangle_fill_min_max()}, and {\b adl_tri_draw()}.}\par
}
{\xe \v adl_linear_map\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_linear_map}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float adl_linear_map (float  {\i s}, float  {\i min_in}, float  {\i max_in}, float  {\i min_out}, float  {\i max_out})}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Affine map from one scalar range to another (no clamping). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s} \cell }{Input value. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_in} \cell }{Input range minimum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_in} \cell }{Input range maximum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_out} \cell }{Output range minimum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_out} \cell }{Output range maximum. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Mapped value in the output range (may exceed if s is out-of-range). \par
}}}{
Definition at line {\b 1798} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v adl_linear_sRGB_to_okLab\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_linear_sRGB_to_okLab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_linear_sRGB_to_okLab (uint32_t  {\i hex_ARGB}, float *  {\i L}, float *  {\i a}, float *  {\i b})}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to Oklab components. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Oklab components are returned in ranges: L in [0,1], a in [-0.5,0.5], b in [-0.5,0.5] (typical). Input is assumed to be linear sRGB.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{Input color (0xAARRGGBB). Alpha is ignored. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{[out] Perceptual lightness. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{[out] First opponent axis. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{[out] Second opponent axis. \cell }
{\row }
}
}{
Definition at line {\b 1878} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b HexARGB_RGB_VAR}.}\par
{
\ql
Referenced by {\b adl_linear_sRGB_to_okLch()}.}\par
}
{\xe \v adl_linear_sRGB_to_okLch\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_linear_sRGB_to_okLch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_linear_sRGB_to_okLch (uint32_t  {\i hex_ARGB}, float *  {\i L}, float *  {\i c}, float *  {\i h_deg})}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a linear sRGB color (ARGB) to OkLch components. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{Input color (0xAARRGGBB). Alpha is ignored. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{[out] Lightness in [0,1]. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{[out] Chroma (non-negative). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i h_deg} \cell }{[out] Hue angle in degrees [-180,180] from atan2. \cell }
{\row }
}
}{
Definition at line {\b 1945} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_linear_sRGB_to_okLab()}, and {\b PI}.}\par
{
\ql
Referenced by {\b adl_interpolate_ARGBcolor_on_okLch()}.}\par
}
{\xe \v adl_lines_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_lines_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_lines_draw (const {\b Mat2D_uint32}  {\i screen_mat}, const {\b Point} *  {\i points}, const size_t  {\i len}, const uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a polyline connecting an array of points. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draws segments between consecutive points: p[0]-p[1]-...-p[len-1].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i points} \cell }{Array of points in pixel space (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of points in the array (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 403} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}.}\par
{
\ql
Referenced by {\b adl_grid_draw()}.}\par
}
{\xe \v adl_lines_loop_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_lines_loop_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_lines_loop_draw (const {\b Mat2D_uint32}  {\i screen_mat}, const {\b Point} *  {\i points}, const size_t  {\i len}, const uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a closed polyline (loop). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Same as adl_lines_draw, plus an extra segment from the last point back to the first point.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i points} \cell }{Array of points in pixel space (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of points in the array (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Line color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 423} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}.}\par
{
\ql
Referenced by {\b adl_quad_draw()}.}\par
}
{\xe \v adl_max_min_values_draw_on_figure\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_max_min_values_draw_on_figure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_max_min_values_draw_on_figure ({\b Figure}  {\i figure})}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw min/max numeric labels for the current data range. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Renders textual min/max values for both axes inside the figure area. Assumes figure.min_x/max_x/min_y/max_y have been populated.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i figure} \cell }{{\b Figure} whose labels are drawn into its own pixel buffer. \cell }
{\row }
}
}{
Definition at line {\b 2103} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b ADL_FIGURE_AXIS_COLOR}, {\b ADL_MAX_CHARACTER_OFFSET}, {\b ADL_MIN_CHARACTER_OFFSET}, {\b adl_sentence_draw()}, {\b Figure::max_x}, {\b Figure::max_x_pixel}, {\b Figure::max_y}, {\b Figure::max_y_pixel}, {\b Figure::min_x}, {\b Figure::min_x_pixel}, {\b Figure::min_y}, {\b Figure::min_y_pixel}, {\b Figure::offset_zoom_param}, {\b Figure::pixels_mat}, {\b Mat2D_uint32::rows}, {\b Figure::x_axis_head_size}, and {\b Figure::y_axis_head_size}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v adl_okLab_to_linear_sRGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_okLab_to_linear_sRGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_okLab_to_linear_sRGB (float  {\i L}, float  {\i a}, float  {\i b}, uint32_t *  {\i hex_ARGB})}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert Oklab components to a linear sRGB ARGB color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output RGB components are clamped to [0,255], alpha is set to 255.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{Oklab lightness. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Oklab a component. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{Oklab b component. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{[out] Output color (0xAARRGGBB, A=255). \cell }
{\row }
}
}{
Definition at line {\b 1913} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b RGBA_hexARGB}.}\par
{
\ql
Referenced by {\b adl_okLch_to_linear_sRGB()}.}\par
}
{\xe \v adl_okLch_to_linear_sRGB\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_okLch_to_linear_sRGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_okLch_to_linear_sRGB (float  {\i L}, float  {\i c}, float  {\i h_deg}, uint32_t *  {\i hex_ARGB})}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert OkLch components to a linear sRGB ARGB color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Hue is wrapped to [0,360). Output RGB is clamped to [0,255], alpha=255.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i L} \cell }{Lightness. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{Chroma. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i h_deg} \cell }{Hue angle in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hex_ARGB} \cell }{[out] Output color (0xAARRGGBB, A=255). \cell }
{\row }
}
}{
Definition at line {\b 1964} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_okLab_to_linear_sRGB()}, and {\b PI}.}\par
{
\ql
Referenced by {\b adl_interpolate_ARGBcolor_on_okLch()}.}\par
}
{\xe \v adl_point_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_point_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_point_draw ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i x}, int  {\i y}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a single pixel with alpha blending. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies the pan/zoom transform and writes the pixel if it falls inside the destination bounds. The source color is blended over the existing pixel using the source alpha; the stored alpha is set to 255.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{X coordinate in pixels (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y} \cell }{Y coordinate in pixels (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Source color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 283} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b HexARGB_RGBA_VAR}, {\b MAT2D_AT_UINT32}, {\b Offset_zoom_param::offset_x}, {\b Offset_zoom_param::offset_y}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, and {\b Offset_zoom_param::zoom_multiplier}.}\par
{
\ql
Referenced by {\b adl_circle_draw()}, {\b adl_circle_fill()}, {\b adl_figure_copy_to_screen()}, {\b adl_line_draw()}, {\b adl_quad_fill()}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, and {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v adl_quad2tris\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad2tris}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad2tris ({\b Quad}  {\i quad}, {\b Tri} *  {\i tri1}, {\b Tri} *  {\i tri2}, char  {\i split_line}[])}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Split a quad into two triangles along a chosen diagonal. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The split is controlled by split_line:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"02" splits along diagonal from vertex 0 to vertex 2.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"13" splits along diagonal from vertex 1 to vertex 3.\par}
The function copies positions, per-vertex colors, light_intensity, and the to_draw flag into the output triangles.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{Input quad. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri1} \cell }{[out] First output triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri2} \cell }{[out] Second output triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i split_line} \cell }{Null-terminated code: "02" or "13". \cell }
{\row }
}
}{
Definition at line {\b 1818} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b Tri::colors}, {\b Quad::colors}, {\b Tri::light_intensity}, {\b Quad::light_intensity}, {\b Tri::points}, {\b Quad::points}, {\b Tri::to_draw}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a quad (four points, looped). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Depth buffer is not used in this outline variant.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Unused for outline; safe to pass a dummy {\b Mat2D}. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} to draw in pixel space (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 943} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_lines_loop_draw()}, and {\b Quad::points}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_draw()}.}\par
}
{\xe \v adl_quad_fill\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_fill ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad using mean-value (Barycentric) coordinates and flat base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs a depth test against inv_z_buffer and modulates the base color with the average light_intensity of the quad's vertices.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 961} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b Quad::light_intensity}, {\b MAT2D_AT}, {\b Quad::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_fill()}.}\par
}
{\xe \v adl_quad_fill_interpolate_color_mean_value\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_fill_interpolate_color_mean_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_fill_interpolate_color_mean_value ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-vertex colors (mean value coords). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates ARGB vertex colors using mean-value coordinates, optionally modulated by the average light_intensity. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} in pixel space with quad.colors[] set. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1149} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b adl_tan_half_angle()}, {\b Quad::colors}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b Quad::light_intensity}, {\b MAT2D_AT}, {\b Quad::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_quad_mesh_fill_interpolate_color()}.}\par
}
{\xe \v adl_quad_fill_interpolate_normal_mean_value\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_fill_interpolate_normal_mean_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_fill_interpolate_normal_mean_value ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Quad}  {\i quad}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a quad with per-pixel light interpolation (mean value coords). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across the quad using mean-value coordinates and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1055} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b adl_tan_half_angle()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b Quad::light_intensity}, {\b MAT2D_AT}, {\b Quad::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_quad_mesh_fill_interpolate_normal()}.}\par
}
{\xe \v adl_quad_mesh_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all quads in a mesh. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Skips elements with to_draw == false. Depth buffer is not used.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Unused for outline; safe to pass a dummy {\b Mat2D}. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1253} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_draw()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_mesh_fill\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_fill ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh with a uniform base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies per-quad average light_intensity. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1277} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_fill()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_mesh_fill_interpolate_color\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_fill_interpolate_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_fill_interpolate_color ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using per-vertex colors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates quad.colors[] across each quad with mean-value coordinates. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1334} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_fill_interpolate_color_mean_value()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_quad_mesh_fill_interpolate_normal\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_quad_mesh_fill_interpolate_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_quad_mesh_fill_interpolate_normal ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Quad_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all quads in a mesh using interpolated lighting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across quads and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{{\b Quad} mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1304} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_quad_is_valid}, {\b adl_quad_fill_interpolate_normal_mean_value()}, {\b Quad_mesh::elements}, {\b HexARGB_RGBA_VAR}, {\b Quad_mesh::length}, and {\b Quad::to_draw}.}\par
}
{\xe \v adl_rectangle_draw_min_max\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_rectangle_draw_min_max}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_rectangle_draw_min_max ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i min_x}, int  {\i max_x}, int  {\i min_y}, int  {\i max_y}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a rectangle outline defined by min/max corners (inclusive). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_x} \cell }{Minimum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_x} \cell }{Maximum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_y} \cell }{Minimum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_y} \cell }{Maximum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 906} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}.}\par
{
\ql
Referenced by {\b adl_character_draw()}.}\par
}
{\xe \v adl_rectangle_fill_min_max\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_rectangle_fill_min_max}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_rectangle_fill_min_max ({\b Mat2D_uint32}  {\i screen_mat}, int  {\i min_x}, int  {\i max_x}, int  {\i min_y}, int  {\i max_y}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a rectangle defined by min/max corners (inclusive). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_x} \cell }{Minimum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_x} \cell }{Maximum X (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_y} \cell }{Minimum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_y} \cell }{Maximum Y (before pan/zoom). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Fill color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 925} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}.}\par
{
\ql
Referenced by {\b adl_character_draw()}.}\par
}
{\xe \v adl_sentence_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_sentence_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_sentence_draw ({\b Mat2D_uint32}  {\i screen_mat}, const char  {\i sentence}[], size_t  {\i len}, const int  {\i x_top_left}, const int  {\i y_top_left}, const int  {\i hight_pixel}, const uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw a horizontal sentence using vector glyphs. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Characters are laid out left-to-right with a spacing derived from the character height. All characters share the same height.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sentence} \cell }{ASCII string buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of characters to draw from sentence. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_top_left} \cell }{X of top-left of the first character (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_top_left} \cell }{Y of top-left of the first character (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hight_pixel} \cell }{Character height in pixels (spelled as in API). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 882} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_character_draw()}, {\b ADL_MAX_CHARACTER_OFFSET}, and {\b ADL_MIN_CHARACTER_OFFSET}.}\par
{
\ql
Referenced by {\b adl_max_min_values_draw_on_figure()}.}\par
}
{\xe \v adl_tan_half_angle\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tan_half_angle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float adl_tan_half_angle ({\b Point}  {\i vi}, {\b Point}  {\i vj}, {\b Point}  {\i p}, float  {\i li}, float  {\i lj})}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute tan(alpha/2) for the angle at point p between segments p->vi and p->vj. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uses the identity tan(alpha/2) = |a\'D7b| / (|a||b| + a\'B7b), where a = vi - p and b = vj - p. The lengths li = |a| and lj = |b| are passed in to avoid recomputation.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i vi} \cell }{Vertex i. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i vj} \cell }{Vertex j. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Pivot point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i li} \cell }{Precomputed |vi - p|. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lj} \cell }{Precomputed |vj - p|. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
tan(alpha/2) (non-negative). \par
}}}{
Definition at line {\b 1778} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b adl_quad_fill_interpolate_color_mean_value()}, and {\b adl_quad_fill_interpolate_normal_mean_value()}.}\par
}
{\xe \v adl_tri_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Tri}  {\i tri}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw the outline of a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space (before transform). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1402} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_line_draw()}, {\b Tri::points}, {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_draw()}.}\par
}
{\xe \v adl_tri_fill_Pinedas_rasterizer\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_fill_Pinedas_rasterizer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_fill_Pinedas_rasterizer ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Tri}  {\i tri}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with flat base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uses the top-left fill convention and performs a depth test using inverse-Z computed from per-vertex z and w.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1425} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b is_top_left}, {\b Tri::light_intensity}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Tri::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_fill_Pinedas_rasterizer()}.}\par
}
{\xe \v adl_tri_fill_Pinedas_rasterizer_interpolate_color\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_fill_Pinedas_rasterizer_interpolate_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_fill_Pinedas_rasterizer_interpolate_color ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Tri}  {\i tri}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle using Pineda's rasterizer with per-vertex colors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates tri.colors[] and optionally modulates by average light_intensity. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space with colors set. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1506} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Tri::colors}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b is_top_left}, {\b Tri::light_intensity}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Tri::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color()}.}\par
}
{\xe \v adl_tri_fill_Pinedas_rasterizer_interpolate_normal\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_fill_Pinedas_rasterizer_interpolate_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_fill_Pinedas_rasterizer_interpolate_normal ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer}, {\b Tri}  {\i tri}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a triangle with interpolated lighting over a uniform color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across the triangle and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle in pixel space; points carry z and w for depth. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1597} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_point_draw()}, {\b Mat2D_uint32::cols}, {\b edge_cross_point}, {\b HexARGB_RGBA_VAR}, {\b is_top_left}, {\b Tri::light_intensity}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Tri::points}, {\b RGBA_hexARGB}, {\b Mat2D_uint32::rows}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}.}\par
}
{\xe \v adl_tri_mesh_draw\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_draw ({\b Mat2D_uint32}  {\i screen_mat}, {\b Tri_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draw outlines for all triangles in a mesh. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Skips elements with to_draw == false.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Stroke color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1679} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_tri_draw()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, and {\b Tri::to_draw}.}\par
}
{\xe \v adl_tri_mesh_fill_Pinedas_rasterizer\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_fill_Pinedas_rasterizer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_fill_Pinedas_rasterizer ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Tri_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies average light_intensity per triangle. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1701} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_tri_is_valid}, {\b adl_tri_fill_Pinedas_rasterizer()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, and {\b Tri::to_draw}.}\par
}
{\xe \v adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Tri_mesh}  {\i mesh}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with a uniform base color. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies average light_intensity per triangle. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1725} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_tri_is_valid}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_color()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, and {\b Tri::to_draw}.}\par
}
{\xe \v adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal\:Almog_Draw_Library.h}
{\xe \v Almog_Draw_Library.h\:adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer_mat}, {\b Tri_mesh}  {\i mesh}, uint32_t  {\i color}, {\b Offset_zoom_param}  {\i offset_zoom_param})}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all triangles in a mesh with interpolated lighting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interpolates light_intensity across each triangle and modulates a uniform base color. Depth-tested.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Destination ARGB pixel buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer_mat} \cell }{Inverse-Z buffer (larger is closer). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh (array + length). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i color} \cell }{Base color (0xAARRGGBB). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i offset_zoom_param} \cell }{Pan/zoom transform. Use ADL_DEFAULT_OFFSET_ZOOM for identity. \cell }
{\row }
}
}{
Definition at line {\b 1750} of file {\b Almog_Draw_Library.h}.}\par
{
\ql
References {\b adl_assert_tri_is_valid}, {\b adl_tri_fill_Pinedas_rasterizer_interpolate_normal()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, and {\b Tri::to_draw}.}\par
{
\ql
Referenced by {\b render()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Draw_Library.h\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_Draw_Library.h}
{\xe \v src/include/Almog_Draw_Library.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00023 {\cf21 #ifndef ALMOG_DRAW_LIBRARY_H_}\par
00024 {\cf21 #define ALMOG_DRAW_LIBRARY_H_}\par
00025 \par
00026 {\cf21 #include <math.h>}\par
00027 {\cf21 #include <stdint.h>}\par
00028 {\cf21 #include <limits.h>}\par
00029 {\cf21 #include <string.h>}\par
00030 {\cf21 #include <float.h>}\par
00031 \par
00032 {\cf21 #include "./Matrix2D.h"}\par
00033 {\cf21 #include "./Almog_Dynamic_Array.h"}\par
00034 \par
00035 {\cf21 #ifndef ADL_ASSERT}\par
00036 {\cf21 #include <assert.h>}\par
00037 {\cf21 #define ADL_ASSERT assert}\par
00038 {\cf21 #endif}\par
00039 \par
00040 {\cf17 typedef} {\cf17 struct }\{\par
00041     {\cf18 float} zoom_multiplier;\par
00042     {\cf18 float} offset_x;\par
00043     {\cf18 float} offset_y;\par
00044     {\cf18 int} mouse_x;\par
00045     {\cf18 int} mouse_y;\par
00046 \} Offset_zoom_param;\par
00047 \par
00048 {\cf21 #ifndef POINT}\par
00049 {\cf21 #define POINT}\par
00050 {\cf17 typedef} {\cf17 struct }\{\par
00051     {\cf18 float} x;\par
00052     {\cf18 float} y;\par
00053     {\cf18 float} z;\par
00054     {\cf18 float} w;\par
00055 \} Point ;\par
00056 {\cf21 #endif}\par
00057 \par
00058 {\cf21 #ifndef CURVE}\par
00059 {\cf21 #define CURVE}\par
00060 {\cf17 typedef} {\cf17 struct }\{\par
00061     uint32_t color;\par
00062     {\cf18 size_t} length;\par
00063     {\cf18 size_t} capacity;\par
00064     Point *elements;\par
00065 \} Curve;\par
00066 {\cf21 #endif}\par
00067 \par
00068 {\cf21 #ifndef CURVE_ADA}\par
00069 {\cf21 #define CURVE_ADA}\par
00070 {\cf17 typedef} {\cf17 struct }\{\par
00071     {\cf18 size_t} length;\par
00072     {\cf18 size_t} capacity;\par
00073     Curve *elements;\par
00074 \} Curve_ada;\par
00075 {\cf21 #endif}\par
00076 \par
00077 {\cf21 #ifndef TRI}\par
00078 {\cf21 #define TRI}\par
00079 {\cf17 typedef} {\cf17 struct }\{\par
00080     Point points[3];\par
00081     Point tex_points[3];\par
00082     Point normals[3];\par
00083     uint32_t colors[3];\par
00084     {\cf18 bool} to_draw;\par
00085     {\cf18 float} light_intensity[3];\par
00086 \} Tri;\par
00087 {\cf21 #endif}\par
00088 \par
00089 {\cf21 #ifndef QUAD}\par
00090 {\cf21 #define QUAD}\par
00091 {\cf17 typedef} {\cf17 struct }\{\par
00092     Point points[4];\par
00093     Point normals[4];\par
00094     uint32_t colors[4];\par
00095     {\cf18 bool} to_draw;\par
00096     {\cf18 float} light_intensity[4];\par
00097 \} Quad;\par
00098 {\cf21 #endif}\par
00099 \par
00100 {\cf21 #ifndef TRI_MESH}\par
00101 {\cf21 #define TRI_MESH}\par
00102 {\cf17 typedef} {\cf17 struct }\{\par
00103     {\cf18 size_t} length;\par
00104     {\cf18 size_t} capacity;\par
00105     Tri *elements;\par
00106 \} Tri_mesh; {\cf20 /* Tri ada array */}\par
00107 {\cf21 #endif}\par
00108 \par
00109 {\cf21 #ifndef QUAD_MESH}\par
00110 {\cf21 #define QUAD_MESH}\par
00111 {\cf17 typedef} {\cf17 struct }\{\par
00112     {\cf18 size_t} length;\par
00113     {\cf18 size_t} capacity;\par
00114     Quad *elements;\par
00115 \} Quad_mesh; {\cf20 /* Quad ada array */}\par
00116 {\cf21 #endif}\par
00117 \par
00118 {\cf17 typedef} {\cf17 struct }\{\par
00119     {\cf18 int} min_x_pixel;\par
00120     {\cf18 int} max_x_pixel;\par
00121     {\cf18 int} min_y_pixel;\par
00122     {\cf18 int} max_y_pixel;\par
00123     {\cf18 float} min_x;\par
00124     {\cf18 float} max_x;\par
00125     {\cf18 float} min_y;\par
00126     {\cf18 float} max_y;\par
00127     {\cf18 int} x_axis_head_size;\par
00128     {\cf18 int} y_axis_head_size;\par
00129     Offset_zoom_param offset_zoom_param;\par
00130     Curve_ada src_curve_array;\par
00131     Point top_left_position;\par
00132     Mat2D_uint32 pixels_mat;\par
00133     Mat2D inv_z_buffer_mat;\par
00134     uint32_t background_color;\par
00135     {\cf18 bool} to_draw_axis;\par
00136     {\cf18 bool} to_draw_max_min_values;\par
00137 \} Figure;\par
00138 \par
00139 {\cf17 typedef} {\cf17 struct }\{\par
00140     Curve_ada curves;\par
00141     {\cf18 float} min_e1;\par
00142     {\cf18 float} max_e1;\par
00143     {\cf18 float} min_e2;\par
00144     {\cf18 float} max_e2;\par
00145     {\cf18 int} num_samples_e1;\par
00146     {\cf18 int} num_samples_e2;\par
00147     {\cf18 float} de1;\par
00148     {\cf18 float} de2;\par
00149     {\cf18 char} plane[3];\par
00150 \} Grid; {\cf20 /* direction: e1, e2 */}\par
00151 \par
00152 \par
00153 {\cf21 #ifndef HexARGB_RGBA}\par
00154 {\cf21 #define HexARGB_RGBA(x) ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)}\par
00155 {\cf21 #endif}\par
00156 {\cf21 #ifndef HexARGB_RGB_VAR}\par
00157 {\cf21 #define HexARGB_RGB_VAR(x, r, g, b) r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);}\par
00158 {\cf21 #endif}\par
00159 {\cf21 #ifndef HexARGB_RGBA_VAR}\par
00160 {\cf21 #define HexARGB_RGBA_VAR(x, r, g, b, a) r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)}\par
00161 {\cf21 #endif}\par
00162 {\cf21 #ifndef RGB_hexRGB}\par
00163 {\cf21 #define RGB_hexRGB(r, g, b) (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}\par
00164 {\cf21 #endif}\par
00165 {\cf21 #ifndef RGBA_hexARGB}\par
00166 {\cf21 #define RGBA_hexARGB(r, g, b, a) (int)(0x01000000l*(int)(fminf(a, 255)) + 0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}\par
00167 {\cf21 #endif}\par
00168 \par
00169 \par
00170 {\cf18 void}    adl_point_draw(Mat2D_uint32 screen_mat, {\cf18 int} x, {\cf18 int} y, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00171 {\cf18 void}    adl_line_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 float} x1_input, {\cf17 const} {\cf18 float} y1_input, {\cf17 const} {\cf18 float} x2_input, {\cf17 const} {\cf18 float} y2_input, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00172 {\cf18 void}    adl_lines_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param);\par
00173 {\cf18 void}    adl_lines_loop_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param);\par
00174 {\cf18 void}    adl_arrow_draw(Mat2D_uint32 screen_mat, {\cf18 int} xs, {\cf18 int} ys, {\cf18 int} xe, {\cf18 int} ye, {\cf18 float} head_size, {\cf18 float} angle_deg, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00175 \par
00176 {\cf18 void}    adl_character_draw(Mat2D_uint32 screen_mat, {\cf18 char} c, {\cf18 int} width_pixel, {\cf18 int} hight_pixel, {\cf18 int} x_top_left, {\cf18 int} y_top_left, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00177 {\cf18 void}    adl_sentence_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 char} sentence[], {\cf18 size_t} len, {\cf17 const} {\cf18 int} x_top_left, {\cf17 const} {\cf18 int} y_top_left, {\cf17 const} {\cf18 int} hight_pixel, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param);\par
00178 \par
00179 {\cf18 void}    adl_rectangle_draw_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00180 {\cf18 void}    adl_rectangle_fill_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00181 \par
00182 {\cf18 void}    adl_quad_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00183 {\cf18 void}    adl_quad_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00184 {\cf18 void}    adl_quad_fill_interpolate_normal_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00185 {\cf18 void}    adl_quad_fill_interpolate_color_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, Offset_zoom_param offset_zoom_param);\par
00186 \par
00187 {\cf18 void}    adl_quad_mesh_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00188 {\cf18 void}    adl_quad_mesh_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00189 {\cf18 void}    adl_quad_mesh_fill_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00190 {\cf18 void}    adl_quad_mesh_fill_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, Offset_zoom_param offset_zoom_param);\par
00191 \par
00192 {\cf18 void}    adl_circle_draw(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00193 {\cf18 void}    adl_circle_fill(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00194 \par
00195 {\cf18 void}    adl_tri_draw(Mat2D_uint32 screen_mat, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00196 {\cf18 void}    adl_tri_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00197 {\cf18 void}    adl_tri_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, Offset_zoom_param offset_zoom_param);\par
00198 {\cf18 void}    adl_tri_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00199 \par
00200 {\cf18 void}    adl_tri_mesh_draw(Mat2D_uint32 screen_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00201 {\cf18 void}    adl_tri_mesh_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00202 {\cf18 void}    adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, Offset_zoom_param offset_zoom_param);\par
00203 {\cf18 void}    adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00204 \par
00205 {\cf18 float}   adl_tan_half_angle(Point vi, Point vj, Point p, {\cf18 float} li, {\cf18 float} lj);\par
00206 {\cf18 float}   adl_linear_map({\cf18 float} s, {\cf18 float} min_in, {\cf18 float} max_in, {\cf18 float} min_out, {\cf18 float} max_out);\par
00207 {\cf18 void}    adl_quad2tris(Quad quad, Tri *tri1, Tri *tri2, {\cf18 char} split_line[]);\par
00208 {\cf18 void}    adl_linear_sRGB_to_okLab(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *a, {\cf18 float} *b);\par
00209 {\cf18 void}    adl_okLab_to_linear_sRGB({\cf18 float} L, {\cf18 float} a, {\cf18 float} b, uint32_t *hex_ARGB);\par
00210 {\cf18 void}    adl_linear_sRGB_to_okLch(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *c, {\cf18 float} *h_deg);\par
00211 {\cf18 void}    adl_okLch_to_linear_sRGB({\cf18 float} L, {\cf18 float} c, {\cf18 float} h_deg, uint32_t *hex_ARGB);\par
00212 {\cf18 void}    adl_interpolate_ARGBcolor_on_okLch(uint32_t color1, uint32_t color2, {\cf18 float} t, {\cf18 float} num_of_rotations, uint32_t *color_out);\par
00213 \par
00214 Figure  adl_figure_alloc({\cf18 size_t} rows, {\cf18 size_t} cols, Point top_left_position);\par
00215 {\cf18 void}    adl_figure_copy_to_screen(Mat2D_uint32 screen_mat, Figure figure);\par
00216 {\cf18 void}    adl_axis_draw_on_figure(Figure *figure);\par
00217 {\cf18 void}    adl_max_min_values_draw_on_figure(Figure figure);\par
00218 {\cf18 void}    adl_curve_add_to_figure(Figure *figure, Point *src_points, {\cf18 size_t} src_len, uint32_t color);\par
00219 {\cf18 void}    adl_curves_plot_on_figure(Figure figure);\par
00220 {\cf18 void}    adl_2Dscalar_interp_on_figure(Figure figure, {\cf18 double} *x_2Dmat, {\cf18 double} *y_2Dmat, {\cf18 double} *scalar_2Dmat, {\cf18 int} ni, {\cf18 int} nj, {\cf18 char} color_scale[], {\cf18 float} num_of_rotations);\par
00221 \par
00222 Grid    adl_cartesian_grid_create({\cf18 float} min_e1, {\cf18 float} max_e1, {\cf18 float} min_e2, {\cf18 float} max_e2, {\cf18 int} num_samples_e1, {\cf18 int} num_samples_e2, {\cf18 char} plane[], {\cf18 float} third_direction_position);\par
00223 {\cf18 void}    adl_grid_draw(Mat2D_uint32 screen_mat, Grid grid, uint32_t color, Offset_zoom_param offset_zoom_param);\par
00224 \par
00225 {\cf21 #endif }{\cf20 /*ALMOG_RENDER_SHAPES_H_*/}{\cf21 }\par
00226 \par
00227 {\cf21 #ifdef ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00228 {\cf21 #undef ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00229 \par
00230 {\cf21 #define RED_hexARGB    0xFFFF0000}\par
00231 {\cf21 #define GREEN_hexARGB  0xFF00FF00}\par
00232 {\cf21 #define BLUE_hexARGB   0xFF0000FF}\par
00233 {\cf21 #define PURPLE_hexARGB 0xFFFF00FF}\par
00234 {\cf21 #define CYAN_hexARGB   0xFF00FFFF}\par
00235 {\cf21 #define YELLOW_hexARGB 0xFFFFFF00}\par
00236 \par
00237 {\cf21 #define edge_cross_point(a1, b, a2, p) (b.x-a1.x)*(p.y-a2.y)-(b.y-a1.y)*(p.x-a2.x)}\par
00238 {\cf21 #define is_top_edge(x, y) (y == 0 && x > 0)}\par
00239 {\cf21 #define is_left_edge(x, y) (y < 0)}\par
00240 {\cf21 #define is_top_left(ps, pe) (is_top_edge(pe.x-ps.x, pe.y-ps.y) || is_left_edge(pe.x-ps.x, pe.y-ps.y))}\par
00241 \par
00242 {\cf21 #define ADL_MAX_POINT_VAL 1e5}\par
00243 {\cf21 #define adl_assert_point_is_valid(p) ADL_ASSERT(isfinite(p.x) && isfinite(p.y) && isfinite(p.z) && isfinite(p.w))}\par
00244 {\cf21 #define adl_assert_tri_is_valid(tri) adl_assert_point_is_valid(tri.points[0]); \\}\par
00245 {\cf21         adl_assert_point_is_valid(tri.points[1]);                              \\}\par
00246 {\cf21         adl_assert_point_is_valid(tri.points[2])}\par
00247 {\cf21 #define adl_assert_quad_is_valid(quad) adl_assert_point_is_valid(quad.points[0]);   \\}\par
00248 {\cf21         adl_assert_point_is_valid(quad.points[1]);                                  \\}\par
00249 {\cf21         adl_assert_point_is_valid(quad.points[2]);                                  \\}\par
00250 {\cf21         adl_assert_point_is_valid(quad.points[3])}\par
00251 \par
00252 {\cf21 #define ADL_FIGURE_PADDING_PRECENTAGE 20}\par
00253 {\cf21 #define ADL_MAX_FIGURE_PADDING 70}\par
00254 {\cf21 #define ADL_MIN_FIGURE_PADDING 20}\par
00255 {\cf21 #define ADL_MAX_HEAD_SIZE 15}\par
00256 {\cf21 #define ADL_FIGURE_HEAD_ANGLE_DEG 30}\par
00257 {\cf21 #define ADL_FIGURE_AXIS_COLOR 0xff000000}\par
00258 \par
00259 {\cf21 #define ADL_MAX_CHARACTER_OFFSET 10}\par
00260 {\cf21 #define ADL_MIN_CHARACTER_OFFSET 5}\par
00261 {\cf21 #define ADL_MAX_SENTENCE_LEN 256}\par
00262 {\cf21 #define ADL_MAX_ZOOM 1e3}\par
00263 \par
00264 {\cf21 #define ADL_DEFAULT_OFFSET_ZOOM (Offset_zoom_param)\{1,0,0,0,0\}}\par
00265 {\cf21 #define adl_offset_zoom_point(p, window_w, window_h, offset_zoom_param)                                             \\}\par
00266 {\cf21     (p).x = ((p).x - (window_w)/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + (window_w)/2; \\}\par
00267 {\cf21     (p).y = ((p).y - (window_h)/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + (window_h)/2}\par
00268 \par
00283 {\cf18 void} adl_point_draw(Mat2D_uint32 screen_mat, {\cf18 int} x, {\cf18 int} y, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00284 \{\par
00285     {\cf18 float} window_w = (float)screen_mat.cols;\par
00286     {\cf18 float} window_h = ({\cf18 float})screen_mat.rows;\par
00287 \par
00288     x = (x - window_w/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + window_w/2;\par
00289     y = (y - window_h/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + window_h/2;\par
00290 \par
00291     {\cf19 if} ((x < ({\cf18 int})screen_mat.cols && y < (int)screen_mat.rows) && (x >= 0 && y >= 0)) \{ {\cf20 /* point is in screen */}\par
00292         uint8_t r_new, g_new, b_new, a_new;\par
00293         uint8_t r_current, g_current, b_current, a_current;\par
00294         HexARGB_RGBA_VAR(MAT2D_AT_UINT32(screen_mat, y, x), r_current, g_current, b_current, a_current);\par
00295         HexARGB_RGBA_VAR(color, r_new, g_new, b_new, a_new);\par
00296         MAT2D_AT_UINT32(screen_mat, y, x) = RGBA_hexARGB(r_current*(1-a_new/255.0f) + r_new*a_new/255.0f, g_current*(1-a_new/255.0f) + g_new*a_new/255.0f, b_current*(1-a_new/255.0f) + b_new*a_new/255.0f, 255);\par
00297         (void)a_current;\par
00298     \}\par
00299 \}\par
00300 \par
00316 {\cf18 void} adl_line_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 float} x1_input, {\cf17 const} {\cf18 float} y1_input, {\cf17 const} {\cf18 float} x2_input, {\cf17 const} {\cf18 float} y2_input, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00317 \{\par
00318     {\cf20 /* This function is inspired by the Olive.c function developed by 'Tsoding' on his YouTube channel. You can fined the video in this link: https://youtu.be/LmQKZmQh1ZQ?list=PLpM-Dvs8t0Va-Gb0Dp4d9t8yvNFHaKH6N&t=4683. */}\par
00319 \par
00320     {\cf18 float} window_w = (float)screen_mat.cols;\par
00321     {\cf18 float} window_h = ({\cf18 float})screen_mat.rows;\par
00322 \par
00323     {\cf18 int} x1 = (x1_input - window_w/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + window_w/2;\par
00324     {\cf18 int} x2 = (x2_input - window_w/2 + offset_zoom_param.offset_x) * offset_zoom_param.zoom_multiplier + window_w/2;\par
00325     {\cf18 int} y1 = (y1_input - window_h/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + window_h/2;\par
00326     {\cf18 int} y2 = (y2_input - window_h/2 + offset_zoom_param.offset_y) * offset_zoom_param.zoom_multiplier + window_h/2;\par
00327 \par
00328     ADL_ASSERT(({\cf18 int})fabsf(fabsf(({\cf18 float})x2) - fabsf(({\cf18 float})x1)) < ADL_MAX_POINT_VAL);\par
00329     ADL_ASSERT(({\cf18 int})fabsf(fabsf(({\cf18 float})y2) - fabsf(({\cf18 float})y1)) < ADL_MAX_POINT_VAL);\par
00330 \par
00331     {\cf18 int} x = x1;\par
00332     {\cf18 int} y = y1;\par
00333     {\cf18 int} dx, dy;\par
00334 \par
00335     adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00336 \par
00337     dx = x2 - x1;\par
00338     dy = y2 - y1;\par
00339 \par
00340     ADL_ASSERT(dy > INT_MIN && dy < INT_MAX);\par
00341     ADL_ASSERT(dx > INT_MIN && dx < INT_MAX);\par
00342 \par
00343     {\cf19 if} (0 == dx && 0 == dy) {\cf19 return};\par
00344     {\cf19 if} (0 == dx) \{\par
00345         {\cf19 while} (x != x2 || y != y2) \{\par
00346             {\cf19 if} (dy > 0) \{\par
00347                 y++;\par
00348             \}\par
00349             {\cf19 if} (dy < 0) \{\par
00350                 y--;\par
00351             \}\par
00352             adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00353         \}\par
00354         {\cf19 return};\par
00355     \}\par
00356     {\cf19 if} (0 == dy) \{\par
00357         {\cf19 while} (x != x2 || y != y2) \{\par
00358             {\cf19 if} (dx > 0) \{\par
00359                 x++;\par
00360             \}\par
00361             {\cf19 if} (dx < 0) \{\par
00362                 x--;\par
00363             \}\par
00364             adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00365         \}\par
00366         {\cf19 return};\par
00367     \}\par
00368 \par
00369     {\cf20 /* float m = (float)dy / dx */}\par
00370     {\cf18 int} b = y1 - dy * x1 / dx;\par
00371 \par
00372     {\cf19 if} (x1 > x2) \{\par
00373         {\cf18 int} temp_x = x1;\par
00374         x1 = x2;\par
00375         x2 = temp_x;\par
00376     \}\par
00377     {\cf19 for} (x = x1; x < x2; x++) \{\par
00378         {\cf18 int} sy1 = dy * x / dx + b;\par
00379         {\cf18 int} sy2 = dy * (x + 1) / dx + b;\par
00380         {\cf19 if} (sy1 > sy2) \{\par
00381             {\cf18 int} temp_y = sy1;\par
00382             sy1 = sy2;\par
00383             sy2 = temp_y;\par
00384         \}\par
00385         {\cf19 for} (y = sy1; y <= sy2; y++) \{\par
00386             adl_point_draw(screen_mat, x, y, color, (Offset_zoom_param)\{1,0,0,0,0\});\par
00387         \}\par
00388     \}\par
00389 \par
00390 \}\par
00391 \par
00403 {\cf18 void} adl_lines_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param)\par
00404 \{\par
00405     {\cf19 if} (len == 0) {\cf19 return};\par
00406     {\cf19 for} ({\cf18 size_t} i = 0; i < len-1; i++) \{\par
00407         adl_line_draw(screen_mat, points[i].x, points[i].y, points[i+1].x, points[i+1].y, color, offset_zoom_param);\par
00408     \}\par
00409 \}\par
00410 \par
00423 {\cf18 void} adl_lines_loop_draw({\cf17 const} Mat2D_uint32 screen_mat, {\cf17 const} Point *points, {\cf17 const} {\cf18 size_t} len, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param)\par
00424 \{\par
00425     {\cf19 if} (len == 0) {\cf19 return};\par
00426     {\cf19 for} ({\cf18 size_t} i = 0; i < len-1; i++) \{\par
00427         adl_line_draw(screen_mat, points[i].x, points[i].y, points[i+1].x, points[i+1].y, color, offset_zoom_param);\par
00428     \}\par
00429     adl_line_draw(screen_mat, points[len-1].x, points[len-1].y, points[0].x, points[0].y, color, offset_zoom_param);\par
00430 \}\par
00431 \par
00432 \par
00451 {\cf18 void} adl_arrow_draw(Mat2D_uint32 screen_mat, {\cf18 int} xs, {\cf18 int} ys, {\cf18 int} xe, {\cf18 int} ye, {\cf18 float} head_size, {\cf18 float} angle_deg, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00452 \{\par
00453     Mat2D pe = mat2D_alloc(3, 1);\par
00454     mat2D_fill(pe, 0);\par
00455     MAT2D_AT(pe, 0, 0) = xe;\par
00456     MAT2D_AT(pe, 1, 0) = ye;\par
00457     Mat2D v1 = mat2D_alloc(3, 1);\par
00458     mat2D_fill(v1, 0);\par
00459     Mat2D v2 = mat2D_alloc(3, 1);\par
00460     mat2D_fill(v2, 0);\par
00461     Mat2D temp_v = mat2D_alloc(3, 1);\par
00462     mat2D_fill(temp_v, 0);\par
00463     Mat2D DCM_p = mat2D_alloc(3, 3);\par
00464     mat2D_fill(DCM_p, 0);\par
00465     mat2D_set_rot_mat_z(DCM_p, angle_deg);\par
00466     Mat2D DCM_m = mat2D_alloc(3, 3);\par
00467     mat2D_fill(DCM_m, 0);\par
00468     mat2D_set_rot_mat_z(DCM_m, -angle_deg);\par
00469 \par
00470     {\cf18 int} x_center = xs*head_size + xe*(1-head_size);\par
00471     {\cf18 int} y_center = ys*head_size + ye*(1-head_size);\par
00472 \par
00473     MAT2D_AT(v1, 0, 0) = x_center;\par
00474     MAT2D_AT(v1, 1, 0) = y_center;\par
00475     mat2D_copy(v2, v1);\par
00476 \par
00477     {\cf20 /* v1 */}\par
00478     mat2D_copy(temp_v, v1);\par
00479     mat2D_sub(temp_v, pe);\par
00480     mat2D_fill(v1, 0);\par
00481     mat2D_dot(v1, DCM_p, temp_v);\par
00482     mat2D_add(v1, pe);\par
00483 \par
00484     {\cf20 /* v2 */}\par
00485     mat2D_copy(temp_v, v2);\par
00486     mat2D_sub(temp_v, pe);\par
00487     mat2D_fill(v2, 0);\par
00488     mat2D_dot(v2, DCM_m, temp_v);\par
00489     mat2D_add(v2, pe);\par
00490 \par
00491     adl_line_draw(screen_mat, MAT2D_AT(v1, 0, 0), MAT2D_AT(v1, 1, 0), xe, ye, color, offset_zoom_param);\par
00492     adl_line_draw(screen_mat, MAT2D_AT(v2, 0, 0), MAT2D_AT(v2, 1, 0), xe, ye, color, offset_zoom_param);\par
00493     adl_line_draw(screen_mat, xs, ys, xe, ye, color, offset_zoom_param);\par
00494 \par
00495     mat2D_free(pe);\par
00496     mat2D_free(v1);\par
00497     mat2D_free(v2);\par
00498     mat2D_free(temp_v);\par
00499     mat2D_free(DCM_p);\par
00500     mat2D_free(DCM_m);\par
00501 \}\par
00502 \par
00519 {\cf18 void} adl_character_draw(Mat2D_uint32 screen_mat, {\cf18 char} c, {\cf18 int} width_pixel, {\cf18 int} hight_pixel, {\cf18 int} x_top_left, {\cf18 int} y_top_left, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00520 \{\par
00521     {\cf19 switch} (c)\par
00522     \{\par
00523     {\cf19 case} {\cf23 'a'}:\par
00524     {\cf19 case} {\cf23 'A'}:\par
00525         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel/2, y_top_left, color, offset_zoom_param);\par
00526         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00527         adl_line_draw(screen_mat, x_top_left+width_pixel/6, y_top_left+2*hight_pixel/3, x_top_left+5*width_pixel/6, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00528         {\cf19 break};\par
00529     {\cf19 case} {\cf23 'b'}:\par
00530     {\cf19 case} {\cf23 'B'}:\par
00531         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00532         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00533         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00534         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00535         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00536 \par
00537         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00538 \par
00539         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00540         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00541         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00542         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00543         {\cf19 break};\par
00544     {\cf19 case} {\cf23 'c'}:\par
00545     {\cf19 case} {\cf23 'C'}:\par
00546         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00547         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00548         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00549         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00550         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00551         {\cf19 break};\par
00552     {\cf19 case} {\cf23 'd'}:\par
00553     {\cf19 case} {\cf23 'D'}:\par
00554         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00555         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00556         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00557         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00558         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00559         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left, y_top_left, color, offset_zoom_param);\par
00560         {\cf19 break};\par
00561     {\cf19 case} {\cf23 'e'}:\par
00562     {\cf19 case} {\cf23 'E'}:\par
00563         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left, color, offset_zoom_param);\par
00564         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00565         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00566 \par
00567         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00568         {\cf19 break};\par
00569     {\cf19 case} {\cf23 'f'}:\par
00570     {\cf19 case} {\cf23 'F'}:\par
00571         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left, color, offset_zoom_param);\par
00572         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00573 \par
00574         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00575         {\cf19 break};\par
00576     {\cf19 case} {\cf23 'g'}:\par
00577     {\cf19 case} {\cf23 'G'}:\par
00578         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00579         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00580         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00581         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00582         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00583         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00584         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00585         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00586         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/2, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00587         {\cf19 break};\par
00588     {\cf19 case} {\cf23 'h'}:\par
00589     {\cf19 case} {\cf23 'H'}:\par
00590         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00591         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00592         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00593         {\cf19 break};\par
00594     {\cf19 case} {\cf23 'i'}:\par
00595     {\cf19 case} {\cf23 'I'}:\par
00596         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00597         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00598         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00599         {\cf19 break};\par
00600     {\cf19 case} {\cf23 'j'}:\par
00601     {\cf19 case} {\cf23 'J'}:\par
00602         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00603         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+2*width_pixel/3, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00604         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00605         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00606         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel/6, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00607         {\cf19 break};\par
00608     {\cf19 case} {\cf23 'k'}:\par
00609     {\cf19 case} {\cf23 'K'}:\par
00610         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00611         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00612         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00613         {\cf19 break};\par
00614     {\cf19 case} {\cf23 'l'}:\par
00615     {\cf19 case} {\cf23 'L'}:\par
00616         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00617         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00618         {\cf19 break};\par
00619     {\cf19 case} {\cf23 'm'}:\par
00620     {\cf19 case} {\cf23 'M'}:\par
00621         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left, y_top_left, color, offset_zoom_param);\par
00622         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00623         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00624         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00625         {\cf19 break};\par
00626     {\cf19 case} {\cf23 'n'}:\par
00627     {\cf19 case} {\cf23 'N'}:\par
00628         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left, y_top_left, color, offset_zoom_param);\par
00629         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00630         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00631         {\cf19 break};\par
00632     {\cf19 case} {\cf23 'o'}:\par
00633     {\cf19 case} {\cf23 'O'}:\par
00634         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00635         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00636         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00637         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00638         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00639         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00640         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00641         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00642         {\cf19 break};\par
00643     {\cf19 case} {\cf23 'p'}:\par
00644     {\cf19 case} {\cf23 'P'}:\par
00645         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00646         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00647         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00648         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00649         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00650 \par
00651         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00652         {\cf19 break};\par
00653     {\cf19 case} {\cf23 'q'}:\par
00654     {\cf19 case} {\cf23 'Q'}:\par
00655         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00656         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00657         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00658         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00659         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00660         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00661         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00662         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00663 \par
00664         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00665         {\cf19 break};\par
00666     {\cf19 case} {\cf23 'r'}:\par
00667     {\cf19 case} {\cf23 'R'}:\par
00668         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00669         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00670         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00671         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00672         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00673 \par
00674         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00675 \par
00676         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00677         {\cf19 break};\par
00678     {\cf19 case} {\cf23 's'}:\par
00679     {\cf19 case} {\cf23 'S'}:\par
00680         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00681         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00682         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00683 \par
00684         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00685         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/3, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00686         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00687         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00688 \par
00689         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00690         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00691         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00692         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00693         {\cf19 break};\par
00694     {\cf19 case} {\cf23 't'}:\par
00695     {\cf19 case} {\cf23 'T'}:\par
00696         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00697         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00698         {\cf19 break};\par
00699     {\cf19 case} {\cf23 'u'}:\par
00700     {\cf19 case} {\cf23 'U'}:\par
00701         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00702         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00703         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00704         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00705         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00706         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00707         {\cf19 break};\par
00708     {\cf19 case} {\cf23 'v'}:\par
00709     {\cf19 case} {\cf23 'V'}:\par
00710         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00711         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00712         {\cf19 break};\par
00713     {\cf19 case} {\cf23 'w'}:\par
00714     {\cf19 case} {\cf23 'W'}:\par
00715         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00716         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel/2, y_top_left, color, offset_zoom_param);\par
00717         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00718         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00719         {\cf19 break};\par
00720     {\cf19 case} {\cf23 'x'}:\par
00721     {\cf19 case} {\cf23 'X'}:\par
00722         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00723         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00724         {\cf19 break};\par
00725     {\cf19 case} {\cf23 'y'}:\par
00726     {\cf19 case} {\cf23 'Y'}:\par
00727         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00728         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00729         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left+hight_pixel/2, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00730         {\cf19 break};\par
00731     {\cf19 case} {\cf23 'z'}:\par
00732     {\cf19 case} {\cf23 'Z'}:\par
00733         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00734         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00735         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00736         {\cf19 break};\par
00737     {\cf19 case} {\cf23 '.'}:\par
00738         adl_rectangle_fill_min_max(screen_mat, x_top_left+width_pixel/6, x_top_left+width_pixel/3, y_top_left+5*hight_pixel/6, y_top_left+hight_pixel, color, offset_zoom_param);\par
00739         {\cf19 break};\par
00740     {\cf19 case} {\cf23 ':'}:\par
00741         adl_rectangle_fill_min_max(screen_mat, x_top_left+width_pixel/6, x_top_left+width_pixel/3, y_top_left+5*hight_pixel/6, y_top_left+hight_pixel, color, offset_zoom_param);\par
00742         adl_rectangle_fill_min_max(screen_mat, x_top_left+width_pixel/6, x_top_left+width_pixel/3, y_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00743         {\cf19 break};\par
00744     {\cf19 case} {\cf23 '0'}:\par
00745         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00746         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00747         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00748         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00749         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00750         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00751         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00752         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00753 \par
00754         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00755         {\cf19 break};\par
00756     {\cf19 case} {\cf23 '1'}:\par
00757         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left+width_pixel/2, y_top_left, color, offset_zoom_param);\par
00758         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00759         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00760         {\cf19 break};\par
00761     {\cf19 case} {\cf23 '2'}:\par
00762         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00763         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00764         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00765         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00766         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00767         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00768         {\cf19 break};\par
00769     {\cf19 case} {\cf23 '3'}:\par
00770         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00771         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00772         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00773         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00774         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00775 \par
00776         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00777 \par
00778         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00779         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00780         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00781         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00782         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00783         {\cf19 break};\par
00784     {\cf19 case} {\cf23 '4'}:\par
00785         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00786         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00787         adl_line_draw(screen_mat, x_top_left, y_top_left+2*hight_pixel/3, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00788         {\cf19 break};\par
00789     {\cf19 case} {\cf23 '5'}:\par
00790         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left, y_top_left, color, offset_zoom_param);\par
00791         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00792 \par
00793         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00794         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00795 \par
00796         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00797         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00798         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00799         {\cf19 break};\par
00800     {\cf19 case} {\cf23 '6'}:\par
00801         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00802         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00803         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00804 \par
00805         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00806         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00807         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00808         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00809         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00810         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00811         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00812         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00813         {\cf19 break};\par
00814     {\cf19 case} {\cf23 '7'}:\par
00815         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00816         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00817         {\cf19 break};\par
00818     {\cf19 case} {\cf23 '8'}:\par
00819         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00820         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/3, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00821         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00822         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00823         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00824 \par
00825         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00826         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/3, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00827         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00828         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00829 \par
00830         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00831         adl_line_draw(screen_mat, x_top_left, y_top_left+2*hight_pixel/3, x_top_left, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00832         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00833         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00834         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00835         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+2*hight_pixel/3, color, offset_zoom_param);\par
00836         {\cf19 break};\par
00837     {\cf19 case} {\cf23 '9'}:\par
00838         adl_line_draw(screen_mat, x_top_left, y_top_left+5*hight_pixel/6, x_top_left+width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00839         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, color, offset_zoom_param);\par
00840         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, color, offset_zoom_param);\par
00841         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+5*hight_pixel/6, x_top_left+width_pixel, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00842         adl_line_draw(screen_mat, x_top_left+width_pixel, y_top_left+hight_pixel/6, x_top_left+2*width_pixel/3, y_top_left, color, offset_zoom_param);\par
00843         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left, x_top_left+width_pixel/3, y_top_left, color, offset_zoom_param);\par
00844         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left, x_top_left, y_top_left+hight_pixel/6, color, offset_zoom_param);\par
00845         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/6, x_top_left, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00846         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/3, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00847         adl_line_draw(screen_mat, x_top_left+width_pixel/3, y_top_left+hight_pixel/2, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00848         adl_line_draw(screen_mat, x_top_left+2*width_pixel/3, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/3, color, offset_zoom_param);\par
00849         {\cf19 break};\par
00850     {\cf19 case} {\cf23 '-'}:\par
00851         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00852         {\cf19 break};\par
00853     {\cf19 case} {\cf23 '+'}:\par
00854         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel/2, x_top_left+width_pixel, y_top_left+hight_pixel/2, color, offset_zoom_param);\par
00855         adl_line_draw(screen_mat, x_top_left+width_pixel/2, y_top_left, x_top_left+width_pixel/2, y_top_left+hight_pixel, color, offset_zoom_param);\par
00856         {\cf19 break};\par
00857     {\cf19 case} {\cf23 ' '}:\par
00858         {\cf19 break};\par
00859     {\cf19 default}:\par
00860         adl_rectangle_draw_min_max(screen_mat, x_top_left, x_top_left+width_pixel, y_top_left, y_top_left+hight_pixel, color, offset_zoom_param);\par
00861         adl_line_draw(screen_mat, x_top_left, y_top_left, x_top_left+width_pixel, y_top_left+hight_pixel, color, offset_zoom_param);\par
00862         adl_line_draw(screen_mat, x_top_left, y_top_left+hight_pixel, x_top_left+width_pixel, y_top_left, color, offset_zoom_param);\par
00863         {\cf19 break};\par
00864     \}\par
00865 \}\par
00866 \par
00882 {\cf18 void} adl_sentence_draw(Mat2D_uint32 screen_mat, {\cf17 const} {\cf18 char} sentence[], {\cf18 size_t} len, {\cf17 const} {\cf18 int} x_top_left, {\cf17 const} {\cf18 int} y_top_left, {\cf17 const} {\cf18 int} hight_pixel, {\cf17 const} uint32_t color, Offset_zoom_param offset_zoom_param)\par
00883 \{\par
00884     {\cf18 int} character_width_pixel = hight_pixel/2;\par
00885     {\cf18 int} current_x_top_left = x_top_left;\par
00886     {\cf18 int} character_x_offset = (int)fmaxf(fminf(ADL_MAX_CHARACTER_OFFSET, character_width_pixel / 5), ADL_MIN_CHARACTER_OFFSET);\par
00887 \par
00888     {\cf19 for} ({\cf18 size_t} char_index = 0; char_index < len; char_index++) \{\par
00889         adl_character_draw(screen_mat, sentence[char_index], character_width_pixel, hight_pixel, current_x_top_left, y_top_left, color, offset_zoom_param);\par
00890         current_x_top_left += character_width_pixel + character_x_offset;\par
00891     \}\par
00892 \par
00893 \}\par
00894 \par
00906 {\cf18 void} adl_rectangle_draw_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00907 \{\par
00908     adl_line_draw(screen_mat, min_x, min_y, max_x, min_y, color, offset_zoom_param);\par
00909     adl_line_draw(screen_mat, min_x, max_y, max_x, max_y, color, offset_zoom_param);\par
00910     adl_line_draw(screen_mat, min_x, min_y, min_x, max_y, color, offset_zoom_param);\par
00911     adl_line_draw(screen_mat, max_x, min_y, max_x, max_y, color, offset_zoom_param);\par
00912 \}\par
00913 \par
00925 {\cf18 void} adl_rectangle_fill_min_max(Mat2D_uint32 screen_mat, {\cf18 int} min_x, {\cf18 int} max_x, {\cf18 int} min_y, {\cf18 int} max_y, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00926 \{\par
00927     {\cf19 for} ({\cf18 int} y = min_y; y <= max_y; y++) \{\par
00928         adl_line_draw(screen_mat, min_x, y, max_x, y, color, offset_zoom_param);\par
00929     \}\par
00930 \}\par
00931 \par
00943 {\cf18 void} adl_quad_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00944 \{\par
00945     (void)inv_z_buffer;\par
00946     adl_lines_loop_draw(screen_mat, quad.points, 4, color, offset_zoom_param);\par
00947 \}\par
00948 \par
00961 {\cf18 void} adl_quad_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param)\par
00962 \{\par
00963     Point p0 = quad.points[0];\par
00964     Point p1 = quad.points[1];\par
00965     Point p2 = quad.points[2];\par
00966     Point p3 = quad.points[3];\par
00967 \par
00968     {\cf18 int} x_min = fminf(p0.x, fminf(p1.x, fminf(p2.x, p3.x)));\par
00969     {\cf18 int} x_max = fmaxf(p0.x, fmaxf(p1.x, fmaxf(p2.x, p3.x)));\par
00970     {\cf18 int} y_min = fminf(p0.y, fminf(p1.y, fminf(p2.y, p3.y)));\par
00971     {\cf18 int} y_max = fmaxf(p0.y, fmaxf(p1.y, fmaxf(p2.y, p3.y)));\par
00972 \par
00973     {\cf19 if} (x_min < 0) x_min = 0;\par
00974     {\cf19 if} (y_min < 0) y_min = 0;\par
00975     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = (int)screen_mat.cols - 1;\par
00976     if (y_max >= ({\cf18 int})screen_mat.rows) y_max = ({\cf18 int})screen_mat.rows - 1;\par
00977 \par
00978     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2) + edge_cross_point(p2, p3, p3, p0);\par
00979     {\cf19 if} (fabs(w) < 1e-6) \{\par
00980         {\cf20 // adl_quad_draw(screen_mat, inv_z_buffer, quad, quad.colors[0], offset_zoom_param);}\par
00981         {\cf19 return};\par
00982     \}\par
00983 \par
00984     {\cf18 float} size_p3_to_p0 = sqrt((p0.x - p3.x)*(p0.x - p3.x) + (p0.y - p3.y)*(p0.y - p3.y));\par
00985     {\cf18 float} size_p0_to_p1 = sqrt((p1.x - p0.x)*(p1.x - p0.x) + (p1.y - p0.y)*(p1.y - p0.y));\par
00986     {\cf18 float} size_p1_to_p2 = sqrt((p2.x - p1.x)*(p2.x - p1.x) + (p2.y - p1.y)*(p2.y - p1.y));\par
00987     {\cf18 float} size_p2_to_p3 = sqrt((p3.x - p2.x)*(p3.x - p2.x) + (p3.y - p2.y)*(p3.y - p2.y));\par
00988 \par
00989     {\cf18 int} r, g, b, a;\par
00990     HexARGB_RGBA_VAR(color, r, g, b, a);\par
00991     {\cf18 float} light_intensity = (quad.light_intensity[0] + quad.light_intensity[1] + quad.light_intensity[2] + quad.light_intensity[3]) / 4;\par
00992     uint8_t base_r = (uint8_t)fmaxf(0, fminf(255, r * light_intensity));\par
00993     uint8_t base_g = (uint8_t)fmaxf(0, fminf(255, g * light_intensity));\par
00994     uint8_t base_b = (uint8_t)fmaxf(0, fminf(255, b * light_intensity));\par
00995 \par
00996     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
00997         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
00998             Point p = \{.x = x, .y = y, .z = 0\};\par
00999             {\cf18 bool} in_01, in_12, in_23, in_30;\par
01000 \par
01001             in_01 = (edge_cross_point(p0, p1, p0, p) >= 0) != (w < 0);\par
01002             in_12 = (edge_cross_point(p1, p2, p1, p) >= 0) != (w < 0);\par
01003             in_23 = (edge_cross_point(p2, p3, p2, p) >= 0) != (w < 0);\par
01004             in_30 = (edge_cross_point(p3, p0, p3, p) >= 0) != (w < 0);\par
01005 \par
01006             {\cf20 /* https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mv3d.pdf. */}\par
01007             {\cf18 float} size_p_to_p0 = sqrt((p0.x - p.x)*(p0.x - p.x) + (p0.y - p.y)*(p0.y - p.y));\par
01008             {\cf18 float} size_p_to_p1 = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));\par
01009             {\cf18 float} size_p_to_p2 = sqrt((p2.x - p.x)*(p2.x - p.x) + (p2.y - p.y)*(p2.y - p.y));\par
01010             {\cf18 float} size_p_to_p3 = sqrt((p3.x - p.x)*(p3.x - p.x) + (p3.y - p.y)*(p3.y - p.y));\par
01011 \par
01012             {\cf20 /* tangent of half the angle directly using vector math */}\par
01013             {\cf18 float} tan_theta_3_over_2 = size_p3_to_p0 / (size_p_to_p3 + size_p_to_p0);\par
01014             {\cf18 float} tan_theta_0_over_2 = size_p0_to_p1 / (size_p_to_p0 + size_p_to_p1);\par
01015             {\cf18 float} tan_theta_1_over_2 = size_p1_to_p2 / (size_p_to_p1 + size_p_to_p2);\par
01016             {\cf18 float} tan_theta_2_over_2 = size_p2_to_p3 / (size_p_to_p2 + size_p_to_p3);\par
01017             {\cf18 float} w0 = (tan_theta_3_over_2 + tan_theta_0_over_2) / size_p_to_p0;\par
01018             {\cf18 float} w1 = (tan_theta_0_over_2 + tan_theta_1_over_2) / size_p_to_p1;\par
01019             {\cf18 float} w2 = (tan_theta_1_over_2 + tan_theta_2_over_2) / size_p_to_p2;\par
01020             {\cf18 float} w3 = (tan_theta_2_over_2 + tan_theta_3_over_2) / size_p_to_p3;\par
01021 \par
01022             {\cf18 float} inv_w_tot = 1.0f / (w0 + w1 + w2 + w3);\par
01023             {\cf18 float} alpha = w0 * inv_w_tot;\par
01024             {\cf18 float} beta  = w1 * inv_w_tot;\par
01025             {\cf18 float} gamma = w2 * inv_w_tot;\par
01026             {\cf18 float} delta = w3 * inv_w_tot;\par
01027 \par
01028             {\cf19 if} (in_01 && in_12 && in_23 && in_30) \{\par
01029 \par
01030                 {\cf18 double} inv_w = alpha * (1.0f / p0.w) + beta  * (1.0f / p1.w) + gamma * (1.0f / p2.w) + delta * (1.0f / p3.w);\par
01031                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w) + delta * (p3.z / p3.w);\par
01032                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01033 \par
01034                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01035                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(base_r, base_g, base_b, a), offset_zoom_param);\par
01036                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01037                 \}\par
01038             \}\par
01039         \}\par
01040     \}\par
01041 \}\par
01042 \par
01055 {\cf18 void} adl_quad_fill_interpolate_normal_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01056 \{\par
01057     Point p0 = quad.points[0];\par
01058     Point p1 = quad.points[1];\par
01059     Point p2 = quad.points[2];\par
01060     Point p3 = quad.points[3];\par
01061 \par
01062     {\cf18 int} x_min = fminf(p0.x, fminf(p1.x, fminf(p2.x, p3.x)));\par
01063     {\cf18 int} x_max = fmaxf(p0.x, fmaxf(p1.x, fmaxf(p2.x, p3.x)));\par
01064     {\cf18 int} y_min = fminf(p0.y, fminf(p1.y, fminf(p2.y, p3.y)));\par
01065     {\cf18 int} y_max = fmaxf(p0.y, fmaxf(p1.y, fmaxf(p2.y, p3.y)));\par
01066 \par
01067     {\cf19 if} (x_min < 0) x_min = 0;\par
01068     {\cf19 if} (y_min < 0) y_min = 0;\par
01069     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = (int)screen_mat.cols - 1;\par
01070     if (y_max >= ({\cf18 int})screen_mat.rows) y_max = ({\cf18 int})screen_mat.rows - 1;\par
01071 \par
01072     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2) + edge_cross_point(p2, p3, p3, p0);\par
01073     {\cf19 if} (fabs(w) < 1e-6) \{\par
01074         {\cf20 // adl_quad_draw(screen_mat, inv_z_buffer, quad, quad.colors[0], offset_zoom_param);}\par
01075         {\cf19 return};\par
01076     \}\par
01077 \par
01078     {\cf18 int} r, g, b, a;\par
01079     HexARGB_RGBA_VAR(color, r, g, b, a);\par
01080 \par
01081     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01082         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01083             Point p = \{.x = x, .y = y, .z = 0\};\par
01084             {\cf18 bool} in_01, in_12, in_23, in_30;\par
01085 \par
01086             in_01 = (edge_cross_point(p0, p1, p0, p) >= 0) != (w < 0);\par
01087             in_12 = (edge_cross_point(p1, p2, p1, p) >= 0) != (w < 0);\par
01088             in_23 = (edge_cross_point(p2, p3, p2, p) >= 0) != (w < 0);\par
01089             in_30 = (edge_cross_point(p3, p0, p3, p) >= 0) != (w < 0);\par
01090 \par
01091             {\cf20 /* using 'mean value coordinates'}\par
01092 {\cf20              * https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mv3d.pdf. */}\par
01093             {\cf18 float} size_p_to_p0 = sqrt((p0.x - p.x)*(p0.x - p.x) + (p0.y - p.y)*(p0.y - p.y));\par
01094             {\cf18 float} size_p_to_p1 = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));\par
01095             {\cf18 float} size_p_to_p2 = sqrt((p2.x - p.x)*(p2.x - p.x) + (p2.y - p.y)*(p2.y - p.y));\par
01096             {\cf18 float} size_p_to_p3 = sqrt((p3.x - p.x)*(p3.x - p.x) + (p3.y - p.y)*(p3.y - p.y));\par
01097 \par
01098             {\cf20 /* calculating the tangent of half the angle directly using vector math */}\par
01099             {\cf18 float} t0 = adl_tan_half_angle(p0, p1, p, size_p_to_p0, size_p_to_p1);\par
01100             {\cf18 float} t1 = adl_tan_half_angle(p1, p2, p, size_p_to_p1, size_p_to_p2);\par
01101             {\cf18 float} t2 = adl_tan_half_angle(p2, p3, p, size_p_to_p2, size_p_to_p3);\par
01102             {\cf18 float} t3 = adl_tan_half_angle(p3, p0, p, size_p_to_p3, size_p_to_p0);\par
01103 \par
01104             {\cf18 float} w0 = (t3 + t0) / size_p_to_p0;\par
01105             {\cf18 float} w1 = (t0 + t1) / size_p_to_p1;\par
01106             {\cf18 float} w2 = (t1 + t2) / size_p_to_p2;\par
01107             {\cf18 float} w3 = (t2 + t3) / size_p_to_p3;\par
01108 \par
01109             {\cf18 float} inv_w_tot = 1.0f / (w0 + w1 + w2 + w3);\par
01110             {\cf18 float} alpha = w0 * inv_w_tot;\par
01111             {\cf18 float} beta  = w1 * inv_w_tot;\par
01112             {\cf18 float} gamma = w2 * inv_w_tot;\par
01113             {\cf18 float} delta = w3 * inv_w_tot;\par
01114 \par
01115             {\cf19 if} (in_01 && in_12 && in_23 && in_30) \{\par
01116                 {\cf18 float} light_intensity = quad.light_intensity[0]*alpha + quad.light_intensity[1]*beta + quad.light_intensity[2]*gamma + quad.light_intensity[3]*delta;\par
01117 \par
01118                 {\cf18 float} rf = r * light_intensity;\par
01119                 {\cf18 float} gf = g * light_intensity;\par
01120                 {\cf18 float} bf = b * light_intensity;\par
01121                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01122                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01123                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01124 \par
01125                 {\cf18 double} inv_w = alpha * (1.0f / p0.w) + beta  * (1.0f / p1.w) + gamma * (1.0f / p2.w) + delta * (1.0f / p3.w);\par
01126                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w) + delta * (p3.z / p3.w);\par
01127                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01128 \par
01129                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01130                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, a), offset_zoom_param);\par
01131                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01132                 \}\par
01133             \}\par
01134         \}\par
01135     \}\par
01136 \}\par
01137 \par
01149 {\cf18 void} adl_quad_fill_interpolate_color_mean_value(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Quad quad, Offset_zoom_param offset_zoom_param)\par
01150 \{\par
01151     Point p0 = quad.points[0];\par
01152     Point p1 = quad.points[1];\par
01153     Point p2 = quad.points[2];\par
01154     Point p3 = quad.points[3];\par
01155 \par
01156     {\cf18 int} x_min = fminf(p0.x, fminf(p1.x, fminf(p2.x, p3.x)));\par
01157     {\cf18 int} x_max = fmaxf(p0.x, fmaxf(p1.x, fmaxf(p2.x, p3.x)));\par
01158     {\cf18 int} y_min = fminf(p0.y, fminf(p1.y, fminf(p2.y, p3.y)));\par
01159     {\cf18 int} y_max = fmaxf(p0.y, fmaxf(p1.y, fmaxf(p2.y, p3.y)));\par
01160 \par
01161     {\cf19 if} (x_min < 0) x_min = 0;\par
01162     {\cf19 if} (y_min < 0) y_min = 0;\par
01163     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = (int)screen_mat.cols - 1;\par
01164     if (y_max >= ({\cf18 int})screen_mat.rows) y_max = ({\cf18 int})screen_mat.rows - 1;\par
01165 \par
01166     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2) + edge_cross_point(p2, p3, p3, p0);\par
01167     {\cf19 if} (fabs(w) < 1e-6) \{\par
01168         {\cf20 // adl_quad_draw(screen_mat, inv_z_buffer, quad, quad.colors[0], offset_zoom_param);}\par
01169         {\cf19 return};\par
01170     \}\par
01171 \par
01172     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01173         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01174             Point p = \{.x = x, .y = y, .z = 0\};\par
01175             {\cf18 bool} in_01, in_12, in_23, in_30;\par
01176 \par
01177             in_01 = (edge_cross_point(p0, p1, p0, p) >= 0) != (w < 0);\par
01178             in_12 = (edge_cross_point(p1, p2, p1, p) >= 0) != (w < 0);\par
01179             in_23 = (edge_cross_point(p2, p3, p2, p) >= 0) != (w < 0);\par
01180             in_30 = (edge_cross_point(p3, p0, p3, p) >= 0) != (w < 0);\par
01181 \par
01182             {\cf20 /* using 'mean value coordinates'}\par
01183 {\cf20              * https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mv3d.pdf. */}\par
01184             {\cf18 float} size_p_to_p0 = sqrt((p0.x - p.x)*(p0.x - p.x) + (p0.y - p.y)*(p0.y - p.y));\par
01185             {\cf18 float} size_p_to_p1 = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));\par
01186             {\cf18 float} size_p_to_p2 = sqrt((p2.x - p.x)*(p2.x - p.x) + (p2.y - p.y)*(p2.y - p.y));\par
01187             {\cf18 float} size_p_to_p3 = sqrt((p3.x - p.x)*(p3.x - p.x) + (p3.y - p.y)*(p3.y - p.y));\par
01188 \par
01189             {\cf20 /* calculating the tangent of half the angle directly using vector math */}\par
01190             {\cf18 float} t0 = adl_tan_half_angle(p0, p1, p, size_p_to_p0, size_p_to_p1);\par
01191             {\cf18 float} t1 = adl_tan_half_angle(p1, p2, p, size_p_to_p1, size_p_to_p2);\par
01192             {\cf18 float} t2 = adl_tan_half_angle(p2, p3, p, size_p_to_p2, size_p_to_p3);\par
01193             {\cf18 float} t3 = adl_tan_half_angle(p3, p0, p, size_p_to_p3, size_p_to_p0);\par
01194 \par
01195             {\cf18 float} w0 = (t3 + t0) / size_p_to_p0;\par
01196             {\cf18 float} w1 = (t0 + t1) / size_p_to_p1;\par
01197             {\cf18 float} w2 = (t1 + t2) / size_p_to_p2;\par
01198             {\cf18 float} w3 = (t2 + t3) / size_p_to_p3;\par
01199 \par
01200             {\cf18 float} inv_w_tot = 1.0f / (w0 + w1 + w2 + w3);\par
01201             {\cf18 float} alpha = w0 * inv_w_tot;\par
01202             {\cf18 float} beta  = w1 * inv_w_tot;\par
01203             {\cf18 float} gamma = w2 * inv_w_tot;\par
01204             {\cf18 float} delta = w3 * inv_w_tot;\par
01205 \par
01206             {\cf19 if} (in_01 && in_12 && in_23 && in_30) \{\par
01207                 {\cf18 int} r0, g0, b0, a0;\par
01208                 {\cf18 int} r1, g1, b1, a1;\par
01209                 {\cf18 int} r2, g2, b2, a2;\par
01210                 {\cf18 int} r3, g3, b3, a3;\par
01211                 HexARGB_RGBA_VAR(quad.colors[0], r0, g0, b0, a0);\par
01212                 HexARGB_RGBA_VAR(quad.colors[1], r1, g1, b1, a1);\par
01213                 HexARGB_RGBA_VAR(quad.colors[2], r2, g2, b2, a2);\par
01214                 HexARGB_RGBA_VAR(quad.colors[3], r3, g3, b3, a3);\par
01215                 \par
01216                 uint8_t current_r = r0*alpha + r1*beta + r2*gamma + r3*delta;\par
01217                 uint8_t current_g = g0*alpha + g1*beta + g2*gamma + g3*delta;\par
01218                 uint8_t current_b = b0*alpha + b1*beta + b2*gamma + b3*delta;\par
01219                 uint8_t current_a = a0*alpha + a1*beta + a2*gamma + a3*delta;\par
01220 \par
01221                 {\cf18 float} light_intensity = (quad.light_intensity[0] + quad.light_intensity[1] + quad.light_intensity[2] + quad.light_intensity[3]) / 4;\par
01222                 {\cf18 float} rf = current_r * light_intensity;\par
01223                 {\cf18 float} gf = current_g * light_intensity;\par
01224                 {\cf18 float} bf = current_b * light_intensity;\par
01225                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01226                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01227                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01228 \par
01229                 {\cf18 double} inv_w = alpha * (1.0f / p0.w) + beta  * (1.0f / p1.w) + gamma * (1.0f / p2.w) + delta * (1.0f / p3.w);\par
01230                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w) + delta * (p3.z / p3.w);\par
01231                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01232 \par
01233                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01234                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, current_a), offset_zoom_param);\par
01235                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01236                 \}\par
01237             \}\par
01238         \}\par
01239     \}\par
01240 \}\par
01241 \par
01253 {\cf18 void} adl_quad_mesh_draw(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01254 \{\par
01255     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01256         Quad quad = mesh.elements[i];\par
01257         {\cf20 /* Reject invalid quad */}\par
01258         adl_assert_quad_is_valid(quad);\par
01259 \par
01260         {\cf19 if} (!quad.to_draw) {\cf19 continue};\par
01261 \par
01262         adl_quad_draw(screen_mat, inv_z_buffer_mat, quad, color, offset_zoom_param);\par
01263     \}\par
01264 \}\par
01265 \par
01277 {\cf18 void} adl_quad_mesh_fill(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01278 \{\par
01279     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01280         Quad quad = mesh.elements[i];\par
01281         {\cf20 /* Reject invalid quad */}\par
01282         adl_assert_quad_is_valid(quad);\par
01283 \par
01284         {\cf19 if} (!quad.to_draw) {\cf19 continue};\par
01285 \par
01286         {\cf20 // color = rand_double() * 0xFFFFFFFF;}\par
01287 \par
01288         adl_quad_fill(screen_mat, inv_z_buffer_mat, quad, color, offset_zoom_param);\par
01289     \}\par
01290 \}\par
01291 \par
01304 {\cf18 void} adl_quad_mesh_fill_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01305 \{\par
01306     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01307         Quad quad = mesh.elements[i];\par
01308         {\cf20 /* Reject invalid quad */}\par
01309         adl_assert_quad_is_valid(quad);\par
01310 \par
01311         uint8_t a, r, g, b;\par
01312         HexARGB_RGBA_VAR(color, a, r, g, b);\par
01313         (void)r;\par
01314         (void)g;\par
01315         (void)b;\par
01316 \par
01317         {\cf19 if} (!quad.to_draw && a == 255) {\cf19 continue};\par
01318 \par
01319         adl_quad_fill_interpolate_normal_mean_value(screen_mat, inv_z_buffer_mat, quad, color, offset_zoom_param);\par
01320     \}\par
01321 \}\par
01322 \par
01334 {\cf18 void} adl_quad_mesh_fill_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Quad_mesh mesh, Offset_zoom_param offset_zoom_param)\par
01335 \{\par
01336     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01337         Quad quad = mesh.elements[i];\par
01338         {\cf20 /* Reject invalid quad */}\par
01339         adl_assert_quad_is_valid(quad);\par
01340 \par
01341         {\cf19 if} (!quad.to_draw) {\cf19 continue};\par
01342 \par
01343         adl_quad_fill_interpolate_color_mean_value(screen_mat, inv_z_buffer_mat, quad, offset_zoom_param);\par
01344     \}\par
01345 \}\par
01346 \par
01360 {\cf18 void} adl_circle_draw(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01361 \{\par
01362     {\cf19 for} ({\cf18 int} dy = -r; dy <= r; dy++) \{\par
01363         {\cf19 for} ({\cf18 int} dx = -r; dx <= r; dx ++) \{\par
01364             {\cf18 float} diff = dx * dx + dy * dy - r * r;\par
01365             {\cf19 if} (diff < 0 && diff > -r*2) \{\par
01366                 adl_point_draw(screen_mat, center_x + dx, center_y + dy, color, offset_zoom_param);\par
01367             \}\par
01368         \}\par
01369     \}\par
01370 \}\par
01371 \par
01382 {\cf18 void} adl_circle_fill(Mat2D_uint32 screen_mat, {\cf18 float} center_x, {\cf18 float} center_y, {\cf18 float} r, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01383 \{\par
01384     {\cf19 for} ({\cf18 int} dy = -r; dy <= r; dy++) \{\par
01385         {\cf19 for} ({\cf18 int} dx = -r; dx <= r; dx ++) \{\par
01386             {\cf18 float} diff = dx * dx + dy * dy - r * r;\par
01387             {\cf19 if} (diff < 0) \{\par
01388                 adl_point_draw(screen_mat, center_x + dx, center_y + dy, color, offset_zoom_param);\par
01389             \}\par
01390         \}\par
01391     \}\par
01392 \}\par
01393 \par
01402 {\cf18 void} adl_tri_draw(Mat2D_uint32 screen_mat, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01403 \{\par
01404     adl_line_draw(screen_mat, tri.points[0].x, tri.points[0].y, tri.points[1].x, tri.points[1].y, color, offset_zoom_param);\par
01405     adl_line_draw(screen_mat, tri.points[1].x, tri.points[1].y, tri.points[2].x, tri.points[2].y, color, offset_zoom_param);\par
01406     adl_line_draw(screen_mat, tri.points[2].x, tri.points[2].y, tri.points[0].x, tri.points[0].y, color, offset_zoom_param);\par
01407 \par
01408     {\cf20 // adl_draw_arrow(screen_mat, tri.points[0].x, tri.points[0].y, tri.points[1].x, tri.points[1].y, 0.3, 22, color);}\par
01409     {\cf20 // adl_draw_arrow(screen_mat, tri.points[1].x, tri.points[1].y, tri.points[2].x, tri.points[2].y, 0.3, 22, color);}\par
01410     {\cf20 // adl_draw_arrow(screen_mat, tri.points[2].x, tri.points[2].y, tri.points[0].x, tri.points[0].y, 0.3, 22, color);}\par
01411 \}\par
01412 \par
01425 {\cf18 void} adl_tri_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01426 \{\par
01427     {\cf20 /* This function follows the rasterizer of 'Pikuma' shown in his YouTube video. You can fine the video in this link: https://youtu.be/k5wtuKWmV48. */}\par
01428 \par
01429     Point p0, p1, p2;\par
01430     p0 = tri.points[0];\par
01431     p1 = tri.points[1];\par
01432     p2 = tri.points[2];\par
01433 \par
01434     {\cf20 /* finding bounding box */}\par
01435     {\cf18 int} x_min = fmin(p0.x, fmin(p1.x, p2.x));\par
01436     {\cf18 int} x_max = fmax(p0.x, fmax(p1.x, p2.x));\par
01437     {\cf18 int} y_min = fmin(p0.y, fmin(p1.y, p2.y));\par
01438     {\cf18 int} y_max = fmax(p0.y, fmax(p1.y, p2.y));\par
01439 \par
01440     {\cf20 /* Clamp to screen bounds */}\par
01441     {\cf19 if} (x_min < 0) x_min = 0;\par
01442     {\cf19 if} (y_min < 0) y_min = 0;\par
01443     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = screen_mat.cols - 1;\par
01444     {\cf19 if} (y_max >= ({\cf18 int})screen_mat.rows) y_max = screen_mat.rows - 1;\par
01445 \par
01446     {\cf20 /* draw only outline of the tri if there is no area */}\par
01447     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2);\par
01448     {\cf19 if} (fabsf(w) < 1e-6) \{\par
01449         {\cf20 // adl_tri_draw(screen_mat, tri, tri.colors[0], offset_zoom_param);}\par
01450         {\cf19 return};\par
01451     \}\par
01452     MATRIX2D_ASSERT(fabsf(w) > 1e-6 && {\cf22 "triangle must have area"});\par
01453 \par
01454     {\cf20 /* fill conventions */}\par
01455     {\cf18 int} bias0 = is_top_left(p0, p1) ? 0 : -1;\par
01456     {\cf18 int} bias1 = is_top_left(p1, p2) ? 0 : -1;\par
01457     {\cf18 int} bias2 = is_top_left(p2, p0) ? 0 : -1;\par
01458 \par
01459     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01460         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01461             Point p = \{.x = x, .y = y, .z = 0\};\par
01462 \par
01463             {\cf18 float} w0 = edge_cross_point(p0, p1, p0, p) + bias0;\par
01464             {\cf18 float} w1 = edge_cross_point(p1, p2, p1, p) + bias1;\par
01465             {\cf18 float} w2 = edge_cross_point(p2, p0, p2, p) + bias2;\par
01466 \par
01467             {\cf18 float} alpha = fabs(w1 / w);\par
01468             {\cf18 float} beta  = fabs(w2 / w);\par
01469             {\cf18 float} gamma = fabs(w0 / w);\par
01470 \par
01471             {\cf19 if} (w0 * w >= 0 && w1 * w >= 0 &&  w2 * w >= 0) \{\par
01472                 {\cf18 int} r, b, g, a;\par
01473                 HexARGB_RGBA_VAR(color, r, g, b, a);\par
01474                 {\cf18 float} light_intensity = (tri.light_intensity[0] + tri.light_intensity[1] + tri.light_intensity[2]) / 3;\par
01475                 {\cf18 float} rf = r * light_intensity;\par
01476                 {\cf18 float} gf = g * light_intensity;\par
01477                 {\cf18 float} bf = b * light_intensity;\par
01478                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01479                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01480                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01481 \par
01482                 {\cf18 double} inv_w = alpha * (1.0 / p0.w) + beta  * (1.0 / p1.w) + gamma * (1.0 / p2.w);\par
01483                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w);\par
01484                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01485 \par
01486                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01487                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, a), offset_zoom_param);\par
01488                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01489                 \}\par
01490             \}\par
01491         \}\par
01492     \}\par
01493 \}\par
01494 \par
01506 {\cf18 void} adl_tri_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, Offset_zoom_param offset_zoom_param)\par
01507 \{\par
01508     {\cf20 /* This function follows the rasterizer of 'Pikuma' shown in his YouTube video. You can fine the video in this link: https://youtu.be/k5wtuKWmV48. */}\par
01509     Point p0, p1, p2;\par
01510     p0 = tri.points[0];\par
01511     p1 = tri.points[1];\par
01512     p2 = tri.points[2];\par
01513 \par
01514     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2);\par
01515     {\cf19 if} (fabsf(w) < 1e-6) \{\par
01516         {\cf20 // adl_tri_draw(screen_mat, tri, tri.colors[0], offset_zoom_param);}\par
01517         {\cf19 return};\par
01518     \}\par
01519     MATRIX2D_ASSERT(w != 0 && {\cf22 "triangle has area"});\par
01520 \par
01521     {\cf20 /* fill conventions */}\par
01522     {\cf18 int} bias0 = is_top_left(p0, p1) ? 0 : -1;\par
01523     {\cf18 int} bias1 = is_top_left(p1, p2) ? 0 : -1;\par
01524     {\cf18 int} bias2 = is_top_left(p2, p0) ? 0 : -1;\par
01525 \par
01526     {\cf20 /* finding bounding box */}\par
01527     {\cf18 int} x_min = fmin(p0.x, fmin(p1.x, p2.x));\par
01528     {\cf18 int} x_max = fmax(p0.x, fmax(p1.x, p2.x));\par
01529     {\cf18 int} y_min = fmin(p0.y, fmin(p1.y, p2.y));\par
01530     {\cf18 int} y_max = fmax(p0.y, fmax(p1.y, p2.y));\par
01531     {\cf20 // printf("xmin: %d, xmax: %d || ymin: %d, ymax: %d\\n", x_min, x_max, y_min, y_max);}\par
01532 \par
01533     {\cf20 /* Clamp to screen bounds */}\par
01534     {\cf19 if} (x_min < 0) x_min = 0;\par
01535     {\cf19 if} (y_min < 0) y_min = 0;\par
01536     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = screen_mat.cols - 1;\par
01537     {\cf19 if} (y_max >= ({\cf18 int})screen_mat.rows) y_max = screen_mat.rows - 1;\par
01538 \par
01539     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01540         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01541             Point p = \{.x = x, .y = y, .z = 0\};\par
01542 \par
01543             {\cf18 float} w0 = edge_cross_point(p0, p1, p0, p) + bias0;\par
01544             {\cf18 float} w1 = edge_cross_point(p1, p2, p1, p) + bias1;\par
01545             {\cf18 float} w2 = edge_cross_point(p2, p0, p2, p) + bias2;\par
01546 \par
01547             {\cf18 float} alpha = fabs(w1 / w);\par
01548             {\cf18 float} beta  = fabs(w2 / w);\par
01549             {\cf18 float} gamma = fabs(w0 / w);\par
01550 \par
01551             {\cf19 if} (w0 * w >= 0 && w1 * w >= 0 &&  w2 * w >= 0) \{\par
01552                 {\cf18 int} r0, b0, g0, a0;\par
01553                 {\cf18 int} r1, b1, g1, a1;\par
01554                 {\cf18 int} r2, b2, g2, a2;\par
01555                 HexARGB_RGBA_VAR(tri.colors[0], r0, g0, b0, a0);\par
01556                 HexARGB_RGBA_VAR(tri.colors[1], r1, g1, b1, a1);\par
01557                 HexARGB_RGBA_VAR(tri.colors[2], r2, g2, b2, a2);\par
01558                 \par
01559                 uint8_t current_r = r0*alpha + r1*beta + r2*gamma;\par
01560                 uint8_t current_g = g0*alpha + g1*beta + g2*gamma;\par
01561                 uint8_t current_b = b0*alpha + b1*beta + b2*gamma;\par
01562                 uint8_t current_a = a0*alpha + a1*beta + a2*gamma;\par
01563 \par
01564                 {\cf18 float} light_intensity = (tri.light_intensity[0] + tri.light_intensity[1] + tri.light_intensity[2]) / 3;\par
01565                 {\cf18 float} rf = current_r * light_intensity;\par
01566                 {\cf18 float} gf = current_g * light_intensity;\par
01567                 {\cf18 float} bf = current_b * light_intensity;\par
01568                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01569                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01570                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01571 \par
01572                 {\cf18 double} inv_w = alpha * (1.0 / p0.w) + beta  * (1.0 / p1.w) + gamma * (1.0 / p2.w);\par
01573                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w);\par
01574                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01575 \par
01576                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01577                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, current_a), offset_zoom_param);\par
01578                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01579                 \}\par
01580             \}\par
01581         \}\par
01582     \}\par
01583 \}\par
01584 \par
01597 {\cf18 void} adl_tri_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer, Tri tri, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01598 \{\par
01599     {\cf20 /* This function follows the rasterizer of 'Pikuma' shown in his YouTube video. You can fine the video in this link: https://youtu.be/k5wtuKWmV48. */}\par
01600     Point p0, p1, p2;\par
01601     p0 = tri.points[0];\par
01602     p1 = tri.points[1];\par
01603     p2 = tri.points[2];\par
01604 \par
01605     {\cf18 float} w = edge_cross_point(p0, p1, p1, p2);\par
01606     {\cf19 if} (fabsf(w) < 1e-6) \{\par
01607         {\cf20 // adl_tri_draw(screen_mat, tri, tri.colors[0], offset_zoom_param);}\par
01608         {\cf19 return};\par
01609     \}\par
01610     MATRIX2D_ASSERT(w != 0 && {\cf22 "triangle has area"});\par
01611 \par
01612     {\cf20 /* fill conventions */}\par
01613     {\cf18 int} bias0 = is_top_left(p0, p1) ? 0 : -1;\par
01614     {\cf18 int} bias1 = is_top_left(p1, p2) ? 0 : -1;\par
01615     {\cf18 int} bias2 = is_top_left(p2, p0) ? 0 : -1;\par
01616 \par
01617     {\cf20 /* finding bounding box */}\par
01618     {\cf18 int} x_min = fmin(p0.x, fmin(p1.x, p2.x));\par
01619     {\cf18 int} x_max = fmax(p0.x, fmax(p1.x, p2.x));\par
01620     {\cf18 int} y_min = fmin(p0.y, fmin(p1.y, p2.y));\par
01621     {\cf18 int} y_max = fmax(p0.y, fmax(p1.y, p2.y));\par
01622     {\cf20 // printf("xmin: %d, xmax: %d || ymin: %d, ymax: %d\\n", x_min, x_max, y_min, y_max);}\par
01623 \par
01624     {\cf20 /* Clamp to screen bounds */}\par
01625     {\cf19 if} (x_min < 0) x_min = 0;\par
01626     {\cf19 if} (y_min < 0) y_min = 0;\par
01627     {\cf19 if} (x_max >= ({\cf18 int})screen_mat.cols) x_max = screen_mat.cols - 1;\par
01628     {\cf19 if} (y_max >= ({\cf18 int})screen_mat.rows) y_max = screen_mat.rows - 1;\par
01629 \par
01630     {\cf18 int} r, b, g, a;\par
01631     HexARGB_RGBA_VAR(color, r, g, b, a);\par
01632 \par
01633     {\cf19 for} ({\cf18 int} y = y_min; y <= y_max; y++) \{\par
01634         {\cf19 for} ({\cf18 int} x = x_min; x <= x_max; x++) \{\par
01635             Point p = \{.x = x, .y = y, .z = 0\};\par
01636 \par
01637             {\cf18 float} w0 = edge_cross_point(p0, p1, p0, p) + bias0;\par
01638             {\cf18 float} w1 = edge_cross_point(p1, p2, p1, p) + bias1;\par
01639             {\cf18 float} w2 = edge_cross_point(p2, p0, p2, p) + bias2;\par
01640 \par
01641             {\cf18 float} alpha = fabs(w1 / w);\par
01642             {\cf18 float} beta  = fabs(w2 / w);\par
01643             {\cf18 float} gamma = fabs(w0 / w);\par
01644 \par
01645             {\cf19 if} (w0 * w >= 0 && w1 * w >= 0 &&  w2 * w >= 0) \{\par
01646                 \par
01647                 {\cf18 float} light_intensity = tri.light_intensity[0]*alpha + tri.light_intensity[1]*beta + tri.light_intensity[2]*gamma;\par
01648 \par
01649                 {\cf18 float} rf = r * light_intensity;\par
01650                 {\cf18 float} gf = g * light_intensity;\par
01651                 {\cf18 float} bf = b * light_intensity;\par
01652                 uint8_t r8 = (uint8_t)fmaxf(0, fminf(255, rf));\par
01653                 uint8_t g8 = (uint8_t)fmaxf(0, fminf(255, gf));\par
01654                 uint8_t b8 = (uint8_t)fmaxf(0, fminf(255, bf));\par
01655 \par
01656                 {\cf18 double} inv_w = alpha * (1.0 / p0.w) + beta  * (1.0 / p1.w) + gamma * (1.0 / p2.w);\par
01657                 {\cf18 double} z_over_w = alpha * (p0.z / p0.w) + beta  * (p1.z / p1.w) + gamma * (p2.z / p2.w);\par
01658                 {\cf18 double} inv_z = inv_w / z_over_w;\par
01659 \par
01660                 {\cf19 if} (inv_z >= MAT2D_AT(inv_z_buffer, y, x)) \{\par
01661                     adl_point_draw(screen_mat, x, y, RGBA_hexARGB(r8, g8, b8, a), offset_zoom_param);\par
01662                     MAT2D_AT(inv_z_buffer, y, x) = inv_z;\par
01663                 \}\par
01664             \}\par
01665         \}\par
01666     \}\par
01667 \}\par
01668 \par
01679 {\cf18 void} adl_tri_mesh_draw(Mat2D_uint32 screen_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01680 \{\par
01681     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01682         Tri tri = mesh.elements[i];\par
01683         {\cf19 if} (tri.to_draw) \{\par
01684             {\cf20 // color = rand_double() * 0xFFFFFFFF;}\par
01685             adl_tri_draw(screen_mat, tri, color, offset_zoom_param);\par
01686         \}\par
01687     \}\par
01688 \}\par
01689 \par
01701 {\cf18 void} adl_tri_mesh_fill_Pinedas_rasterizer(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01702 \{\par
01703     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01704         Tri tri = mesh.elements[i];\par
01705         {\cf20 /* Reject invalid triangles */}\par
01706         adl_assert_tri_is_valid(tri);\par
01707 \par
01708         {\cf19 if} (!tri.to_draw) {\cf19 continue};\par
01709 \par
01710         adl_tri_fill_Pinedas_rasterizer(screen_mat, inv_z_buffer_mat, tri, color, offset_zoom_param);\par
01711     \}\par
01712 \}\par
01713 \par
01725 {\cf18 void} adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_color(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, Offset_zoom_param offset_zoom_param)\par
01726 \{\par
01727     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01728         Tri tri = mesh.elements[i];\par
01729         {\cf20 /* Reject invalid triangles */}\par
01730         adl_assert_tri_is_valid(tri);\par
01731 \par
01732         {\cf19 if} (!tri.to_draw) {\cf19 continue};\par
01733 \par
01734         adl_tri_fill_Pinedas_rasterizer_interpolate_color(screen_mat, inv_z_buffer_mat, tri, offset_zoom_param);\par
01735     \}\par
01736 \}\par
01737 \par
01750 {\cf18 void} adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer_mat, Tri_mesh mesh, uint32_t color, Offset_zoom_param offset_zoom_param)\par
01751 \{\par
01752     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01753         Tri tri = mesh.elements[i];\par
01754         {\cf20 /* Reject invalid triangles */}\par
01755         adl_assert_tri_is_valid(tri);\par
01756 \par
01757         {\cf19 if} (!tri.to_draw) {\cf19 continue};\par
01758 \par
01759         adl_tri_fill_Pinedas_rasterizer_interpolate_normal(screen_mat, inv_z_buffer_mat, tri, color, offset_zoom_param);\par
01760     \}\par
01761 \}\par
01762 \par
01778 {\cf18 float} adl_tan_half_angle(Point vi, Point vj, Point p, {\cf18 float} li, {\cf18 float} lj)\par
01779 \{\par
01780     {\cf18 float} ax = vi.x - p.x, ay = vi.y - p.y;\par
01781     {\cf18 float} bx = vj.x - p.x, by = vj.y - p.y;\par
01782     {\cf18 float} dot = ax * bx + ay * by;\par
01783     {\cf18 float} cross = ax * by - ay * bx;              {\cf20 // signed 2D cross (scalar)}\par
01784     {\cf18 float} denom = dot + li * lj;                   {\cf20 // = |a||b|(1 + cos(alpha))}\par
01785     {\cf19 return} fabsf(cross) / fmaxf(1e-20f, denom);    {\cf20 // tan(alpha/2)}\par
01786 \}\par
01787 \par
01798 {\cf18 float} adl_linear_map({\cf18 float} s, {\cf18 float} min_in, {\cf18 float} max_in, {\cf18 float} min_out, {\cf18 float} max_out)\par
01799 \{\par
01800     {\cf19 return} (min_out + ((s-min_in)*(max_out-min_out))/(max_in-min_in));\par
01801 \}\par
01802 \par
01818 {\cf18 void} adl_quad2tris(Quad quad, Tri *tri1, Tri *tri2, {\cf18 char} split_line[])\par
01819 \{\par
01820     {\cf19 if} (!strncmp(split_line, {\cf22 "02"}, 2)) \{\par
01821         tri1->points[0] = quad.points[0];\par
01822         tri1->points[1] = quad.points[1];\par
01823         tri1->points[2] = quad.points[2];\par
01824         tri1->to_draw = quad.to_draw;\par
01825         tri1->light_intensity[0] = quad.light_intensity[0];\par
01826         tri1->light_intensity[1] = quad.light_intensity[1];\par
01827         tri1->light_intensity[2] = quad.light_intensity[2];\par
01828         tri1->colors[0] = quad.colors[0];\par
01829         tri1->colors[1] = quad.colors[1];\par
01830         tri1->colors[2] = quad.colors[2];\par
01831 \par
01832         tri2->points[0] = quad.points[2];\par
01833         tri2->points[1] = quad.points[3];\par
01834         tri2->points[2] = quad.points[0];\par
01835         tri2->to_draw = quad.to_draw;\par
01836         tri1->light_intensity[0] = quad.light_intensity[2];\par
01837         tri1->light_intensity[1] = quad.light_intensity[3];\par
01838         tri1->light_intensity[2] = quad.light_intensity[0];\par
01839         tri2->colors[0] = quad.colors[2];\par
01840         tri2->colors[1] = quad.colors[3];\par
01841         tri2->colors[2] = quad.colors[0];\par
01842     \} {\cf19 else} {\cf19 if} (!strncmp(split_line, {\cf22 "13"}, 2)) \{\par
01843         tri1->points[0] = quad.points[1];\par
01844         tri1->points[1] = quad.points[2];\par
01845         tri1->points[2] = quad.points[3];\par
01846         tri1->to_draw = quad.to_draw;\par
01847         tri1->light_intensity[0] = quad.light_intensity[1];\par
01848         tri1->light_intensity[1] = quad.light_intensity[2];\par
01849         tri1->light_intensity[2] = quad.light_intensity[3];\par
01850         tri1->colors[0] = quad.colors[1];\par
01851         tri1->colors[1] = quad.colors[2];\par
01852         tri1->colors[2] = quad.colors[3];\par
01853 \par
01854         tri2->points[0] = quad.points[3];\par
01855         tri2->points[1] = quad.points[0];\par
01856         tri2->points[2] = quad.points[1];\par
01857         tri2->to_draw = quad.to_draw;\par
01858         tri1->light_intensity[0] = quad.light_intensity[3];\par
01859         tri1->light_intensity[1] = quad.light_intensity[0];\par
01860         tri1->light_intensity[2] = quad.light_intensity[1];\par
01861         tri2->colors[0] = quad.colors[3];\par
01862         tri2->colors[1] = quad.colors[0];\par
01863         tri2->colors[2] = quad.colors[1];\par
01864     \}\par
01865 \}\par
01866 \par
01878 {\cf18 void} adl_linear_sRGB_to_okLab(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *a, {\cf18 float} *b)\par
01879 \{\par
01880     {\cf20 /* https://bottosson.github.io/posts/oklab/}\par
01881 {\cf20        https://en.wikipedia.org/wiki/Oklab_color_space */}\par
01882     {\cf18 int} R_255, G_255, B_255;\par
01883     HexARGB_RGB_VAR(hex_ARGB, R_255, G_255, B_255);\par
01884 \par
01885     {\cf18 float} R = R_255;\par
01886     {\cf18 float} G = G_255;\par
01887     {\cf18 float} B = B_255;\par
01888 \par
01889     {\cf18 float} l = 0.4122214705f * R + 0.5363325363f * G + 0.0514459929f * B;\par
01890     {\cf18 float} m = 0.2119034982f * R + 0.6806995451f * G + 0.1073969566f * B;\par
01891     {\cf18 float} s = 0.0883024619f * R + 0.2817188376f * G + 0.6299787005f * B;\par
01892 \par
01893     {\cf18 float} l_ = cbrtf(l);\par
01894     {\cf18 float} m_ = cbrtf(m);\par
01895     {\cf18 float} s_ = cbrtf(s);\par
01896 \par
01897     *L = 0.2104542553f * l_ + 0.7936177850f * m_ - 0.0040720468f * s_;\par
01898     *a = 1.9779984951f * l_ - 2.4285922050f * m_ + 0.4505937099f * s_;\par
01899     *b = 0.0259040371f * l_ + 0.7827717662f * m_ - 0.8086757660f * s_;\par
01900 \par
01901 \}\par
01902 \par
01913 {\cf18 void} adl_okLab_to_linear_sRGB({\cf18 float} L, {\cf18 float} a, {\cf18 float} b, uint32_t *hex_ARGB)\par
01914 \{\par
01915     {\cf20 /* https://bottosson.github.io/posts/oklab/}\par
01916 {\cf20        https://en.wikipedia.org/wiki/Oklab_color_space */}\par
01917 \par
01918     {\cf18 float} l_ = L + 0.3963377774f * a + 0.2158037573f * b;\par
01919     {\cf18 float} m_ = L - 0.1055613458f * a - 0.0638541728f * b;\par
01920     {\cf18 float} s_ = L - 0.0894841775f * a - 1.2914855480f * b;\par
01921 \par
01922     {\cf18 float} l = l_ * l_ * l_;\par
01923     {\cf18 float} m = m_ * m_ * m_;\par
01924     {\cf18 float} s = s_ * s_ * s_;\par
01925 \par
01926     {\cf18 float} R = + 4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s;\par
01927     {\cf18 float} G = - 1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s;\par
01928     {\cf18 float} B = - 0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s;\par
01929 \par
01930     R = fmaxf(fminf(R, 255), 0);\par
01931     G = fmaxf(fminf(G, 255), 0);\par
01932     B = fmaxf(fminf(B, 255), 0);\par
01933 \par
01934     *hex_ARGB = RGBA_hexARGB(R, G, B, 0xFF);\par
01935 \}\par
01936 \par
01945 {\cf18 void} adl_linear_sRGB_to_okLch(uint32_t hex_ARGB, {\cf18 float} *L, {\cf18 float} *c, {\cf18 float} *h_deg)\par
01946 \{\par
01947     {\cf18 float} a, b;\par
01948     adl_linear_sRGB_to_okLab(hex_ARGB, L, &a, &b);\par
01949 \par
01950     *c = sqrtf(a * a + b * b);\par
01951     *h_deg = atan2f(b, a) * 180 / PI;\par
01952 \}\par
01953 \par
01964 {\cf18 void} adl_okLch_to_linear_sRGB({\cf18 float} L, {\cf18 float} c, {\cf18 float} h_deg, uint32_t *hex_ARGB)\par
01965 \{\par
01966     h_deg = fmodf((h_deg + 360), 360);\par
01967     {\cf18 float} a = c * cosf(h_deg * PI / 180);\par
01968     {\cf18 float} b = c * sinf(h_deg * PI / 180);\par
01969     adl_okLab_to_linear_sRGB(L, a, b, hex_ARGB);\par
01970 \}\par
01971 \par
01986 {\cf18 void} adl_interpolate_ARGBcolor_on_okLch(uint32_t color1, uint32_t color2, {\cf18 float} t, {\cf18 float} num_of_rotations, uint32_t *color_out)\par
01987 \{\par
01988     {\cf18 float} L_1, c_1, h_1;\par
01989     {\cf18 float} L_2, c_2, h_2;\par
01990     adl_linear_sRGB_to_okLch(color1, &L_1, &c_1, &h_1);\par
01991     adl_linear_sRGB_to_okLch(color2, &L_2, &c_2, &h_2);\par
01992     h_2 = h_2 + 360 * num_of_rotations;\par
01993 \par
01994     {\cf18 float} L, c, h;\par
01995     L = L_1 * (1 - t) + L_2 * (t);\par
01996     c = c_1 * (1 - t) + c_2 * (t);\par
01997     h = h_1 * (1 - t) + h_2 * (t);\par
01998     adl_okLch_to_linear_sRGB(L, c, h, color_out);\par
01999 \}\par
02000 \par
02014 Figure adl_figure_alloc({\cf18 size_t} rows, {\cf18 size_t} cols, Point top_left_position)\par
02015 \{\par
02016     ADL_ASSERT(rows && cols);\par
02017     adl_assert_point_is_valid(top_left_position);\par
02018 \par
02019     Figure figure = \{0\};\par
02020     figure.pixels_mat = mat2D_alloc_uint32(rows, cols);\par
02021     figure.inv_z_buffer_mat = mat2D_alloc(rows, cols);\par
02022     memset(figure.inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * figure.inv_z_buffer_mat.rows * figure.inv_z_buffer_mat.cols);\par
02023     ada_init_array(Curve, figure.src_curve_array);\par
02024 \par
02025     figure.top_left_position = top_left_position;\par
02026 \par
02027     {\cf18 int} max_i    = (int)(figure.pixels_mat.rows);\par
02028     {\cf18 int} max_j    = (int)(figure.pixels_mat.cols);\par
02029     {\cf18 int} offset_i = (int)fminf(figure.pixels_mat.rows * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING);\par
02030     {\cf18 int} offset_j = (int)fminf(figure.pixels_mat.cols * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING);\par
02031 \par
02032     figure.min_x_pixel = offset_j;\par
02033     figure.max_x_pixel = max_j - offset_j;\par
02034     figure.min_y_pixel = offset_i;\par
02035     figure.max_y_pixel = max_i - offset_i;\par
02036 \par
02037     figure.min_x = + FLT_MAX;\par
02038     figure.max_x = - FLT_MAX;\par
02039     figure.min_y = + FLT_MAX;\par
02040     figure.max_y = - FLT_MAX;\par
02041 \par
02042     figure.offset_zoom_param = ADL_DEFAULT_OFFSET_ZOOM;\par
02043 \par
02044     {\cf19 return} figure;\par
02045 \}\par
02046 \par
02057 {\cf18 void} adl_figure_copy_to_screen(Mat2D_uint32 screen_mat, Figure figure)\par
02058 \{\par
02059     {\cf19 for} ({\cf18 size_t} i = 0; i < figure.pixels_mat.rows; i++) \{\par
02060         {\cf19 for} ({\cf18 size_t} j = 0; j < figure.pixels_mat.cols; j++) \{\par
02061             {\cf18 int} offset_i = figure.top_left_position.y;\par
02062             {\cf18 int} offset_j = figure.top_left_position.x;\par
02063             \par
02064             adl_point_draw(screen_mat, offset_j+j, offset_i+i, MAT2D_AT_UINT32(figure.pixels_mat, i, j), (Offset_zoom_param)\{1,0,0,0,0\});\par
02065         \}\par
02066     \}\par
02067 \}\par
02068 \par
02077 {\cf18 void} adl_axis_draw_on_figure(Figure *figure)\par
02078 \{\par
02079     {\cf18 int} max_i    = (int)(figure->pixels_mat.rows);\par
02080     {\cf18 int} max_j    = (int)(figure->pixels_mat.cols);\par
02081     {\cf18 int} offset_i = (int)fmaxf(fminf(figure->pixels_mat.rows * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING), ADL_MIN_FIGURE_PADDING);\par
02082     {\cf18 int} offset_j = (int)fmaxf(fminf(figure->pixels_mat.cols * ADL_FIGURE_PADDING_PRECENTAGE / 100.0f, ADL_MAX_FIGURE_PADDING), ADL_MIN_FIGURE_PADDING);\par
02083 \par
02084     {\cf18 int} arrow_head_size_x = (int)fminf(ADL_MAX_HEAD_SIZE, ADL_FIGURE_PADDING_PRECENTAGE / 100.0f * (max_j - 2 * offset_j));\par
02085     {\cf18 int} arrow_head_size_y = (int)fminf(ADL_MAX_HEAD_SIZE, ADL_FIGURE_PADDING_PRECENTAGE / 100.0f * (max_i - 2 * offset_i));\par
02086 \par
02087     adl_arrow_draw(figure->pixels_mat, figure->min_x_pixel, figure->max_y_pixel, figure->max_x_pixel, figure->max_y_pixel, ({\cf18 float})arrow_head_size_x / (max_j-2*offset_j), ADL_FIGURE_HEAD_ANGLE_DEG, ADL_FIGURE_AXIS_COLOR, figure->offset_zoom_param);\par
02088     adl_arrow_draw(figure->pixels_mat, figure->min_x_pixel, figure->max_y_pixel, figure->min_x_pixel, figure->min_y_pixel, ({\cf18 float})arrow_head_size_y / (max_i-2*offset_i), ADL_FIGURE_HEAD_ANGLE_DEG, ADL_FIGURE_AXIS_COLOR, figure->offset_zoom_param);\par
02089     {\cf20 // adl_draw_rectangle_min_max(figure->pixels_mat, figure->min_x_pixel, figure->max_x_pixel, figure->min_y_pixel, figure->max_y_pixel, 0);}\par
02090 \par
02091     figure->x_axis_head_size = arrow_head_size_x;\par
02092     figure->y_axis_head_size = arrow_head_size_y;\par
02093 \}\par
02094 \par
02103 {\cf18 void} adl_max_min_values_draw_on_figure(Figure figure)\par
02104 \{\par
02105     {\cf18 char} x_min_sentence[256];\par
02106     {\cf18 char} x_max_sentence[256];\par
02107     snprintf(x_min_sentence, 256, {\cf22 "%g"}, figure.min_x);\par
02108     snprintf(x_max_sentence, 256, {\cf22 "%g"}, figure.max_x);\par
02109 \par
02110     {\cf18 int} x_sentence_hight_pixel = (figure.pixels_mat.rows - figure.max_y_pixel - ADL_MIN_CHARACTER_OFFSET * 3);\par
02111     {\cf18 int} x_min_char_width_pixel = x_sentence_hight_pixel / 2;\par
02112     {\cf18 int} x_max_char_width_pixel = x_sentence_hight_pixel / 2;\par
02113 \par
02114     {\cf18 int} x_min_sentence_width_pixel = (int)fminf((figure.max_x_pixel - figure.min_x_pixel)/2, (x_min_char_width_pixel + ADL_MAX_CHARACTER_OFFSET)*strlen(x_min_sentence));\par
02115     x_min_char_width_pixel = x_min_sentence_width_pixel / strlen(x_min_sentence) - ADL_MIN_CHARACTER_OFFSET;\par
02116 \par
02117     {\cf18 int} x_max_sentence_width_pixel = (int)fminf((figure.max_x_pixel - figure.min_x_pixel)/2, (x_max_char_width_pixel + ADL_MAX_CHARACTER_OFFSET)*strlen(x_max_sentence)) - figure.x_axis_head_size;\par
02118     x_max_char_width_pixel = (x_max_sentence_width_pixel + figure.x_axis_head_size) / strlen(x_max_sentence) - ADL_MIN_CHARACTER_OFFSET;\par
02119 \par
02120     {\cf18 int} x_min_sentence_hight_pixel = (int)fminf(x_min_char_width_pixel * 2, x_sentence_hight_pixel);\par
02121     {\cf18 int} x_max_sentence_hight_pixel = (int)fminf(x_max_char_width_pixel * 2, x_sentence_hight_pixel);\par
02122 \par
02123     x_min_sentence_hight_pixel = (int)fminf(x_min_sentence_hight_pixel, x_max_sentence_hight_pixel);\par
02124     x_max_sentence_hight_pixel = x_min_sentence_hight_pixel;\par
02125 \par
02126     {\cf18 int} x_max_x_top_left = figure.max_x_pixel - strlen(x_max_sentence) * (x_max_sentence_hight_pixel / 2 + ADL_MIN_CHARACTER_OFFSET) - figure.x_axis_head_size;\par
02127 \par
02128     adl_sentence_draw(figure.pixels_mat, x_min_sentence, strlen(x_min_sentence), figure.min_x_pixel, figure.max_y_pixel+ADL_MIN_CHARACTER_OFFSET*2, x_min_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02129     adl_sentence_draw(figure.pixels_mat, x_max_sentence, strlen(x_max_sentence), x_max_x_top_left, figure.max_y_pixel+ADL_MIN_CHARACTER_OFFSET*2, x_max_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02130     \par
02131     {\cf18 char} y_min_sentence[256];\par
02132     {\cf18 char} y_max_sentence[256];\par
02133     snprintf(y_min_sentence, 256, {\cf22 "%g"}, figure.min_y);\par
02134     snprintf(y_max_sentence, 256, {\cf22 "%g"}, figure.max_y);\par
02135 \par
02136     {\cf18 int} y_sentence_width_pixel = figure.min_x_pixel - ADL_MAX_CHARACTER_OFFSET - figure.y_axis_head_size;\par
02137     {\cf18 int} y_max_char_width_pixel = y_sentence_width_pixel;\par
02138     y_max_char_width_pixel /= strlen(y_max_sentence);\par
02139     {\cf18 int} y_max_sentence_hight_pixel = y_max_char_width_pixel * 2;\par
02140 \par
02141     {\cf18 int} y_min_char_width_pixel = y_sentence_width_pixel;\par
02142     y_min_char_width_pixel /= strlen(y_min_sentence);\par
02143     {\cf18 int} y_min_sentence_hight_pixel = y_min_char_width_pixel * 2;\par
02144 \par
02145     y_min_sentence_hight_pixel = (int)fmaxf(fminf(y_min_sentence_hight_pixel, y_max_sentence_hight_pixel), 1);\par
02146     y_max_sentence_hight_pixel = y_min_sentence_hight_pixel;\par
02147 \par
02148     adl_sentence_draw(figure.pixels_mat, y_max_sentence, strlen(y_max_sentence), ADL_MAX_CHARACTER_OFFSET/2, figure.min_y_pixel, y_max_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02149     adl_sentence_draw(figure.pixels_mat, y_min_sentence, strlen(y_min_sentence), ADL_MAX_CHARACTER_OFFSET/2, figure.max_y_pixel-y_min_sentence_hight_pixel, y_min_sentence_hight_pixel, ADL_FIGURE_AXIS_COLOR, figure.offset_zoom_param);\par
02150 \}\par
02151 \par
02163 {\cf18 void} adl_curve_add_to_figure(Figure *figure, Point *src_points, {\cf18 size_t} src_len, uint32_t color)\par
02164 \{\par
02165     Curve src_points_ada;\par
02166     ada_init_array(Point, src_points_ada);\par
02167     src_points_ada.color = color;\par
02168 \par
02169     {\cf19 for} ({\cf18 size_t} i = 0; i < src_len; i++) \{\par
02170         Point current_point = src_points[i];\par
02171         {\cf19 if} (current_point.x > figure->max_x) \{\par
02172             figure->max_x = current_point.x;\par
02173         \}\par
02174         {\cf19 if} (current_point.y > figure->max_y) \{\par
02175             figure->max_y = current_point.y;\par
02176         \}\par
02177         {\cf19 if} (current_point.x < figure->min_x) \{\par
02178             figure->min_x = current_point.x;\par
02179         \}\par
02180         {\cf19 if} (current_point.y < figure->min_y) \{\par
02181             figure->min_y = current_point.y;\par
02182         \}\par
02183         ada_appand(Point, src_points_ada, current_point);\par
02184     \}\par
02185     \par
02186     ada_appand(Curve, figure->src_curve_array, src_points_ada);\par
02187 \}\par
02188 \par
02198 {\cf18 void} adl_curves_plot_on_figure(Figure figure)\par
02199 \{\par
02200     mat2D_fill_uint32(figure.pixels_mat, figure.background_color);\par
02201     memset(figure.inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * figure.inv_z_buffer_mat.rows * figure.inv_z_buffer_mat.cols);\par
02202     {\cf19 if} (figure.to_draw_axis) adl_axis_draw_on_figure(&figure);\par
02203 \par
02204     {\cf19 for} ({\cf18 size_t} curve_index = 0; curve_index < figure.src_curve_array.length; curve_index++) \{\par
02205         {\cf18 size_t} src_len = figure.src_curve_array.elements[curve_index].length;\par
02206         Point *src_points = figure.src_curve_array.elements[curve_index].elements;\par
02207         {\cf19 for} ({\cf18 size_t} i = 0; i < src_len-1; i++) \{\par
02208             Point src_start = src_points[i];\par
02209             Point src_end   = src_points[i+1];\par
02210             Point des_start = \{0\};\par
02211             Point des_end = \{0\};\par
02212 \par
02213             des_start.x = adl_linear_map(src_start.x, figure.min_x, figure.max_x, figure.min_x_pixel, figure.max_x_pixel);\par
02214             des_start.y = ((figure.max_y_pixel + figure.min_y_pixel) - adl_linear_map(src_start.y, figure.min_y, figure.max_y, figure.min_y_pixel, figure.max_y_pixel));\par
02215 \par
02216             des_end.x = adl_linear_map(src_end.x, figure.min_x, figure.max_x, figure.min_x_pixel, figure.max_x_pixel);\par
02217             des_end.y = ((figure.max_y_pixel + figure.min_y_pixel) - adl_linear_map(src_end.y, figure.min_y, figure.max_y, figure.min_y_pixel, figure.max_y_pixel));\par
02218 \par
02219             adl_line_draw(figure.pixels_mat, des_start.x, des_start.y, des_end.x, des_end.y, figure.src_curve_array.elements[curve_index].color, figure.offset_zoom_param);\par
02220         \}\par
02221     \}\par
02222 \par
02223     {\cf19 if} (figure.to_draw_max_min_values) adl_max_min_values_draw_on_figure(figure);\par
02224 \}\par
02225 \par
02226 {\cf20 /* check offset2D. might convert it to a Mat2D */}\par
02227 {\cf21 #define adl_offset2d(i, j, ni) (j) * (ni) + (i)}\par
02247 {\cf18 void} adl_2Dscalar_interp_on_figure(Figure figure, {\cf18 double} *x_2Dmat, {\cf18 double} *y_2Dmat, {\cf18 double} *scalar_2Dmat, {\cf18 int} ni, {\cf18 int} nj, {\cf18 char} color_scale[], {\cf18 float} num_of_rotations)\par
02248 \{\par
02249     mat2D_fill_uint32(figure.pixels_mat, figure.background_color);\par
02250     memset(figure.inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * figure.inv_z_buffer_mat.rows * figure.inv_z_buffer_mat.cols);\par
02251     {\cf19 if} (figure.to_draw_axis) adl_axis_draw_on_figure(&figure);\par
02252 \par
02253     {\cf18 float} min_scalar = FLT_MAX; \par
02254     {\cf18 float} max_scalar = FLT_MIN; \par
02255     {\cf19 for} ({\cf18 int} i = 0; i < ni; i++) \{\par
02256         {\cf19 for} ({\cf18 int} j = 0; j < nj; j++) \{\par
02257             {\cf18 float} val = scalar_2Dmat[adl_offset2d(i, j, ni)];\par
02258             {\cf19 if} (val > max_scalar) max_scalar = val;\par
02259             {\cf19 if} (val < min_scalar) min_scalar = val;\par
02260             {\cf18 float} current_x = x_2Dmat[adl_offset2d(i, j, ni)];\par
02261             {\cf18 float} current_y = y_2Dmat[adl_offset2d(i, j, ni)];\par
02262             {\cf19 if} (current_x > figure.max_x) \{\par
02263                 figure.max_x = current_x;\par
02264             \}\par
02265             {\cf19 if} (current_y > figure.max_y) \{\par
02266                 figure.max_y = current_y;\par
02267             \}\par
02268             {\cf19 if} (current_x < figure.min_x) \{\par
02269                 figure.min_x = current_x;\par
02270             \}\par
02271             {\cf19 if} (current_y < figure.min_y) \{\par
02272                 figure.min_y = current_y;\par
02273             \}\par
02274         \}\par
02275     \}\par
02276 \par
02277     {\cf18 float} window_w = (float)figure.pixels_mat.cols;\par
02278     {\cf18 float} window_h = ({\cf18 float})figure.pixels_mat.rows;\par
02279 \par
02280     {\cf19 for} ({\cf18 int} i = 0; i < ni-1; i++) \{\par
02281         {\cf19 for} ({\cf18 int} j = 0; j < nj-1; j++) \{\par
02282             Quad quad = \{0\};\par
02283             quad.light_intensity[0] = 1;\par
02284             quad.light_intensity[1] = 1;\par
02285             quad.light_intensity[2] = 1;\par
02286             quad.light_intensity[3] = 1;\par
02287             quad.to_draw = 1;\par
02288 \par
02289             quad.points[3].x = x_2Dmat[adl_offset2d(i  , j  , ni)];\par
02290             quad.points[3].y = y_2Dmat[adl_offset2d(i  , j  , ni)];\par
02291             quad.points[2].x = x_2Dmat[adl_offset2d(i+1, j  , ni)];\par
02292             quad.points[2].y = y_2Dmat[adl_offset2d(i+1, j  , ni)];\par
02293             quad.points[1].x = x_2Dmat[adl_offset2d(i+1, j+1, ni)];\par
02294             quad.points[1].y = y_2Dmat[adl_offset2d(i+1, j+1, ni)];\par
02295             quad.points[0].x = x_2Dmat[adl_offset2d(i  , j+1, ni)];\par
02296             quad.points[0].y = y_2Dmat[adl_offset2d(i  , j+1, ni)];\par
02297 \par
02298             {\cf19 for} ({\cf18 int} p_index = 0; p_index < 4; p_index++) \{\par
02299                 quad.points[p_index].z = 1;\par
02300                 quad.points[p_index].w = 1;\par
02301                 quad.points[p_index].x = adl_linear_map(quad.points[p_index].x, figure.min_x, figure.max_x, figure.min_x_pixel, figure.max_x_pixel);\par
02302                 quad.points[p_index].y = ((figure.max_y_pixel + figure.min_y_pixel) - adl_linear_map(quad.points[p_index].y, figure.min_y, figure.max_y, figure.min_y_pixel, figure.max_y_pixel));\par
02303 \par
02304                 adl_offset_zoom_point(quad.points[p_index], window_w, window_h, figure.offset_zoom_param);\par
02305             \}\par
02306 \par
02307             {\cf18 float} t3 = adl_linear_map(scalar_2Dmat[adl_offset2d(i  , j  , ni)], min_scalar, max_scalar, 0, 1);\par
02308             {\cf18 float} t2 = adl_linear_map(scalar_2Dmat[adl_offset2d(i+1, j  , ni)], min_scalar, max_scalar, 0, 1);\par
02309             {\cf18 float} t1 = adl_linear_map(scalar_2Dmat[adl_offset2d(i+1, j+1, ni)], min_scalar, max_scalar, 0, 1);\par
02310             {\cf18 float} t0 = adl_linear_map(scalar_2Dmat[adl_offset2d(  i, j+1, ni)], min_scalar, max_scalar, 0, 1);\par
02311 \par
02312             {\cf20 /* https://en.wikipedia.org/wiki/Oklab_color_space */}\par
02313             {\cf19 if} (!strcmp(color_scale, {\cf22 "b-c"})) \{\par
02314                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = CYAN_hexARGB;\par
02315                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02316                 quad.colors[0] = color;\par
02317 \par
02318                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02319                 quad.colors[1] = color;\par
02320 \par
02321                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02322                 quad.colors[2] = color;\par
02323 \par
02324                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02325                 quad.colors[3] = color;\par
02326             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "b-g"})) \{\par
02327                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = GREEN_hexARGB;\par
02328                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02329                 quad.colors[0] = color;\par
02330 \par
02331                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02332                 quad.colors[1] = color;\par
02333 \par
02334                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02335                 quad.colors[2] = color;\par
02336 \par
02337                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02338                 quad.colors[3] = color;\par
02339             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "b-r"})) \{\par
02340                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = RED_hexARGB;\par
02341                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02342                 quad.colors[0] = color;\par
02343 \par
02344                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02345                 quad.colors[1] = color;\par
02346 \par
02347                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02348                 quad.colors[2] = color;\par
02349 \par
02350                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02351                 quad.colors[3] = color;\par
02352             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "b-y"})) \{\par
02353                 uint32_t color = 0, color1 = BLUE_hexARGB, color2 = YELLOW_hexARGB;\par
02354                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02355                 quad.colors[0] = color;\par
02356 \par
02357                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02358                 quad.colors[1] = color;\par
02359 \par
02360                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02361                 quad.colors[2] = color;\par
02362 \par
02363                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02364                 quad.colors[3] = color;\par
02365             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "g-y"})) \{\par
02366                 uint32_t color = 0, color1 = GREEN_hexARGB, color2 = YELLOW_hexARGB;\par
02367                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02368                 quad.colors[0] = color;\par
02369 \par
02370                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02371                 quad.colors[1] = color;\par
02372 \par
02373                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02374                 quad.colors[2] = color;\par
02375 \par
02376                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02377                 quad.colors[3] = color;\par
02378             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "g-p"})) \{\par
02379                 uint32_t color = 0, color1 = GREEN_hexARGB, color2 = PURPLE_hexARGB;\par
02380                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02381                 quad.colors[0] = color;\par
02382 \par
02383                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02384                 quad.colors[1] = color;\par
02385 \par
02386                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02387                 quad.colors[2] = color;\par
02388 \par
02389                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02390                 quad.colors[3] = color;\par
02391             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "g-r"})) \{\par
02392                 uint32_t color = 0, color1 = GREEN_hexARGB, color2 = RED_hexARGB;\par
02393                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02394                 quad.colors[0] = color;\par
02395 \par
02396                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02397                 quad.colors[1] = color;\par
02398 \par
02399                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02400                 quad.colors[2] = color;\par
02401 \par
02402                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02403                 quad.colors[3] = color;\par
02404             \} {\cf19 else} {\cf19 if} (!strcmp(color_scale, {\cf22 "r-y"})) \{\par
02405                 uint32_t color = 0, color1 = RED_hexARGB, color2 = YELLOW_hexARGB;\par
02406                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t0, num_of_rotations, &color);\par
02407                 quad.colors[0] = color;\par
02408 \par
02409                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t1, num_of_rotations, &color);\par
02410                 quad.colors[1] = color;\par
02411 \par
02412                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t2, num_of_rotations, &color);\par
02413                 quad.colors[2] = color;\par
02414 \par
02415                 adl_interpolate_ARGBcolor_on_okLch(color1, color2, t3, num_of_rotations, &color);\par
02416                 quad.colors[3] = color;\par
02417             \}\par
02418 \par
02419             adl_quad_fill_interpolate_color_mean_value(figure.pixels_mat, figure.inv_z_buffer_mat, quad, ADL_DEFAULT_OFFSET_ZOOM); \par
02420         \}\par
02421     \}\par
02422 \par
02423     {\cf19 if} (figure.to_draw_max_min_values) \{\par
02424         adl_max_min_values_draw_on_figure(figure);\par
02425     \}\par
02426 \par
02427 \}\par
02428 \par
02446 Grid adl_cartesian_grid_create({\cf18 float} min_e1, {\cf18 float} max_e1, {\cf18 float} min_e2, {\cf18 float} max_e2, {\cf18 int} num_samples_e1, {\cf18 int} num_samples_e2, {\cf18 char} plane[], {\cf18 float} third_direction_position)\par
02447 \{\par
02448     Grid grid;\par
02449     ada_init_array(Curve, grid.curves);\par
02450 \par
02451     grid.min_e1 = min_e1;\par
02452     grid.max_e1 = max_e1;\par
02453     grid.min_e2 = min_e2;\par
02454     grid.max_e2 = max_e2;\par
02455     grid.num_samples_e1 = num_samples_e1;\par
02456     grid.num_samples_e2 = num_samples_e2;\par
02457     strncpy(grid.plane, plane, 2);\par
02458 \par
02459     {\cf18 float} del_e1 = (max_e1 - min_e1) / num_samples_e1;\par
02460     {\cf18 float} del_e2 = (max_e2 - min_e2) / num_samples_e2;\par
02461 \par
02462     grid.de1 = del_e1;\par
02463     grid.de2 = del_e2;\par
02464 \par
02465     {\cf19 if} (!strncmp(plane, {\cf22 "XY"}, 3) || !strncmp(plane, {\cf22 "xy"}, 3)) \{\par
02466         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02467             Curve curve;\par
02468             ada_init_array(Point, curve);\par
02469             Point point_max = \{0\}, point_min = \{0\};\par
02470 \par
02471             point_min.x = min_e1 + e1_index * del_e1;\par
02472             point_min.y = min_e2;\par
02473             point_min.z = third_direction_position;\par
02474             point_min.w = 1;\par
02475 \par
02476             point_max.x = min_e1 + e1_index * del_e1;\par
02477             point_max.y = max_e2;\par
02478             point_max.z = third_direction_position;\par
02479             point_max.w = 1;\par
02480 \par
02481             ada_appand(Point, curve, point_min);\par
02482             ada_appand(Point, curve, point_max);\par
02483 \par
02484             ada_appand(Curve, grid.curves, curve);\par
02485         \}\par
02486         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02487             Curve curve;\par
02488             ada_init_array(Point, curve);\par
02489             Point point_max = \{0\}, point_min = \{0\};\par
02490 \par
02491             point_min.x = min_e1;\par
02492             point_min.y = min_e2 + e2_index * del_e2;\par
02493             point_min.z = third_direction_position;\par
02494             point_min.w = 1;\par
02495 \par
02496             point_max.x = max_e1;\par
02497             point_max.y = min_e2 + e2_index * del_e2;\par
02498             point_max.z = third_direction_position;\par
02499             point_max.w = 1;\par
02500 \par
02501             ada_appand(Point, curve, point_min);\par
02502             ada_appand(Point, curve, point_max);\par
02503 \par
02504             ada_appand(Curve, grid.curves, curve);\par
02505         \}\par
02506     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "XZ"}, 3) || !strncmp(plane, {\cf22 "xz"}, 3)) \{\par
02507         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02508             Curve curve;\par
02509             ada_init_array(Point, curve);\par
02510             Point point_max = \{0\}, point_min = \{0\};\par
02511 \par
02512             point_min.x = min_e1 + e1_index * del_e1;\par
02513             point_min.y = third_direction_position;\par
02514             point_min.z = min_e2;\par
02515             point_min.w = 1;\par
02516 \par
02517             point_max.x = min_e1 + e1_index * del_e1;\par
02518             point_max.y = third_direction_position;\par
02519             point_max.z = max_e2;\par
02520             point_max.w = 1;\par
02521 \par
02522             ada_appand(Point, curve, point_min);\par
02523             ada_appand(Point, curve, point_max);\par
02524 \par
02525             ada_appand(Curve, grid.curves, curve);\par
02526         \}\par
02527         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02528             Curve curve;\par
02529             ada_init_array(Point, curve);\par
02530             Point point_max = \{0\}, point_min = \{0\};\par
02531 \par
02532             point_min.x = min_e1;\par
02533             point_min.y = third_direction_position;\par
02534             point_min.z = min_e2 + e2_index * del_e2;\par
02535             point_min.w = 1;\par
02536 \par
02537             point_max.x = max_e1;\par
02538             point_max.y = third_direction_position;\par
02539             point_max.z = min_e2 + e2_index * del_e2;\par
02540             point_max.w = 1;\par
02541 \par
02542             ada_appand(Point, curve, point_min);\par
02543             ada_appand(Point, curve, point_max);\par
02544 \par
02545             ada_appand(Curve, grid.curves, curve);\par
02546         \}\par
02547     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "YX"}, 3) || !strncmp(plane, {\cf22 "yx"}, 3)) \{\par
02548         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02549             Curve curve;\par
02550             ada_init_array(Point, curve);\par
02551             Point point_max = \{0\}, point_min = \{0\};\par
02552 \par
02553             point_min.x = min_e2;\par
02554             point_min.y = min_e1 + e1_index * del_e1;\par
02555             point_min.z = third_direction_position;\par
02556             point_min.w = 1;\par
02557 \par
02558             point_max.x = max_e2;\par
02559             point_max.y = min_e1 + e1_index * del_e1;\par
02560             point_max.z = third_direction_position;\par
02561             point_max.w = 1;\par
02562 \par
02563             ada_appand(Point, curve, point_min);\par
02564             ada_appand(Point, curve, point_max);\par
02565 \par
02566             ada_appand(Curve, grid.curves, curve);\par
02567         \}\par
02568         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02569             Curve curve;\par
02570             ada_init_array(Point, curve);\par
02571             Point point_max = \{0\}, point_min = \{0\};\par
02572 \par
02573             point_min.x = min_e2 + e2_index * del_e2;\par
02574             point_min.y = min_e1;\par
02575             point_min.z = third_direction_position;\par
02576             point_min.w = 1;\par
02577 \par
02578             point_max.x = min_e2 + e2_index * del_e2;\par
02579             point_max.y = max_e1;\par
02580             point_max.z = third_direction_position;\par
02581             point_max.w = 1;\par
02582 \par
02583             ada_appand(Point, curve, point_min);\par
02584             ada_appand(Point, curve, point_max);\par
02585 \par
02586             ada_appand(Curve, grid.curves, curve);\par
02587         \}\par
02588     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "YZ"}, 3) || !strncmp(plane, {\cf22 "yz"}, 3)) \{\par
02589         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02590             Curve curve;\par
02591             ada_init_array(Point, curve);\par
02592             Point point_max = \{0\}, point_min = \{0\};\par
02593 \par
02594             point_min.x = third_direction_position;\par
02595             point_min.y = min_e1 + e1_index * del_e1;\par
02596             point_min.z = min_e2;\par
02597             point_min.w = 1;\par
02598 \par
02599             point_max.x = third_direction_position;\par
02600             point_max.y = min_e1 + e1_index * del_e1;\par
02601             point_max.z = max_e2;\par
02602             point_max.w = 1;\par
02603 \par
02604             ada_appand(Point, curve, point_min);\par
02605             ada_appand(Point, curve, point_max);\par
02606 \par
02607             ada_appand(Curve, grid.curves, curve);\par
02608         \}\par
02609         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02610             Curve curve;\par
02611             ada_init_array(Point, curve);\par
02612             Point point_max = \{0\}, point_min = \{0\};\par
02613 \par
02614             point_min.x = third_direction_position;\par
02615             point_min.y = min_e1;\par
02616             point_min.z = min_e2 + e2_index * del_e2;\par
02617             point_min.w = 1;\par
02618 \par
02619             point_max.x = third_direction_position;\par
02620             point_max.y = max_e1;\par
02621             point_max.z = min_e2 + e2_index * del_e2;\par
02622             point_max.w = 1;\par
02623 \par
02624             ada_appand(Point, curve, point_min);\par
02625             ada_appand(Point, curve, point_max);\par
02626 \par
02627             ada_appand(Curve, grid.curves, curve);\par
02628         \}\par
02629     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "ZX"}, 3) || !strncmp(plane, {\cf22 "zx"}, 3)) \{\par
02630         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02631             Curve curve;\par
02632             ada_init_array(Point, curve);\par
02633             Point point_max = \{0\}, point_min = \{0\};\par
02634 \par
02635             point_min.x = min_e2;\par
02636             point_min.y = third_direction_position;\par
02637             point_min.z = min_e1 + e1_index * del_e1;\par
02638             point_min.w = 1;\par
02639 \par
02640             point_max.x = max_e2;\par
02641             point_max.y = third_direction_position;\par
02642             point_max.z = min_e1 + e1_index * del_e1;\par
02643             point_max.w = 1;\par
02644 \par
02645             ada_appand(Point, curve, point_min);\par
02646             ada_appand(Point, curve, point_max);\par
02647 \par
02648             ada_appand(Curve, grid.curves, curve);\par
02649         \}\par
02650         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02651             Curve curve;\par
02652             ada_init_array(Point, curve);\par
02653             Point point_max = \{0\}, point_min = \{0\};\par
02654 \par
02655             point_min.x = min_e2 + e2_index * del_e2;\par
02656             point_min.y = third_direction_position;\par
02657             point_min.z = min_e1;\par
02658             point_min.w = 1;\par
02659 \par
02660             point_max.x = min_e2 + e2_index * del_e2;\par
02661             point_max.y = third_direction_position;\par
02662             point_max.z = max_e1;\par
02663             point_max.w = 1;\par
02664 \par
02665             ada_appand(Point, curve, point_min);\par
02666             ada_appand(Point, curve, point_max);\par
02667 \par
02668             ada_appand(Curve, grid.curves, curve);\par
02669         \}\par
02670     \} {\cf19 else} {\cf19 if} (!strncmp(plane, {\cf22 "ZY"}, 3) || !strncmp(plane, {\cf22 "zy"}, 3)) \{\par
02671         {\cf19 for} ({\cf18 int} e1_index = 0; e1_index <= num_samples_e1; e1_index++) \{\par
02672             Curve curve;\par
02673             ada_init_array(Point, curve);\par
02674             Point point_max = \{0\}, point_min = \{0\};\par
02675 \par
02676             point_min.x = third_direction_position;\par
02677             point_min.y = min_e2;\par
02678             point_min.z = min_e1 + e1_index * del_e1;\par
02679             point_min.w = 1;\par
02680 \par
02681             point_max.x = third_direction_position;\par
02682             point_max.y = max_e2;\par
02683             point_max.z = min_e1 + e1_index * del_e1;\par
02684             point_max.w = 1;\par
02685 \par
02686             ada_appand(Point, curve, point_min);\par
02687             ada_appand(Point, curve, point_max);\par
02688 \par
02689             ada_appand(Curve, grid.curves, curve);\par
02690         \}\par
02691         {\cf19 for} ({\cf18 int} e2_index = 0; e2_index <= num_samples_e2; e2_index++) \{\par
02692             Curve curve;\par
02693             ada_init_array(Point, curve);\par
02694             Point point_max = \{0\}, point_min = \{0\};\par
02695 \par
02696             point_min.x = third_direction_position;\par
02697             point_min.y = min_e2 + e2_index * del_e2;\par
02698             point_min.z = min_e1;\par
02699             point_min.w = 1;\par
02700 \par
02701             point_max.x = third_direction_position;\par
02702             point_max.y = min_e2 + e2_index * del_e2;\par
02703             point_max.z = max_e1;\par
02704             point_max.w = 1;\par
02705 \par
02706             ada_appand(Point, curve, point_min);\par
02707             ada_appand(Point, curve, point_max);\par
02708 \par
02709             ada_appand(Curve, grid.curves, curve);\par
02710         \}\par
02711     \}\par
02712 \par
02713     {\cf19 return} grid;\par
02714 \}\par
02715 \par
02724 {\cf18 void} adl_grid_draw(Mat2D_uint32 screen_mat, Grid grid, uint32_t color, Offset_zoom_param offset_zoom_param)\par
02725 \{\par
02726     {\cf19 for} ({\cf18 size_t} curve_index = 0; curve_index < grid.curves.length; curve_index++) \{\par
02727         adl_lines_draw(screen_mat, grid.curves.elements[curve_index].elements, grid.curves.elements[curve_index].length, color, offset_zoom_param);\par
02728     \}\par
02729 \}\par
02730 \par
02731 {\cf21 #endif }{\cf20 /*ALMOG_DRAW_LIBRARY_IMPLEMENTATION*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/include/Almog_Dynamic_Array.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_Dynamic_Array.h}
{\xe \v src/include/Almog_Dynamic_Array.h}
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header-only C macros that implement a simple dynamic array. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdlib.h>}\par
{\f2 #include <assert.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Almog_Dynamic_Array.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Dynamic__Array_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Dynamic__Array_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_INIT_CAPACITY}\~ 10\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default initial capacity used by ada_init_array. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_MALLOC}\~ malloc\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by this header (defaults to malloc). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_REALLOC}\~ realloc\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reallocation function used by this header (defaults to realloc). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADA_ASSERT}\~ assert\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by this header (defaults to assert). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_init_array}(type,  header)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize an array header and allocate its initial storage. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_resize}(type,  header,  new_capacity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resize the underlying storage to hold new_capacity elements. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_appand}(type,  header,  value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append a value to the end of the array, growing if necessary. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_insert}(type,  header,  value,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at position index, preserving order (O(n)). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_insert_unordered}(type,  header,  value,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at index without preserving order (O(1) amortized). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_remove}(type,  header,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index, preserving order (O(n)). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ada_remove_unordered}(type,  header,  index)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index by moving the last element into its place (O(1)); order is not preserved. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header-only C macros that implement a simple dynamic array. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This header provides a minimal, macro-based dynamic array for POD-like types. The array "header" is a user-defined struct with three fields:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t length; current number of elements\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t capacity; allocated capacity (in elements)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
T* elements; pointer to contiguous storage of elements (type T)\par}
\par
How to use: 1) Define a header struct with length/capacity/elements fields. 2) Initialize it with {\b ada_init_array(T, header)}. 3) Modify it with ada_appand (append), ada_insert, remove variants, etc. 4) When done, free(header.elements) (or your custom deallocator).\par
Customization:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Define ADA_MALLOC, ADA_REALLOC, and ADA_ASSERT before including this header to override allocation and assertion behavior.\par}
\par
Complexity (n = number of elements):{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Append: amortized O(1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ordered insert/remove: O(n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Unordered insert/remove: O(1)\par}
\par
Notes and limitations:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
These are macros; arguments may be evaluated multiple times. Pass only simple lvalues (no side effects).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Index checks rely on ADA_ASSERT; with NDEBUG they may be compiled out.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ada_resize exits the process (exit(1)) if reallocation fails.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ada_insert reads header.elements[header.length - 1] internally; inserting into an empty array via ada_insert is undefined behavior. Use ada_appand or ada_insert_unordered for that case.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
No automatic shrinking; you may call ada_resize manually.\par}
\par
Example: typedef struct \{ size_t length; size_t capacity; int* elements; \} ada_int_array;\par
ada_int_array arr; {\b ada_init_array(int, arr)}; {\b ada_appand(int, arr, 42)}; {\b ada_insert(int, arr, 7, 0)}; // requires arr.length > 0 {\b ada_remove(int, arr, 1)}; free(arr.elements); \par
}{
Definition in file {\b Almog_Dynamic_Array.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ada_appand\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_appand}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_appand( type,  header,  value)}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{                        \\\par
        if (header.length >= header.capacity) \{                     \\\par
            ada_resize(type, header, ({\cf18 int})(header.capacity*1.5));   \\\par
        \}                                                           \\\par
        header.elements[header.length] = value;                     \\\par
        header.length++;                                            \\\par
    \} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append a value to the end of the array, growing if necessary. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Value to append.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is incremented by 1; the last element equals value.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Growth factor is (int)(header.capacity * 1.5). Because of truncation, very small capacities may not grow (e.g., from 1 to 1). With the default INIT_CAPACITY=10 this is typically not an issue unless you manually shrink capacity. Ensure growth always increases capacity by at least 1 if you customize this macro. \par
}}}{
Definition at line {\b 169} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_ASSERT\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by this header (defaults to assert). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define ADA_ASSERT before including this file to override. When NDEBUG is defined, standard assert() is disabled. \par
}{
Definition at line {\b 96} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_init_array\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_init_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_init_array( type,  header)}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{                                       \\\par
        header.capacity = ADA_INIT_CAPACITY;                                        \\\par
        header.length = 0;                                                      \\\par
        header.elements = (type *)ADA_MALLOC({\cf17 sizeof}(type) * header.capacity);   \\\par
        ADA_ASSERT(header.elements != NULL);                                    \\\par
    \} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize an array header and allocate its initial storage. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array (e.g., int). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct containing fields: length, capacity, and elements.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header is a modifiable lvalue; header.elements is uninitialized or ignored and will be overwritten. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length == 0, header.capacity == INIT_CAPACITY, header.elements != NULL (or ADA_ASSERT fails).\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Allocation uses ADA_MALLOC and is checked via ADA_ASSERT. \par
}}}{
Definition at line {\b 120} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_INIT_CAPACITY\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_INIT_CAPACITY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_INIT_CAPACITY\~ 10}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default initial capacity used by ada_init_array. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You may override this by defining INIT_CAPACITY before including this file. \par
}{
Definition at line {\b 64} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_insert\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_insert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_insert( type,  header,  value,  index)}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                         \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                                                                          \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);                                                         \\\par
    ada_appand(type, header, header.elements[header.length-1]);                                             \\\par
    for ({\cf18 size_t} ada_for_loop_index = header.length-2; ada_for_loop_index > (index); ada_for_loop_index--) \{ \\\par
        header.elements[ada_for_loop_index] = header.elements [ada_for_loop_index-1];                       \\\par
    \}                                                                                                       \\\par
    header.elements[(index)] = value;                                                                       \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at position index, preserving order (O(n)). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Value to insert. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Destination index in the range [0, header.length].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index <= header.length. \par
header.length > 0 if index == header.length (this macro reads the last element internally). For inserting into an empty array, use ada_appand or ada_insert_unordered. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Element is inserted at index; subsequent elements are shifted right; header.length is incremented by 1.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This macro asserts index is non-negative and an integer value using ADA_ASSERT. No explicit upper-bound assert is performed. \par
}}}{
Definition at line {\b 196} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_insert_unordered\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_insert_unordered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_insert_unordered( type,  header,  value,  index)}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{   \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                              \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);             \\\par
    if (({\cf18 size_t})(index) == header.length) \{                     \\\par
        ada_appand(type, header, value);                        \\\par
    \} {\cf19 else} \{                                                    \\\par
        ada_appand(type, header, header.elements[(index)]);     \\\par
        header.elements[(index)] = value;                       \\\par
    \}                                                           \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insert value at index without preserving order (O(1) amortized). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If index == header.length, this behaves like an append. Otherwise, the current element at index is moved to the end, and value is written at index.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Value to insert. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Index in the range [0, header.length].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index <= header.length. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is incremented by 1; array order is not preserved. \par
}}}{
Definition at line {\b 222} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_MALLOC\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_MALLOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_MALLOC\~ malloc}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by this header (defaults to malloc). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define ADA_MALLOC to a compatible allocator before including this file to override the default. \par
}{
Definition at line {\b 74} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ADA_REALLOC\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ADA_REALLOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADA_REALLOC\~ realloc}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reallocation function used by this header (defaults to realloc). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define ADA_REALLOC to a compatible reallocator before including this file to override the default. \par
}{
Definition at line {\b 85} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_remove\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_remove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_remove( type,  header,  index)}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                                                                          \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);                                                         \\\par
    for ({\cf18 size_t} ada_for_loop_index = (index); ada_for_loop_index < header.length-1; ada_for_loop_index++) \{ \\\par
        header.elements[ada_for_loop_index] = header.elements[ada_for_loop_index+1];                        \\\par
    \}                                                                                                       \\\par
    header.length--;                                                                                        \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index, preserving order (O(n)). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Index in the range [0, header.length - 1].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index < header.length. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is decremented by 1; subsequent elements are shifted left by one position. The element beyond the new length is left uninitialized. \par
}}}{
Definition at line {\b 246} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_remove_unordered\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_remove_unordered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_remove_unordered( type,  header,  index)}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{          \\\par
    ADA_ASSERT(({\cf18 int})(index) >= 0);                              \\\par
    ADA_ASSERT(({\cf18 float})(index) - ({\cf18 int})(index) == 0);             \\\par
    header.elements[index] = header.elements[header.length-1];  \\\par
    header.length--;                                            \\\par
\} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove element at index by moving the last element into its place (O(1)); order is not preserved. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{Index in the range [0, header.length - 1].\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= index < header.length and header.length > 0. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.length is decremented by 1; array order is not preserved. \par
}}}{
Definition at line {\b 267} of file {\b Almog_Dynamic_Array.h}.}\par
}
{\xe \v ada_resize\:Almog_Dynamic_Array.h}
{\xe \v Almog_Dynamic_Array.h\:ada_resize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ada_resize( type,  header,  new_capacity)}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{                                                         \\\par
        type *ada_temp_pointer = (type *)ADA_REALLOC(({\cf18 void} *)(header.elements), new_capacity*{\cf17 sizeof}(type)); \\\par
        if (ada_temp_pointer == NULL) \{                                                                     \\\par
            exit(1);                                                                                        \\\par
        \}                                                                                                   \\\par
        header.elements = ada_temp_pointer;                                                                 \\\par
        ADA_ASSERT(header.elements != NULL);                                                                \\\par
        header.capacity = new_capacity;                                                                     \\\par
    \} {\cf19 while} (0)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resize the underlying storage to hold new_capacity elements. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Element type stored in the array. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i header} \cell }{Lvalue of the header struct. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i new_capacity} \cell }{New capacity in number of elements.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
new_capacity >= header.length (otherwise elements beyond new_capacity are lost and length will not be adjusted). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
header.capacity == new_capacity and header.elements points to a block large enough for new_capacity elements.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
On allocation failure, this macro calls exit(1). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Reallocation uses ADA_REALLOC and is also checked via ADA_ASSERT. \par
}}}{
Definition at line {\b 143} of file {\b Almog_Dynamic_Array.h}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Dynamic_Array.h\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_Dynamic_Array.h}
{\xe \v src/include/Almog_Dynamic_Array.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00051 {\cf21 #ifndef ALMOG_DYNAMIC_ARRAY_H_}\par
00052 {\cf21 #define ALMOG_DYNAMIC_ARRAY_H_}\par
00053 \par
00054 {\cf21 #include <stdlib.h>}\par
00055 {\cf21 #include <assert.h>}\par
00056 \par
00057 \par
00064 {\cf21 #define ADA_INIT_CAPACITY 10}\par
00065 \par
00073 {\cf21 #ifndef ADA_MALLOC}\par
00074 {\cf21 #define ADA_MALLOC malloc}\par
00075 {\cf21 #endif }{\cf20 /*ADA_MALLOC*/}{\cf21 }\par
00076 \par
00084 {\cf21 #ifndef ADA_REALLOC}\par
00085 {\cf21 #define ADA_REALLOC realloc}\par
00086 {\cf21 #endif }{\cf20 /*ADA_REALLOC*/}{\cf21 }\par
00087 \par
00095 {\cf21 #ifndef ADA_ASSERT}\par
00096 {\cf21 #define ADA_ASSERT assert}\par
00097 {\cf21 #endif }{\cf20 /*ADA_ASSERT*/}{\cf21 }\par
00098 \par
00099 {\cf20 /* typedef struct \{}\par
00100 {\cf20     size_t length;}\par
00101 {\cf20     size_t capacity;}\par
00102 {\cf20     int* elements;}\par
00103 {\cf20 \} ada_int_array; */}\par
00104 \par
00120 {\cf21 #define ada_init_array(type, header) do \{                                       \\}\par
00121 {\cf21         header.capacity = ADA_INIT_CAPACITY;                                        \\}\par
00122 {\cf21         header.length = 0;                                                      \\}\par
00123 {\cf21         header.elements = (type *)ADA_MALLOC(sizeof(type) * header.capacity);   \\}\par
00124 {\cf21         ADA_ASSERT(header.elements != NULL);                                    \\}\par
00125 {\cf21     \} while (0)}\par
00126 \par
00143 {\cf21 #define ada_resize(type, header, new_capacity) do \{                                                         \\}\par
00144 {\cf21         type *ada_temp_pointer = (type *)ADA_REALLOC((void *)(header.elements), new_capacity*sizeof(type)); \\}\par
00145 {\cf21         if (ada_temp_pointer == NULL) \{                                                                     \\}\par
00146 {\cf21             exit(1);                                                                                        \\}\par
00147 {\cf21         \}                                                                                                   \\}\par
00148 {\cf21         header.elements = ada_temp_pointer;                                                                 \\}\par
00149 {\cf21         ADA_ASSERT(header.elements != NULL);                                                                \\}\par
00150 {\cf21         header.capacity = new_capacity;                                                                     \\}\par
00151 {\cf21     \} while (0)}\par
00152 \par
00169 {\cf21 #define ada_appand(type, header, value) do \{                        \\}\par
00170 {\cf21         if (header.length >= header.capacity) \{                     \\}\par
00171 {\cf21             ada_resize(type, header, (int)(header.capacity*1.5));   \\}\par
00172 {\cf21         \}                                                           \\}\par
00173 {\cf21         header.elements[header.length] = value;                     \\}\par
00174 {\cf21         header.length++;                                            \\}\par
00175 {\cf21     \} while (0)}\par
00176 \par
00196 {\cf21 #define ada_insert(type, header, value, index) do \{                                                         \\}\par
00197 {\cf21     ADA_ASSERT((int)(index) >= 0);                                                                          \\}\par
00198 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);                                                         \\}\par
00199 {\cf21     ada_appand(type, header, header.elements[header.length-1]);                                             \\}\par
00200 {\cf21     for (size_t ada_for_loop_index = header.length-2; ada_for_loop_index > (index); ada_for_loop_index--) \{ \\}\par
00201 {\cf21         header.elements[ada_for_loop_index] = header.elements [ada_for_loop_index-1];                       \\}\par
00202 {\cf21     \}                                                                                                       \\}\par
00203 {\cf21     header.elements[(index)] = value;                                                                       \\}\par
00204 {\cf21 \} while (0)}\par
00205 \par
00206 \par
00222 {\cf21 #define ada_insert_unordered(type, header, value, index) do \{   \\}\par
00223 {\cf21     ADA_ASSERT((int)(index) >= 0);                              \\}\par
00224 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);             \\}\par
00225 {\cf21     if ((size_t)(index) == header.length) \{                     \\}\par
00226 {\cf21         ada_appand(type, header, value);                        \\}\par
00227 {\cf21     \} else \{                                                    \\}\par
00228 {\cf21         ada_appand(type, header, header.elements[(index)]);     \\}\par
00229 {\cf21         header.elements[(index)] = value;                       \\}\par
00230 {\cf21     \}                                                           \\}\par
00231 {\cf21 \} while (0)}\par
00232 \par
00246 {\cf21 #define ada_remove(type, header, index) do \{                                                                \\}\par
00247 {\cf21     ADA_ASSERT((int)(index) >= 0);                                                                          \\}\par
00248 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);                                                         \\}\par
00249 {\cf21     for (size_t ada_for_loop_index = (index); ada_for_loop_index < header.length-1; ada_for_loop_index++) \{ \\}\par
00250 {\cf21         header.elements[ada_for_loop_index] = header.elements[ada_for_loop_index+1];                        \\}\par
00251 {\cf21     \}                                                                                                       \\}\par
00252 {\cf21     header.length--;                                                                                        \\}\par
00253 {\cf21 \} while (0)}\par
00254 \par
00267 {\cf21 #define ada_remove_unordered(type, header, index) do \{          \\}\par
00268 {\cf21     ADA_ASSERT((int)(index) >= 0);                              \\}\par
00269 {\cf21     ADA_ASSERT((float)(index) - (int)(index) == 0);             \\}\par
00270 {\cf21     header.elements[index] = header.elements[header.length-1];  \\}\par
00271 {\cf21     header.length--;                                            \\}\par
00272 {\cf21 \} while (0)}\par
00273 \par
00274 \par
00275 {\cf21 #endif }{\cf20 /*ALMOG_DYNAMIC_ARRAY_H_*/}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/include/Almog_Engine.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_Engine.h}
{\xe \v src/include/Almog_Engine.h}
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Software 3D rendering and scene utilities for meshes, camera, and projection. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "./Almog_Dynamic_Array.h"}\par
{\f2 #include "./Matrix2D.h"}\par
{\f2 #include "./Almog_Draw_Library.h"}\par
{\f2 #include "./Almog_String_Manipulation.h"}\par
{\f2 #include <assert.h>}\par
{\f2 #include <math.h>}\par
{\f2 #include <stdbool.h>}\par
{\f2 #include <float.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <errno.h>}\par
{\f2 #include <string.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Almog_Engine.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Engine_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__Engine_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Tri_mesh_array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Quad_mesh_array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Camera}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Light_source}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Material}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Scene}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AE_ASSERT}\~ assert\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STL_HEADER_SIZE}\~ 80\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STL_NUM_SIZE}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STL_SIZE_FOREACH_TRI}\~ 50\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STL_ATTRIBUTE_BITS_SIZE}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGB_hexARGB}(a,  r,  g,  b)\~ 0x01000000l*(uint8_t)(a) + 0x00010000*(uint8_t)(r) + 0x00000100*(uint8_t)(g) + 0x00000001*(uint8_t)(b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AE_MAX_POINT_VAL}\~ 1e5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_assert_point_is_valid}(p)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_assert_tri_is_valid}(tri)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_assert_quad_is_valid}(quad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_point_normalize_xyz_norma}(p,  norma)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_point_calc_norma}(p)\~ sqrt(((p).x * (p).x) + ((p).y * (p).y) + ((p).z * (p).z))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_point_add_point}(p,  p1,  p2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_point_sub_point}(p,  p1,  p2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_point_dot_point}(p1,  p2)\~ (((p1).x * (p2).x) + ((p1).y * (p2).y) + ((p1).z * (p2).z))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_point_mult}(p,  const)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ae_points_equal}(p1,  p2)\~ (p1).x == (p2).x && (p1).y == (p2).y && (p1).z == (p2).z\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TRI_MESH_ARRAY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b QUAD_MESH_ARRAY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AE_PRINT_TRI}(tri)\~ {\b ae_print_tri}(tri, #tri, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AE_PRINT_MESH}(mesh)\~ {\b ae_print_tri_mesh}(mesh, #mesh, 0)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Lighting_mode} \{ {\b AE_LIGHTING_FLAT}
, {\b AE_LIGHTING_SMOOTH}
, {\b AE_LIGHTING_MODE_LENGTH}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri} {\b ae_tri_create} ({\b Point} p1, {\b Point} p2, {\b Point} p3)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a triangle from three points. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_create_copy} ({\b Tri_mesh} *des, {\b Tri} *src_elements, size_t len)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append copies of triangles to a destination {\b Tri_mesh} (resets destination length first). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_camera_init} ({\b Scene} *scene, int window_h, int window_w)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the camera part of a {\b Scene}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_camera_free} ({\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free camera-related allocations in a {\b Scene}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Scene} {\b ae_scene_init} (int window_h, int window_w)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create and initialize a {\b Scene}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_scene_free} ({\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free all resources owned by a {\b Scene}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_camera_reset_pos} ({\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reset camera orientation and position to initial state. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_point_to_mat2D} ({\b Point} p, {\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Write a {\b Point} into a {\b Mat2D} vector. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_mat2D_to_point} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read a 3x1 {\b Mat2D} vector into a {\b Point}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh} {\b ae_tri_mesh_get_from_obj_file} (char *file_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load a triangle mesh from a Wavefront OBJ file. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh} {\b ae_tri_mesh_get_from_stl_file} (char *file_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load a triangle mesh from a binary STL file. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh} {\b ae_tri_mesh_get_from_file} (char *file_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load a triangle mesh from a file (OBJ or STL). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_appand_copy} ({\b Tri_mesh_array} *mesh_array, {\b Tri_mesh} mesh)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append a copy of a {\b Tri_mesh} into a {\b Tri_mesh_array}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh} {\b ae_tri_mesh_get_from_quad_mesh} ({\b Quad_mesh} q_mesh)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a {\b Quad_mesh} into a {\b Tri_mesh}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_print_points} ({\b Curve} p)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a list of points to stdout. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_print_tri} ({\b Tri} tri, char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a triangle to stdout. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_print_tri_mesh} ({\b Tri_mesh} mesh, char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print all triangles in a mesh to stdout. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_point_normalize_xyz} ({\b Point} p)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normalize a point's xyz to unit length. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_set_normals} ({\b Tri} *tri)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute and set per-vertex normals for a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_tri_get_average_normal} ({\b Tri} tri)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the three vertex normals of a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_tri_get_average_point} ({\b Tri} tri)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the three vertices of a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_calc_normal} ({\b Mat2D} normal, {\b Tri} tri)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the face normal of a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_translate} ({\b Tri_mesh} mesh, float x, float y, float z)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Translate a triangle mesh by (x, y, z). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_rotate_Euler_xyz} ({\b Tri_mesh} mesh, float phi_deg, float theta_deg, float psi_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rotate a triangle mesh using XYZ Euler angles (degrees). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_set_bounding_box} ({\b Tri_mesh} mesh, float *x_min, float *x_max, float *y_min, float *y_max, float *z_min, float *z_max)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the axis-aligned bounding box of a triangle mesh. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_normalize} ({\b Tri_mesh} mesh)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normalize mesh coordinates to [-1, 1], centered at origin. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_flip_normals} ({\b Tri_mesh} mesh)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Flip triangle winding and recompute per-vertex normals. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_set_normals} ({\b Tri_mesh} mesh)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Recompute per-vertex normals for all triangles in a mesh. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_quad_set_normals} ({\b Quad} *quad)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute and set per-vertex normals for a quad. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_quad_get_average_normal} ({\b Quad} quad)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the four vertex normals of a quad. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_quad_get_average_point} ({\b Quad} quad)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the four vertices of a quad. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_quad_calc_normal} ({\b Mat2D} normal, {\b Quad} quad)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the face normal of a quad using the first three vertices. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_curve_copy} ({\b Curve} *des, {\b Curve} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a {\b Curve} (ADA array of points). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_calc_light_intensity} ({\b Tri} *tri, {\b Scene} *scene, {\b Lighting_mode} lighting_mode)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute per-vertex lighting intensity for a triangle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_quad_calc_light_intensity} ({\b Quad} *quad, {\b Scene} *scene, {\b Lighting_mode} lighting_mode)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute per-vertex lighting intensity for a quad. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_line_itersect_plane} ({\b Mat2D} plane_p, {\b Mat2D} plane_n, {\b Mat2D} line_start, {\b Mat2D} line_end, float *t)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Intersect a line segment with a plane. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b ae_line_clip_with_plane} ({\b Point} start_in, {\b Point} end_in, {\b Mat2D} plane_p, {\b Mat2D} plane_n, {\b Point} *start_out, {\b Point} *end_out)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clip a line segment against a plane. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b ae_signed_dist_point_and_plane} ({\b Point} p, {\b Mat2D} plane_p, {\b Mat2D} plane_n)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Signed distance from a point to a plane. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b ae_tri_clip_with_plane} ({\b Tri} tri_in, {\b Mat2D} plane_p, {\b Mat2D} plane_n, {\b Tri} *tri_out1, {\b Tri} *tri_out2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clip a triangle against a plane. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b ae_quad_clip_with_plane} ({\b Quad} quad_in, {\b Mat2D} plane_p, {\b Mat2D} plane_n, {\b Quad} *quad_out1, {\b Quad} *quad_out2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clip a quad against a plane. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_projection_mat_set} ({\b Mat2D} proj_mat, float aspect_ratio, float FOV_deg, float z_near, float z_far)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a perspective projection matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_view_mat_set} ({\b Mat2D} view_mat, {\b Camera} camera, {\b Mat2D} up)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a right-handed view matrix from a {\b Camera} and up vector. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_point_project_world2screen} ({\b Mat2D} view_mat, {\b Mat2D} proj_mat, {\b Point} src, int window_w, int window_h)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a point from world space directly to screen space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_point_project_world2view} ({\b Mat2D} view_mat, {\b Point} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transform a point from world space to view space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Point} {\b ae_point_project_view2screen} ({\b Mat2D} proj_mat, {\b Point} src, int window_w, int window_h)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a view-space point to screen space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_line_project_world2screen} ({\b Mat2D} view_mat, {\b Mat2D} proj_mat, {\b Point} start_src, {\b Point} end_src, int window_w, int window_h, {\b Point} *start_des, {\b Point} *end_des, {\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and near-clip a world-space line segment to screen space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri} {\b ae_tri_transform_to_view} ({\b Mat2D} view_mat, {\b Tri} tri)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transform a triangle from world space to view space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Tri_mesh} {\b ae_tri_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Tri} tri, int window_w, int window_h, {\b Scene} *scene, {\b Lighting_mode} lighting_mode)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a single world-space triangle to screen space with clipping. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_mesh_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Tri_mesh} *des, {\b Tri_mesh} src, int window_w, int window_h, {\b Scene} *scene, {\b Lighting_mode} lighting_mode)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a triangle mesh from world to screen space with clipping. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad} {\b ae_quad_transform_to_view} ({\b Mat2D} view_mat, {\b Quad} quad)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transform a quad from world space to view space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Quad_mesh} {\b ae_quad_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Quad} quad, int window_w, int window_h, {\b Scene} *scene, {\b Lighting_mode} lighting_mode)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a single world-space quad to screen space with clipping. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_quad_mesh_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Quad_mesh} *des, {\b Quad_mesh} src, int window_w, int window_h, {\b Scene} *scene, {\b Lighting_mode} lighting_mode)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a quad mesh from world to screen space with clipping. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_curve_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Curve} *des, {\b Curve} src, int window_w, int window_h, {\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and clip a polyline ({\b Curve}) from world to screen space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_curve_ada_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Curve_ada} *des, {\b Curve_ada} src, int window_w, int window_h, {\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and clip an array of polylines from world to screen space. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_grid_project_world2screen} ({\b Mat2D} proj_mat, {\b Mat2D} view_mat, {\b Grid} des, {\b Grid} src, int window_w, int window_h, {\b Scene} *scene)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and clip all polylines in a {\b Grid} from world to screen. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_swap} ({\b Tri} *v, int i, int j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swap two triangles in an array. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b ae_tri_compare} ({\b Tri} t1, {\b Tri} t2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare two triangles for sorting by depth. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_tri_qsort} ({\b Tri} *v, int left, int right)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Quicksort an array of triangles by depth. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b ae_linear_map} (double s, double min_in, double max_in, double min_out, double max_out)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Linearly map a scalar from one range to another. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ae_z_buffer_copy_to_screen} ({\b Mat2D_uint32} screen_mat, {\b Mat2D} inv_z_buffer)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualize an inverse-z buffer by writing a grayscale image. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Software 3D rendering and scene utilities for meshes, camera, and projection. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A small, header-driven 3D engine providing:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Scene} and camera setup (projection/view matrices, Euler navigation).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Triangle and quad mesh loading (OBJ/ASCII+binary STL), normalization, transforms, and per-vertex/face normals.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Back-face culling, near-plane and screen-space polygon clipping.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Perspective projection (world->view->screen) and line/grid helpers.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Basic Phong-like lighting (ambient, diffuse, specular) with flat/smooth modes.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Simple z-buffer visualization utility.\par}
\par
Inspiration This code is heavily inspired by the 3D engine of 'OneLoneCoder' in C++. You can find the source code in: {\f2 https://github.com/OneLoneCoder/Javidx9/tree/master/ConsoleGameEngine/BiggerProjects/Engine3D} . featured in this video of his: {\f2 https://youtu.be/ih20l3pJoeU?si=CzQ8rjk5ZEOlqEHN}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
- Depends on {\b Almog_Dynamic_Array.h}, {\b Matrix2D.h}, {\b Almog_Draw_Library.h}, and {\b Almog_String_Manipulation.h} for math, containers, and I/O utilities. \par
- All public functions are prefixed with 'ae_'. \par
- Define ALMOG_ENGINE_IMPLEMENTATION in exactly one translation unit to compile the function bodies. \par
}}}{
Definition in file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v AE_ASSERT\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AE_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_assert_point_is_valid\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_assert_point_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_assert_point_is_valid( p)}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         AE_ASSERT(isfinite((p).x) && isfinite((p).y) && isfinite((p).z) && isfinite((p).w));    \\\par
        AE_ASSERT((p).x > -AE_MAX_POINT_VAL && (p).x < AE_MAX_POINT_VAL);                                                                  \\\par
        AE_ASSERT((p).y > -AE_MAX_POINT_VAL && (p).y < AE_MAX_POINT_VAL);                                                                  \\\par
        AE_ASSERT((p).z > -AE_MAX_POINT_VAL && (p).z < AE_MAX_POINT_VAL);                                                                  \\\par
        AE_ASSERT((p).w > -AE_MAX_POINT_VAL && (p).w < AE_MAX_POINT_VAL);\par
}
{
Definition at line {\b 89} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_assert_quad_is_valid\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_assert_quad_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_assert_quad_is_valid( quad)}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         ae_assert_point_is_valid((quad).points[0]);   \\\par
        ae_assert_point_is_valid((quad).points[1]);                                 \\\par
        ae_assert_point_is_valid((quad).points[2]);                                 \\\par
        ae_assert_point_is_valid((quad).points[3])\par
}
{
Definition at line {\b 97} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_assert_tri_is_valid\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_assert_tri_is_valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_assert_tri_is_valid( tri)}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         ae_assert_point_is_valid((tri).points[0]);  \\\par
        ae_assert_point_is_valid((tri).points[1]);                              \\\par
        ae_assert_point_is_valid((tri).points[2])\par
}
{
Definition at line {\b 94} of file {\b Almog_Engine.h}.}\par
}
{\xe \v AE_MAX_POINT_VAL\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_MAX_POINT_VAL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AE_MAX_POINT_VAL\~ 1e5}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 88} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_point_add_point\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_add_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_point_add_point( p,  p1,  p2)}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         (p).x = (p1).x + (p2).x;  \\\par
        (p).y = (p1).y + (p2).y;                                \\\par
        (p).z = (p1).z + (p2).z;                                \\\par
        (p).w = (p1).w + (p2).w\par
}
{
Definition at line {\b 105} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_point_calc_norma\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_calc_norma}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_point_calc_norma( p)\~ sqrt(((p).x * (p).x) + ((p).y * (p).y) + ((p).z * (p).z))}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 104} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_point_dot_point\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_dot_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_point_dot_point( p1,  p2)\~ (((p1).x * (p2).x) + ((p1).y * (p2).y) + ((p1).z * (p2).z))}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_point_mult\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_mult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_point_mult( p,  const)}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         (p).x *= {\cf17 const}; \\\par
        (p).y *= {\cf17 const};                         \\\par
        (p).z *= const\par
}
{
Definition at line {\b 114} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_point_normalize_xyz_norma\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_normalize_xyz_norma}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_point_normalize_xyz_norma( p,  norma)}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         (p).x = (p).x / norma;  \\\par
        (p).y = (p).y / norma;                        \\\par
        (p).z = (p).z / norma\par
}
{
Definition at line {\b 101} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_point_sub_point\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_sub_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_point_sub_point( p,  p1,  p2)}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         (p).x = (p1).x - (p2).x;  \\\par
        (p).y = (p1).y - (p2).y;                                \\\par
        (p).z = (p1).z - (p2).z;                                \\\par
        (p).w = (p1).w - (p2).w\par
}
{
Definition at line {\b 109} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ae_points_equal\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_points_equal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ae_points_equal( p1,  p2)\~ (p1).x == (p2).x && (p1).y == (p2).y && (p1).z == (p2).z}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 117} of file {\b Almog_Engine.h}.}\par
}
{\xe \v AE_PRINT_MESH\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_PRINT_MESH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AE_PRINT_MESH( mesh)\~ {\b ae_print_tri_mesh}(mesh, #mesh, 0)}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 267} of file {\b Almog_Engine.h}.}\par
}
{\xe \v AE_PRINT_TRI\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_PRINT_TRI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AE_PRINT_TRI( tri)\~ {\b ae_print_tri}(tri, #tri, 0)}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 266} of file {\b Almog_Engine.h}.}\par
}
{\xe \v ARGB_hexARGB\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ARGB_hexARGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGB_hexARGB( a,  r,  g,  b)\~ 0x01000000l*(uint8_t)(a) + 0x00010000*(uint8_t)(r) + 0x00000100*(uint8_t)(g) + 0x00000001*(uint8_t)(b)}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 83} of file {\b Almog_Engine.h}.}\par
}
{\xe \v QUAD_MESH_ARRAY\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:QUAD_MESH_ARRAY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define QUAD_MESH_ARRAY}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 136} of file {\b Almog_Engine.h}.}\par
}
{\xe \v STL_ATTRIBUTE_BITS_SIZE\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:STL_ATTRIBUTE_BITS_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STL_ATTRIBUTE_BITS_SIZE\~ 2}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 71} of file {\b Almog_Engine.h}.}\par
}
{\xe \v STL_HEADER_SIZE\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:STL_HEADER_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STL_HEADER_SIZE\~ 80}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b Almog_Engine.h}.}\par
}
{\xe \v STL_NUM_SIZE\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:STL_NUM_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STL_NUM_SIZE\~ 4}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b Almog_Engine.h}.}\par
}
{\xe \v STL_SIZE_FOREACH_TRI\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:STL_SIZE_FOREACH_TRI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STL_SIZE_FOREACH_TRI\~ 50}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 67} of file {\b Almog_Engine.h}.}\par
}
{\xe \v TRI_MESH_ARRAY\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:TRI_MESH_ARRAY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TRI_MESH_ARRAY}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 127} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Lighting_mode\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:Lighting_mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b Lighting_mode}}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v AE_LIGHTING_FLAT\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_LIGHTING_FLAT}
{\qr AE_LIGHTING_FLAT{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v AE_LIGHTING_SMOOTH\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_LIGHTING_SMOOTH}
{\qr AE_LIGHTING_SMOOTH{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
\cell }{\cell }{\row }
{\xe \v AE_LIGHTING_MODE_LENGTH\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:AE_LIGHTING_MODE_LENGTH}
{\qr AE_LIGHTING_MODE_LENGTH{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
\cell }{\cell }{\row }
}
\par
{
Definition at line {\b 120} of file {\b Almog_Engine.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v ae_camera_free\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_camera_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_camera_free ({\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free camera-related allocations in a {\b Scene}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Frees all {\b Mat2D} objects owned by scene->camera (init_position, current_position, offset_position, direction, camera_x/y/z).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} whose camera resources will be freed. \cell }
{\row }
}
}{
Definition at line {\b 366} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Scene::camera}, {\b Camera::camera_x}, {\b Camera::camera_y}, {\b Camera::camera_z}, {\b Camera::current_position}, {\b Camera::direction}, {\b Camera::init_position}, {\b mat2D_free()}, and {\b Camera::offset_position}.}\par
{
\ql
Referenced by {\b ae_scene_free()}.}\par
}
{\xe \v ae_camera_init\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_camera_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_camera_init ({\b Scene} *  {\i scene}, int  {\i window_h}, int  {\i window_w})}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the camera part of a {\b Scene}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets perspective parameters (z_near, z_far, fov, aspect_ratio), allocates camera matrices/vectors, and sets initial position and orientation. The aspect ratio is computed as window_h / window_w.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} whose camera will be initialized. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Window height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Window width in pixels. \cell }
{\row }
}
}{
Definition at line {\b 320} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Camera::aspect_ratio}, {\b Scene::camera}, {\b Camera::camera_x}, {\b Camera::camera_y}, {\b Camera::camera_z}, {\b Camera::current_position}, {\b Camera::direction}, {\b Camera::fov_deg}, {\b Camera::init_position}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_fill()}, {\b Camera::offset_position}, {\b Camera::pitch_offset_deg}, {\b Camera::roll_offset_deg}, {\b Camera::yaw_offset_deg}, {\b Camera::z_far}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b ae_scene_init()}.}\par
}
{\xe \v ae_camera_reset_pos\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_camera_reset_pos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_camera_reset_pos ({\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reset camera orientation and position to initial state. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resets roll/pitch/yaw to zero, clears offset_position, restores camera basis vectors to identity, and copies current_position from init_position.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} containing the camera to reset. \cell }
{\row }
}
}{
Definition at line {\b 472} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Scene::camera}, {\b Camera::camera_x}, {\b Camera::camera_y}, {\b Camera::camera_z}, {\b Camera::current_position}, {\b Camera::init_position}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_fill()}, {\b Camera::offset_position}, {\b Camera::pitch_offset_deg}, {\b Camera::roll_offset_deg}, and {\b Camera::yaw_offset_deg}.}\par
{
\ql
Referenced by {\b process_input_window()}.}\par
}
{\xe \v ae_curve_ada_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_curve_ada_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_curve_ada_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Curve_ada} *  {\i des}, {\b Curve_ada}  {\i src}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and clip an array of polylines from world to screen space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies ae_curve_project_world2screen to each element in src and writes into the corresponding element in des. Arrays must be the same length.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Output array of curves (each overwritten). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input array of world-space curves. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera for near plane). \cell }
{\row }
}
}{
Definition at line {\b 3670} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_curve_project_world2screen()}, {\b Curve_ada::elements}, and {\b Curve_ada::length}.}\par
}
{\xe \v ae_curve_copy\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_curve_copy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_curve_copy ({\b Curve} *  {\i des}, {\b Curve}  {\i src})}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a {\b Curve} (ADA array of points). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clears destination length and appends all points from src.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination curve (modified/grown as needed). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source curve. \cell }
{\row }
}
}{
Definition at line {\b 1461} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b Curve::elements}, and {\b Curve::length}.}\par
{
\ql
Referenced by {\b ae_curve_project_world2screen()}.}\par
}
{\xe \v ae_curve_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_curve_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_curve_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Curve} *  {\i des}, {\b Curve}  {\i src}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and clip a polyline ({\b Curve}) from world to screen space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Projects each segment with near-plane clipping and screen-edge clipping. Segments fully outside are removed. The destination curve is overwritten.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This solution is not prefect. It sometimes delete one more edge then necessary, but I think that it won't brake.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Output curve (overwritten; ADA array grown as needed). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input world-space curve. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera for near plane). \cell }
{\row }
}
}{
Definition at line {\b 3558} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_remove}, {\b ae_curve_copy()}, {\b ae_line_clip_with_plane()}, {\b ae_line_project_world2screen()}, {\b ae_points_equal}, {\b Curve::elements}, {\b Curve::length}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, and {\b mat2D_free()}.}\par
{
\ql
Referenced by {\b ae_curve_ada_project_world2screen()}, and {\b ae_grid_project_world2screen()}.}\par
}
{\xe \v ae_grid_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_grid_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_grid_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Grid}  {\i des}, {\b Grid}  {\i src}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and clip all polylines in a {\b Grid} from world to screen. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies ae_curve_project_world2screen to each curve in the grid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Output grid (curves overwritten). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input world-space grid. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera for near plane). \cell }
{\row }
}
}{
Definition at line {\b 3691} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_curve_project_world2screen()}, {\b Grid::curves}, {\b Curve_ada::elements}, and {\b Curve_ada::length}.}\par
{
\ql
Referenced by {\b update()}.}\par
}
{\xe \v ae_line_clip_with_plane\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_line_clip_with_plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ae_line_clip_with_plane ({\b Point}  {\i start_in}, {\b Point}  {\i end_in}, {\b Mat2D}  {\i plane_p}, {\b Mat2D}  {\i plane_n}, {\b Point} *  {\i start_out}, {\b Point} *  {\i end_out})}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clip a line segment against a plane. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the portion of the line segment [start_in, end_in] that lies on or inside the plane (signed distance >= 0). plane_n is normalized inside the function.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start_in} \cell }{Input start point (world or view space). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i end_in} \cell }{Input end point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_p} \cell }{Plane reference point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_n} \cell }{Plane normal (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start_out} \cell }{Output clipped start point (if visible). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i end_out} \cell }{Output clipped end point (if visible). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int 0 if fully outside, 1 if fully or partially inside (outputs are valid), -1 on error. \par
}}}{
Definition at line {\b 1720} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_point_is_valid}, {\b ae_line_itersect_plane()}, {\b ae_point_to_mat2D()}, {\b ae_signed_dist_point_and_plane()}, {\b mat2D_alloc()}, {\b mat2D_free()}, and {\b mat2D_normalize}.}\par
{
\ql
Referenced by {\b ae_curve_project_world2screen()}, and {\b ae_line_project_world2screen()}.}\par
}
{\xe \v ae_line_itersect_plane\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_line_itersect_plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_line_itersect_plane ({\b Mat2D}  {\i plane_p}, {\b Mat2D}  {\i plane_n}, {\b Mat2D}  {\i line_start}, {\b Mat2D}  {\i line_end}, float *  {\i t})}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Intersect a line segment with a plane. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes intersection of segment [line_start, line_end] with the plane defined by point plane_p and normal plane_n. plane_n is normalized inside the function. The parameter t in [0, 1] is returned via out-parameter.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The {\b Mat2D} objects line_start and line_end are temporarily modified internally; pass copies if you must preserve their values.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_p} \cell }{Plane reference point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_n} \cell }{Plane normal (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i line_start} \cell }{Segment start point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i line_end} \cell }{Segment end point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i t} \cell }{Output parametric distance along the segment (0=start, 1=end). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} Intersection point in 3D. \par
}}}{
Definition at line {\b 1680} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_mat2D_to_point()}, {\b mat2D_add()}, {\b mat2D_alloc()}, {\b mat2D_dot_product()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_mult()}, {\b mat2D_normalize}, and {\b mat2D_sub()}.}\par
{
\ql
Referenced by {\b ae_line_clip_with_plane()}, {\b ae_quad_clip_with_plane()}, and {\b ae_tri_clip_with_plane()}.}\par
}
{\xe \v ae_line_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_line_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_line_project_world2screen ({\b Mat2D}  {\i view_mat}, {\b Mat2D}  {\i proj_mat}, {\b Point}  {\i start_src}, {\b Point}  {\i end_src}, int  {\i window_w}, int  {\i window_h}, {\b Point} *  {\i start_des}, {\b Point} *  {\i end_des}, {\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project and near-clip a world-space line segment to screen space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transforms the segment to view space, clips it against the near plane at z = z_near + 0.01, then projects to screen space. If fully clipped, both outputs are set to the sentinel (-1, -1, 1, 1).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start_src} \cell }{World-space start point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i end_src} \cell }{World-space end point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start_des} \cell }{Output screen-space start point (or sentinel). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i end_des} \cell }{Output screen-space end point (or sentinel). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (used for near plane distance). \cell }
{\row }
}
}{
Definition at line {\b 2933} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_line_clip_with_plane()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b Scene::camera}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, {\b mat2D_free()}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b ae_curve_project_world2screen()}.}\par
}
{\xe \v ae_linear_map\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_linear_map}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double ae_linear_map (double  {\i s}, double  {\i min_in}, double  {\i max_in}, double  {\i min_out}, double  {\i max_out})}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Linearly map a scalar from one range to another. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes min_out + (s - min_in) * (max_out - min_out) / (max_in - min_in).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s} \cell }{Input scalar. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_in} \cell }{Input range minimum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_in} \cell }{Input range maximum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min_out} \cell }{Output range minimum. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i max_out} \cell }{Output range maximum. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
double Mapped scalar. \par
}}}{
Definition at line {\b 3770} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_z_buffer_copy_to_screen()}.}\par
}
{\xe \v ae_mat2D_to_point\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_mat2D_to_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_mat2D_to_point ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read a 3x1 {\b Mat2D} vector into a {\b Point}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads x, y, z from m(0..2,0) and returns a {\b Point} with w=1.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Source matrix (3x1). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} The corresponding point with w=1. \par
}}}{
Definition at line {\b 522} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b MAT2D_AT}, and {\b Point::x}.}\par
{
\ql
Referenced by {\b ae_line_itersect_plane()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_set_normals()}, {\b ae_tri_calc_light_intensity()}, and {\b ae_tri_set_normals()}.}\par
}
{\xe \v ae_point_normalize_xyz\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_normalize_xyz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_point_normalize_xyz ({\b Point}  {\i p})}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normalize a point's xyz to unit length. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Divides x, y, z by their Euclidean norm. w is preserved unchanged.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Input point. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} Unit-length point (xyz), with original w. \par
}}}{
Definition at line {\b 976} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_point_calc_norma}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, {\b ae_quad_get_average_normal()}, {\b ae_scene_init()}, {\b ae_tri_calc_light_intensity()}, and {\b ae_tri_get_average_normal()}.}\par
}
{\xe \v ae_point_project_view2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_project_view2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_point_project_view2screen ({\b Mat2D}  {\i proj_mat}, {\b Point}  {\i src}, int  {\i window_w}, int  {\i window_h})}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a view-space point to screen space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies the projection matrix, performs perspective divide if |w| > 1e-3, maps normalized device coords to pixel coordinates: x_screen = (x_ndc + 1) * 0.5 * window_w y_screen = (y_ndc + 1) * 0.5 * window_h\par
z is z_ndc, w is the clip-space w (or 1 if the original w ~ 0).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{View-space point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} Screen-space point. \par
}}}{
Definition at line {\b 2870} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_point_is_valid}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_line_project_world2screen()}, {\b ae_point_project_world2screen()}, {\b ae_quad_project_world2screen()}, and {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v ae_point_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_point_project_world2screen ({\b Mat2D}  {\i view_mat}, {\b Mat2D}  {\i proj_mat}, {\b Point}  {\i src}, int  {\i window_w}, int  {\i window_h})}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a point from world space directly to screen space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Combines ae_point_project_world2view and ae_point_project_view2screen.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{World-space point. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} Screen-space point (x,y in pixels). z is post-projection z/w, w is clip-space w. \par
}}}{
Definition at line {\b 2806} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_point_project_view2screen()}, and {\b ae_point_project_world2view()}.}\par
}
{\xe \v ae_point_project_world2view\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_project_world2view}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_point_project_world2view ({\b Mat2D}  {\i view_mat}, {\b Point}  {\i src})}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transform a point from world space to view space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplies [x y z 1] by view_mat (row-vector convention in this code). Returns the resulting view-space point; w should be 1.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{World-space point. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} View-space point (w=1). \par
}}}{
Definition at line {\b 2824} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_ASSERT}, {\b ae_assert_point_is_valid}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_line_project_world2screen()}, and {\b ae_point_project_world2screen()}.}\par
}
{\xe \v ae_point_to_mat2D\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_point_to_mat2D}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_point_to_mat2D ({\b Point}  {\i p}, {\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Write a {\b Point} into a {\b Mat2D} vector. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes p into m. m must be either 3x1 or 1x3. Only x, y, z are written.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Source point (x, y, z used; w ignored). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Destination matrix (3x1 or 1x3). \cell }
{\row }
}
}{
Definition at line {\b 498} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, {\b Mat2D::rows}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_line_clip_with_plane()}, {\b ae_quad_calc_normal()}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_set_normals()}, {\b ae_tri_calc_normal()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_project_world2screen()}, and {\b ae_tri_set_normals()}.}\par
}
{\xe \v ae_print_points\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_print_points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_print_points ({\b Curve}  {\i p})}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a list of points to stdout. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Each point is printed as: "point i: (x, y, z)".\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{{\b Curve} of points to print. \cell }
{\row }
}
}{
Definition at line {\b 925} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Curve::elements}, {\b Curve::length}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
}
{\xe \v ae_print_tri\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_print_tri}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_print_tri ({\b Tri}  {\i tri}, char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a triangle to stdout. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prints the triangle's vertices and draw flag, with an optional name and indentation padding (spaces).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print before the triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Number of leading spaces for indentation. \cell }
{\row }
}
}{
Definition at line {\b 942} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Tri::points}, {\b Tri::to_draw}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_print_tri_mesh()}.}\par
}
{\xe \v ae_print_tri_mesh\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_print_tri_mesh}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_print_tri_mesh ({\b Tri_mesh}  {\i mesh}, char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print all triangles in a mesh to stdout. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Each triangle is printed via ae_print_tri with the given padding.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label for the mesh. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Number of leading spaces for indentation. \cell }
{\row }
}
}{
Definition at line {\b 958} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_print_tri()}, {\b Tri_mesh::elements}, and {\b Tri_mesh::length}.}\par
}
{\xe \v ae_projection_mat_set\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_projection_mat_set}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_projection_mat_set ({\b Mat2D}  {\i proj_mat}, float  {\i aspect_ratio}, float  {\i FOV_deg}, float  {\i z_near}, float  {\i z_far})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a perspective projection matrix. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
proj_mat must be 4x4. FOV is in degrees. The matrix maps view-space to clip space consistent with the engine's pipeline; z is mapped using z_far/(z_far - z_near).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Output 4x4 projection matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aspect_ratio} \cell }{aspect = window_h / window_w. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i FOV_deg} \cell }{Vertical field of view in degrees (must be > 0). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i z_near} \cell }{Near clipping plane distance (> 0). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i z_far} \cell }{Far clipping plane distance (> z_near). \cell }
{\row }
}
}{
Definition at line {\b 2682} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_ASSERT}, {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_fill()}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_scene_init()}, and {\b update()}.}\par
}
{\xe \v ae_quad_calc_light_intensity\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_calc_light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_quad_calc_light_intensity ({\b Quad} *  {\i quad}, {\b Scene} *  {\i scene}, {\b Lighting_mode}  {\i lighting_mode})}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute per-vertex lighting intensity for a quad. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Same model as ae_tri_calc_light_intensity, applied to four vertices. Results are clamped to [0, 1].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} to update (quad->light_intensity[i] is written). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} providing light and material parameters. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lighting_mode} \cell }{Flat or smooth lighting mode. \cell }
{\row }
}
}{
Definition at line {\b 1580} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_LIGHTING_FLAT}, {\b AE_LIGHTING_SMOOTH}, {\b ae_mat2D_to_point()}, {\b ae_point_add_point}, {\b ae_point_dot_point}, {\b ae_point_mult}, {\b ae_point_normalize_xyz()}, {\b ae_point_sub_point}, {\b ae_quad_get_average_normal()}, {\b ae_quad_get_average_point()}, {\b Material::c_ambi}, {\b Material::c_diff}, {\b Material::c_spec}, {\b Scene::camera}, {\b Camera::current_position}, {\b Light_source::light_direction_or_pos}, {\b Quad::light_intensity}, {\b Light_source::light_intensity}, {\b Scene::light_source0}, {\b Scene::material0}, {\b Quad::normals}, {\b Quad::points}, {\b Material::specular_power_alpha}, and {\b Point::w}.}\par
{
\ql
Referenced by {\b ae_quad_project_world2screen()}.}\par
}
{\xe \v ae_quad_calc_normal\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_calc_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_quad_calc_normal ({\b Mat2D}  {\i normal}, {\b Quad}  {\i quad})}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the face normal of a quad using the first three vertices. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
normal must be a 3x1 vector. The function writes the normalized cross product of (p1 - p0) x (p2 - p0) into normal.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i normal} \cell }{Output 3x1 vector for the face normal. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{Input quad. \cell }
{\row }
}
}{
Definition at line {\b 1428} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_ASSERT}, {\b ae_assert_quad_is_valid}, {\b ae_point_to_mat2D()}, {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b mat2D_calc_norma()}, {\b mat2D_cross()}, {\b mat2D_free()}, {\b mat2D_mult()}, {\b mat2D_sub()}, {\b Quad::points}, and {\b Mat2D::rows}.}\par
}
{\xe \v ae_quad_clip_with_plane\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_clip_with_plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ae_quad_clip_with_plane ({\b Quad}  {\i quad_in}, {\b Mat2D}  {\i plane_p}, {\b Mat2D}  {\i plane_n}, {\b Quad} *  {\i quad_out1}, {\b Quad} *  {\i quad_out2})}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clip a quad against a plane. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Splits or discards the quad quad_in against the plane defined by (plane_p, plane_n). plane_n is normalized inside the function.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad_in} \cell }{Input quad. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_p} \cell }{Plane reference point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_n} \cell }{Plane normal (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad_out1} \cell }{First output quad (if any). When output count is 2, this holds one of the resulting polygons (possibly as a quad composed from intersections). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad_out2} \cell }{Second output quad (if split). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Number of output polygons: 0 (culled), 1, or 2. Returns -1 on error. \par
}}}{
Definition at line {\b 2181} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_quad_is_valid}, {\b ae_line_itersect_plane()}, {\b ae_point_to_mat2D()}, {\b ae_signed_dist_point_and_plane()}, {\b Quad::colors}, {\b mat2D_alloc()}, {\b mat2D_free()}, {\b mat2D_normalize}, {\b Quad::points}, and {\b Point::w}.}\par
{
\ql
Referenced by {\b ae_quad_mesh_project_world2screen()}, and {\b ae_quad_project_world2screen()}.}\par
}
{\xe \v ae_quad_get_average_normal\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_get_average_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_quad_get_average_normal ({\b Quad}  {\i quad})}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the four vertex normals of a quad. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Averages the four vertex normals and normalizes the result.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{Input quad. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} The averaged, normalized normal. \par
}}}{
Definition at line {\b 1379} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_point_normalize_xyz()}, {\b Quad::normals}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}, and {\b ae_quad_project_world2screen()}.}\par
}
{\xe \v ae_quad_get_average_point\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_get_average_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_quad_get_average_point ({\b Quad}  {\i quad})}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the four vertices of a quad. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{Input quad. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} The average point (x, y, z, w are simple averages). \par
}}}{
Definition at line {\b 1403} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Quad::points}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_quad_calc_light_intensity()}.}\par
}
{\xe \v ae_quad_mesh_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_mesh_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_quad_mesh_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Quad_mesh} *  {\i des}, {\b Quad_mesh}  {\i src}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene}, {\b Lighting_mode}  {\i lighting_mode})}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a quad mesh from world to screen space with clipping. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterates over all quads, applies near-plane and screen-edge clipping, and writes results into des. Quads can be split by clipping, so des may end up with more elements than src.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Output mesh (cleared and filled; ADA array grown as needed). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input world-space quad mesh. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera/light/material). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lighting_mode} \cell }{Flat or smooth lighting mode. \cell }
{\row }
}
}{
Definition at line {\b 3434} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_insert_unordered}, {\b ada_remove_unordered}, {\b ae_assert_quad_is_valid}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_project_world2screen()}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, and {\b mat2D_free()}.}\par
}
{\xe \v ae_quad_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad_mesh} ae_quad_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Quad}  {\i quad}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene}, {\b Lighting_mode}  {\i lighting_mode})}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a single world-space quad to screen space with clipping. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes lighting and visibility, transforms to view space, clips against near plane, and projects to screen space. A quad may produce one or two quads after clipping.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{World-space quad. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera/light/material). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lighting_mode} \cell }{Flat or smooth lighting mode. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Quad_mesh} An ADA array of resulting screen-space quads. Caller must free result.elements. \par
}}}{
Definition at line {\b 3321} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b ae_assert_quad_is_valid}, {\b ae_point_project_view2screen()}, {\b ae_point_to_mat2D()}, {\b ae_quad_calc_light_intensity()}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_get_average_normal()}, {\b ae_quad_transform_to_view()}, {\b Scene::camera}, {\b Camera::current_position}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, {\b Light_source::light_direction_or_pos}, {\b Quad::light_intensity}, {\b Scene::light_source0}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_sub()}, {\b Quad::normals}, {\b Quad::points}, {\b Quad::to_draw}, {\b Point::x}, {\b Point::y}, {\b Point::z}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b ae_quad_mesh_project_world2screen()}.}\par
}
{\xe \v ae_quad_set_normals\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_set_normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_quad_set_normals ({\b Quad} *  {\i quad})}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute and set per-vertex normals for a quad. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
For each vertex, computes the cross product of adjacent edges and normalizes the result. Results are stored in quad->normals[i].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{{\b Quad} whose normals will be computed and written. \cell }
{\row }
}
}{
Definition at line {\b 1336} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_quad_is_valid}, {\b ae_mat2D_to_point()}, {\b ae_point_to_mat2D()}, {\b mat2D_alloc()}, {\b mat2D_copy()}, {\b mat2D_cross()}, {\b mat2D_free()}, {\b mat2D_normalize}, {\b mat2D_sub()}, {\b Quad::normals}, and {\b Quad::points}.}\par
}
{\xe \v ae_quad_transform_to_view\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_quad_transform_to_view}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Quad} ae_quad_transform_to_view ({\b Mat2D}  {\i view_mat}, {\b Quad}  {\i quad})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transform a quad from world space to view space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies view_mat to each vertex (homogeneous multiply with w=1). Returns the transformed quad; normals are not changed.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quad} \cell }{World-space quad. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Quad} View-space quad. \par
}}}{
Definition at line {\b 3271} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_ASSERT}, {\b ae_assert_quad_is_valid}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b Quad::points}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_quad_project_world2screen()}.}\par
}
{\xe \v ae_scene_free\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_scene_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_scene_free ({\b Scene} *  {\i scene})}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free all resources owned by a {\b Scene}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Frees camera, matrices, and any allocated meshes in the in_world, projected, and original mesh arrays (triangles and quads). Does not free the {\b Scene} struct itself when passed by pointer.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} to free.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Assumes the game_state was initialized with zeros. \par
}}}{
Definition at line {\b 429} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_camera_free()}, {\b Tri_mesh::elements}, {\b Quad_mesh::elements}, {\b Tri_mesh_array::elements}, {\b Quad_mesh_array::elements}, {\b Scene::in_world_quad_meshes}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh_array::length}, {\b Quad_mesh_array::length}, {\b mat2D_free()}, {\b Scene::original_quad_meshes}, {\b Scene::original_tri_meshes}, {\b Scene::proj_mat}, {\b Scene::projected_quad_meshes}, {\b Scene::projected_tri_meshes}, {\b Scene::up_direction}, and {\b Scene::view_mat}.}\par
{
\ql
Referenced by {\b destroy_window()}.}\par
}
{\xe \v ae_scene_init\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_scene_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Scene} ae_scene_init (int  {\i window_h}, int  {\i window_w})}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create and initialize a {\b Scene}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes camera, up direction, default light and material, and allocates projection and view matrices. Caller must release resources with ae_scene_free.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Window height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Window width in pixels. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Scene} An initialized scene object. \par
}}}{
Definition at line {\b 388} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_camera_init()}, {\b ae_point_normalize_xyz()}, {\b ae_projection_mat_set()}, {\b ae_view_mat_set()}, {\b Camera::aspect_ratio}, {\b Material::c_ambi}, {\b Material::c_diff}, {\b Material::c_spec}, {\b Scene::camera}, {\b Camera::fov_deg}, {\b Light_source::light_direction_or_pos}, {\b Light_source::light_intensity}, {\b Scene::light_source0}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, {\b Scene::material0}, {\b Scene::proj_mat}, {\b Material::specular_power_alpha}, {\b Scene::up_direction}, {\b Scene::view_mat}, {\b Point::w}, {\b Point::x}, {\b Point::y}, {\b Point::z}, {\b Camera::z_far}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b setup_window()}.}\par
}
{\xe \v ae_signed_dist_point_and_plane\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_signed_dist_point_and_plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float ae_signed_dist_point_and_plane ({\b Point}  {\i p}, {\b Mat2D}  {\i plane_p}, {\b Mat2D}  {\i plane_n})}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Signed distance from a point to a plane. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes dot(n, p) - dot(n, plane_p). The normal is not normalized internally; pass a normalized plane_n for distances in consistent units.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{{\b Point} to evaluate. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_p} \cell }{Plane reference point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_n} \cell }{Plane normal (3x1). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
float Signed distance (>=0 is on the "inside" of the plane). \par
}}}{
Definition at line {\b 1807} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_point_is_valid}, {\b MAT2D_AT}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_line_clip_with_plane()}, {\b ae_quad_clip_with_plane()}, and {\b ae_tri_clip_with_plane()}.}\par
}
{\xe \v ae_tri_calc_light_intensity\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_calc_light_intensity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_calc_light_intensity ({\b Tri} *  {\i tri}, {\b Scene} *  {\i scene}, {\b Lighting_mode}  {\i lighting_mode})}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute per-vertex lighting intensity for a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Implements a Phong-like model with ambient, diffuse, and specular terms, using material0 and light_source0 from the scene. When lighting_mode is AE_LIGHTING_FLAT, the average normal and triangle centroid are used for all vertices; when AE_LIGHTING_SMOOTH, each vertex normal and position is used. For directional light, light_direction_or_pos.w == 0; for point light, w != 0. Results are clamped to [0, 1].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle to update (tri->light_intensity[i] is written). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} providing light and material parameters. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lighting_mode} \cell }{Flat or smooth lighting mode. \cell }
{\row }
}
}{
Definition at line {\b 1487} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_LIGHTING_FLAT}, {\b AE_LIGHTING_SMOOTH}, {\b ae_mat2D_to_point()}, {\b ae_point_add_point}, {\b ae_point_dot_point}, {\b ae_point_mult}, {\b ae_point_normalize_xyz()}, {\b ae_point_sub_point}, {\b ae_tri_get_average_normal()}, {\b ae_tri_get_average_point()}, {\b Material::c_ambi}, {\b Material::c_diff}, {\b Material::c_spec}, {\b Scene::camera}, {\b Camera::current_position}, {\b Light_source::light_direction_or_pos}, {\b Tri::light_intensity}, {\b Light_source::light_intensity}, {\b Scene::light_source0}, {\b Scene::material0}, {\b Tri::normals}, {\b Tri::points}, {\b Material::specular_power_alpha}, and {\b Point::w}.}\par
{
\ql
Referenced by {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v ae_tri_calc_normal\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_calc_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_calc_normal ({\b Mat2D}  {\i normal}, {\b Tri}  {\i tri})}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the face normal of a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
normal must be a 3x1 vector. The function writes the normalized cross product of (p1 - p0) x (p2 - p0) into normal.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i normal} \cell }{Output 3x1 vector for the face normal. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Input triangle. \cell }
{\row }
}
}{
Definition at line {\b 1086} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_ASSERT}, {\b ae_assert_tri_is_valid}, {\b ae_point_to_mat2D()}, {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b mat2D_calc_norma()}, {\b mat2D_cross()}, {\b mat2D_free()}, {\b mat2D_mult()}, {\b mat2D_sub()}, {\b Tri::points}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v ae_tri_clip_with_plane\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_clip_with_plane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ae_tri_clip_with_plane ({\b Tri}  {\i tri_in}, {\b Mat2D}  {\i plane_p}, {\b Mat2D}  {\i plane_n}, {\b Tri} *  {\i tri_out1}, {\b Tri} *  {\i tri_out2})}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clip a triangle against a plane. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Splits or discards the triangle tri_in against the plane defined by (plane_p, plane_n). plane_n is normalized inside the function.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri_in} \cell }{Input triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_p} \cell }{Plane reference point (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i plane_n} \cell }{Plane normal (3x1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri_out1} \cell }{First output triangle (if any). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri_out2} \cell }{Second output triangle (if split). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Number of output triangles: 0 (culled), 1, or 2. Returns -1 on error. \par
}}}{
Definition at line {\b 1838} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_tri_is_valid}, {\b ae_line_itersect_plane()}, {\b ae_point_to_mat2D()}, {\b ae_signed_dist_point_and_plane()}, {\b Tri::colors}, {\b mat2D_alloc()}, {\b mat2D_free()}, {\b mat2D_normalize}, {\b Tri::points}, {\b Tri::tex_points}, {\b Point::w}, {\b Point::x}, and {\b Point::y}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_project_world2screen()}, and {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v ae_tri_compare\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ae_tri_compare ({\b Tri}  {\i t1}, {\b Tri}  {\i t2})}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare two triangles for sorting by depth. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns true if t1 should come before t2 when sorting by the maximum z of their vertices (descending order).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i t1} \cell }{First triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i t2} \cell }{Second triangle. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool true if t1 precedes t2, false otherwise. \par
}}}{
Definition at line {\b 3725} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Tri::points}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_qsort()}.}\par
}
{\xe \v ae_tri_create\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_create}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri} ae_tri_create ({\b Point}  {\i p1}, {\b Point}  {\i p2}, {\b Point}  {\i p3})}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a triangle from three points. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p1} \cell }{First vertex (world space). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p2} \cell }{Second vertex (world space). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p3} \cell }{Third vertex (world space). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri} The created triangle with vertices set. Other fields are left uninitialized. \par
}}}{
Definition at line {\b 278} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Tri::points}.}\par
}
{\xe \v ae_tri_get_average_normal\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_get_average_normal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_tri_get_average_normal ({\b Tri}  {\i tri})}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the three vertex normals of a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Averages the three vertex normals and normalizes the result.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Input triangle. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} The averaged, normalized normal (w averaged but unused). \par
}}}{
Definition at line {\b 1041} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_point_normalize_xyz()}, {\b Tri::normals}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v ae_tri_get_average_point\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_get_average_point}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Point} ae_tri_get_average_point ({\b Tri}  {\i tri})}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the average of the three vertices of a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Input triangle. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Point} The average point (x, y, z, w are simple averages). \par
}}}{
Definition at line {\b 1062} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Tri::points}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_calc_light_intensity()}.}\par
}
{\xe \v ae_tri_mesh_appand_copy\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_appand_copy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_appand_copy ({\b Tri_mesh_array} *  {\i mesh_array}, {\b Tri_mesh}  {\i mesh})}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append a copy of a {\b Tri_mesh} into a {\b Tri_mesh_array}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a deep copy of mesh (triangles by value) and appends it to mesh_array (ADA array of meshes).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh_array} \cell }{Destination mesh array to append into. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Source triangle mesh to copy. \cell }
{\row }
}
}{
Definition at line {\b 851} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Tri_mesh::elements}, and {\b Tri_mesh::length}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v ae_tri_mesh_create_copy\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_create_copy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_create_copy ({\b Tri_mesh} *  {\i des}, {\b Tri} *  {\i src_elements}, size_t  {\i len})}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Append copies of triangles to a destination {\b Tri_mesh} (resets destination length first). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Appends len triangles from src_elements into the destination ADA array pointed by des.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination triangle mesh (ADA array). Will grow as needed. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_elements} \cell }{Source array of triangles to copy from. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i len} \cell }{Number of triangles to copy from src_elements. \cell }
{\row }
}
}{
Definition at line {\b 299} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, and {\b Tri_mesh::length}.}\par
}
{\xe \v ae_tri_mesh_flip_normals\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_flip_normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_flip_normals ({\b Tri_mesh}  {\i mesh})}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Flip triangle winding and recompute per-vertex normals. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swaps vertex order to invert winding, copies attributes accordingly, and recomputes normals.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Mesh to flip (modified in place). \cell }
{\row }
}
}{
Definition at line {\b 1283} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_tri_set_normals()}, {\b Tri::colors}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::light_intensity}, {\b Tri::normals}, {\b Tri::points}, {\b Tri::tex_points}, and {\b Tri::to_draw}.}\par
}
{\xe \v ae_tri_mesh_get_from_file\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_get_from_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh} ae_tri_mesh_get_from_file (char *  {\i file_path})}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load a triangle mesh from a file (OBJ or STL). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dispatches to ae_tri_mesh_get_from_obj_file or ae_tri_mesh_get_from_stl_file based on file extension.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_path} \cell }{Path to the file (.obj, .stl, .STL). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri_mesh} The loaded triangle mesh. Caller must free mesh.elements when done. \par
}}}{
Definition at line {\b 816} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_tri_mesh_get_from_obj_file()}, {\b ae_tri_mesh_get_from_stl_file()}, {\b asm_get_word_and_cut()}, {\b ASM_MAX_LEN_LINE}, and {\b asm_str_in_str()}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v ae_tri_mesh_get_from_obj_file\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_get_from_obj_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh} ae_tri_mesh_get_from_obj_file (char *  {\i file_path})}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load a triangle mesh from a Wavefront OBJ file. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Supports vertex positions (v). Face lines (f) with 3 or 4 vertices are parsed. Texture coordinates and normals in the file are ignored (a warning is printed once if present). Quads are triangulated as (0,1,2) and (2,3,0). Colors are set to white and to_draw is set to true.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_path} \cell }{Path to the OBJ file. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri_mesh} The loaded triangle mesh. Caller must free mesh.elements when done. \par
}}}{
Definition at line {\b 540} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b asm_get_line()}, {\b asm_get_next_word_from_line()}, {\b asm_get_word_and_cut()}, {\b asm_length()}, {\b ASM_MAX_LEN_LINE}, {\b asm_str_in_str()}, {\b Tri::colors}, {\b Curve::elements}, {\b Tri::light_intensity}, {\b Tri::points}, {\b Tri::to_draw}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_file()}.}\par
}
{\xe \v ae_tri_mesh_get_from_quad_mesh\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_get_from_quad_mesh}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh} ae_tri_mesh_get_from_quad_mesh ({\b Quad_mesh}  {\i q_mesh})}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convert a {\b Quad_mesh} into a {\b Tri_mesh}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Splits each quad into two triangles: (0,1,2) and (2,3,0), copying per-vertex attributes (points, colors, normals, light intensities).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q_mesh} \cell }{Input quad mesh. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri_mesh} Resulting triangle mesh. Caller must free mesh.elements when done. \par
}}}{
Definition at line {\b 875} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Tri::colors}, {\b Quad::colors}, {\b Quad_mesh::elements}, {\b Quad_mesh::length}, {\b Tri::light_intensity}, {\b Quad::light_intensity}, {\b Tri::normals}, {\b Quad::normals}, {\b Tri::points}, {\b Quad::points}, {\b Tri::to_draw}, and {\b Quad::to_draw}.}\par
}
{\xe \v ae_tri_mesh_get_from_stl_file\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_get_from_stl_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh} ae_tri_mesh_get_from_stl_file (char *  {\i file_path})}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load a triangle mesh from a binary STL file. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads binary STL (little-endian). Per-triangle normals from the file are negated to match the engine's convention and copied to each vertex normal. Colors are set to white and to_draw is set to true.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_path} \cell }{Path to the binary STL file. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri_mesh} The loaded triangle mesh. Caller must free mesh.elements when done. \par
}}}{
Definition at line {\b 743} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b Tri::colors}, {\b Tri::light_intensity}, {\b Tri::normals}, {\b Tri::points}, {\b STL_ATTRIBUTE_BITS_SIZE}, {\b STL_HEADER_SIZE}, {\b STL_NUM_SIZE}, {\b Tri::to_draw}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_file()}.}\par
}
{\xe \v ae_tri_mesh_normalize\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_normalize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_normalize ({\b Tri_mesh}  {\i mesh})}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normalize mesh coordinates to [-1, 1], centered at origin. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Uniformly scales and recenters the mesh so that the largest axis fits exactly into [-1, 1]. Other axes are scaled proportionally. Updates all vertices in place.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh to normalize (modified in place). \cell }
{\row }
}
}{
Definition at line {\b 1244} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_tri_mesh_set_bounding_box()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::points}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v ae_tri_mesh_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Tri_mesh} *  {\i des}, {\b Tri_mesh}  {\i src}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene}, {\b Lighting_mode}  {\i lighting_mode})}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a triangle mesh from world to screen space with clipping. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterates over all triangles, applies near-plane and screen-edge clipping (top/right/bottom/left), and writes results into des. Triangles can be split by clipping, so des may end up with more elements than src.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Output mesh (cleared and filled; ADA array grown as needed). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input world-space triangle mesh. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera/light/material). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lighting_mode} \cell }{Flat or smooth lighting mode. \cell }
{\row }
}
}{
Definition at line {\b 3151} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_insert_unordered}, {\b ada_remove_unordered}, {\b ae_assert_tri_is_valid}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_project_world2screen()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, and {\b mat2D_free()}.}\par
{
\ql
Referenced by {\b update()}.}\par
}
{\xe \v ae_tri_mesh_rotate_Euler_xyz\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_rotate_Euler_xyz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_rotate_Euler_xyz ({\b Tri_mesh}  {\i mesh}, float  {\i phi_deg}, float  {\i theta_deg}, float  {\i psi_deg})}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rotate a triangle mesh using XYZ Euler angles (degrees). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies DCM = Cz(psi_deg) * Cy(theta_deg) * Cx(phi_deg) to each vertex. Recomputes per-vertex normals afterward.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh to rotate (modified in place). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i phi_deg} \cell }{Rotation about X axis, degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i theta_deg} \cell }{Rotation about Y axis, degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i psi_deg} \cell }{Rotation about Z axis, degrees. \cell }
{\row }
}
}{
Definition at line {\b 1143} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_tri_mesh_set_normals()}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, {\b mat2D_set_rot_mat_z()}, {\b Tri::points}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b setup()}.}\par
}
{\xe \v ae_tri_mesh_set_bounding_box\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_set_bounding_box}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_set_bounding_box ({\b Tri_mesh}  {\i mesh}, float *  {\i x_min}, float *  {\i x_max}, float *  {\i y_min}, float *  {\i y_max}, float *  {\i z_min}, float *  {\i z_max})}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the axis-aligned bounding box of a triangle mesh. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes min/max for x, y, z across all vertices in the mesh.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Input triangle mesh. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_min} \cell }{Output minimum x. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x_max} \cell }{Output maximum x. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_min} \cell }{Output minimum y. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y_max} \cell }{Output maximum y. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i z_min} \cell }{Output minimum z. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i z_max} \cell }{Output maximum z. \cell }
{\row }
}
}{
Definition at line {\b 1206} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::points}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_normalize()}.}\par
}
{\xe \v ae_tri_mesh_set_normals\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_set_normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_set_normals ({\b Tri_mesh}  {\i mesh})}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Recompute per-vertex normals for all triangles in a mesh. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calls ae_tri_set_normals on each triangle.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Mesh to update (modified in place). \cell }
{\row }
}
}{
Definition at line {\b 1321} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_tri_set_normals()}, {\b Tri_mesh::elements}, and {\b Tri_mesh::length}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_rotate_Euler_xyz()}.}\par
}
{\xe \v ae_tri_mesh_translate\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_mesh_translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_mesh_translate ({\b Tri_mesh}  {\i mesh}, float  {\i x}, float  {\i y}, float  {\i z})}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Translate a triangle mesh by (x, y, z). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adds the given offsets to each vertex in the mesh.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mesh} \cell }{Triangle mesh to translate (modified in place). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{X-axis offset. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y} \cell }{Y-axis offset. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i z} \cell }{Z-axis offset. \cell }
{\row }
}
}{
Definition at line {\b 1121} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::points}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
}
{\xe \v ae_tri_project_world2screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_project_world2screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri_mesh} ae_tri_project_world2screen ({\b Mat2D}  {\i proj_mat}, {\b Mat2D}  {\i view_mat}, {\b Tri}  {\i tri}, int  {\i window_w}, int  {\i window_h}, {\b Scene} *  {\i scene}, {\b Lighting_mode}  {\i lighting_mode})}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Project a single world-space triangle to screen space with clipping. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes lighting, back-face visibility, transforms to view space, clips against near plane, and projects to screen space. If clipping splits the triangle, multiple triangles may be returned.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i proj_mat} \cell }{Projection matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{World-space triangle. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_w} \cell }{Screen width in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i window_h} \cell }{Screen height in pixels. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scene} \cell }{{\b Scene} (camera for near plane, light/material for lighting). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lighting_mode} \cell }{Flat or smooth lighting mode. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri_mesh} An ADA array of resulting screen-space triangles. Caller must free result.elements. \par
}}}{
Definition at line {\b 3038} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b ae_assert_tri_is_valid}, {\b ae_point_project_view2screen()}, {\b ae_point_to_mat2D()}, {\b ae_tri_calc_light_intensity()}, {\b ae_tri_calc_normal()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_transform_to_view()}, {\b Scene::camera}, {\b Camera::current_position}, {\b Tri_mesh::elements}, {\b Tri_mesh::length}, {\b Tri::light_intensity}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_sub()}, {\b mat2D_transpose()}, {\b Tri::normals}, {\b Tri::points}, {\b Tri::tex_points}, {\b Tri::to_draw}, {\b Point::w}, {\b Point::x}, {\b Point::y}, {\b Point::z}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_project_world2screen()}.}\par
}
{\xe \v ae_tri_qsort\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_qsort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_qsort ({\b Tri} *  {\i v}, int  {\i left}, int  {\i right})}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Quicksort an array of triangles by depth. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sorts v[left..right] using ae_tri_compare (descending by max z).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i v} \cell }{Array of triangles to sort. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i left} \cell }{Left index (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i right} \cell }{Right index (inclusive). \cell }
{\row }
}
}{
Definition at line {\b 3742} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_tri_compare()}, and {\b ae_tri_swap()}.}\par
}
{\xe \v ae_tri_set_normals\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_set_normals}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_set_normals ({\b Tri} *  {\i tri})}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute and set per-vertex normals for a triangle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
For each vertex, computes the cross product of the adjacent edges around that vertex and normalizes it. Results are stored in tri->normals[i].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{Triangle whose normals will be computed and written. \cell }
{\row }
}
}{
Definition at line {\b 998} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_assert_tri_is_valid}, {\b ae_mat2D_to_point()}, {\b ae_point_to_mat2D()}, {\b mat2D_alloc()}, {\b mat2D_copy()}, {\b mat2D_cross()}, {\b mat2D_free()}, {\b mat2D_normalize}, {\b mat2D_sub()}, {\b Tri::normals}, and {\b Tri::points}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_flip_normals()}, and {\b ae_tri_mesh_set_normals()}.}\par
}
{\xe \v ae_tri_swap\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_tri_swap ({\b Tri} *  {\i v}, int  {\i i}, int  {\i j})}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swap two triangles in an array. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i v} \cell }{Array of triangles. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Index of first element. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Index of second element. \cell }
{\row }
}
}{
Definition at line {\b 3706} of file {\b Almog_Engine.h}.}\par
{
\ql
Referenced by {\b ae_tri_qsort()}.}\par
}
{\xe \v ae_tri_transform_to_view\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_tri_transform_to_view}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Tri} ae_tri_transform_to_view ({\b Mat2D}  {\i view_mat}, {\b Tri}  {\i tri})}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transform a triangle from world space to view space. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies view_mat to each vertex (homogeneous multiply with w=1). Returns the transformed triangle; normals are not changed.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{View matrix (4x4). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tri} \cell }{World-space triangle. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Tri} View-space triangle. \par
}}}{
Definition at line {\b 2988} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b AE_ASSERT}, {\b ae_assert_tri_is_valid}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b Tri::points}, {\b Point::w}, {\b Point::x}, {\b Point::y}, and {\b Point::z}.}\par
{
\ql
Referenced by {\b ae_tri_project_world2screen()}.}\par
}
{\xe \v ae_view_mat_set\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_view_mat_set}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_view_mat_set ({\b Mat2D}  {\i view_mat}, {\b Camera}  {\i camera}, {\b Mat2D}  {\i up})}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a right-handed view matrix from a {\b Camera} and up vector. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes camera basis (right, up, forward) from yaw/pitch/roll offsets and direction, applies offset_position along those axes to update current_position, then zeroes offset_position. Writes the resulting 4x4 view matrix.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Although camera is passed by value, its {\b Mat2D} members (e.g. current_position, offset_position, camera_x/y/z) are modified in place due to internal pointer semantics of {\b Mat2D}.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view_mat} \cell }{Output 4x4 view matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i camera} \cell }{{\b Camera} state (basis vectors and positions updated). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i up} \cell }{World up direction (3x1). \cell }
{\row }
}
}{
Definition at line {\b 2716} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b Camera::camera_x}, {\b Camera::camera_y}, {\b Camera::camera_z}, {\b Camera::current_position}, {\b Camera::direction}, {\b mat2D_add()}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_calc_norma()}, {\b mat2D_copy()}, {\b mat2D_cross()}, {\b mat2D_dot()}, {\b mat2D_dot_product()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_mult()}, {\b mat2D_set_DCM_zyx()}, {\b mat2D_sub()}, {\b mat2D_transpose()}, {\b Camera::offset_position}, {\b Camera::pitch_offset_deg}, {\b Camera::roll_offset_deg}, and {\b Camera::yaw_offset_deg}.}\par
{
\ql
Referenced by {\b ae_scene_init()}, and {\b update()}.}\par
}
{\xe \v ae_z_buffer_copy_to_screen\:Almog_Engine.h}
{\xe \v Almog_Engine.h\:ae_z_buffer_copy_to_screen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ae_z_buffer_copy_to_screen ({\b Mat2D_uint32}  {\i screen_mat}, {\b Mat2D}  {\i inv_z_buffer})}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualize an inverse-z buffer by writing a grayscale image. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Finds the min positive and max inverse-z in inv_z_buffer, maps the range to [0.1, 1.0], and writes an RGB grayscale value into screen_mat at each pixel. Values <= 0 are clamped to the minimum positive.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i screen_mat} \cell }{Output RGB image ({\b Mat2D_uint32}) 0xRRGGBB per pixel. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inv_z_buffer} \cell }{Input inverse-z values ({\b Mat2D} of doubles). \cell }
{\row }
}
}{
Definition at line {\b 3785} of file {\b Almog_Engine.h}.}\par
{
\ql
References {\b ae_linear_map()}, {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MAT2D_AT_UINT32}, {\b RGB_hexRGB}, and {\b Mat2D::rows}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_Engine.h\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_Engine.h}
{\xe \v src/include/Almog_Engine.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00030 {\cf21 #ifndef ALMOG_ENGINE_H_}\par
00031 {\cf21 #define ALMOG_ENGINE_H_}\par
00032 \par
00033 {\cf21 #include "./Almog_Dynamic_Array.h"}\par
00034 {\cf21 #include "./Matrix2D.h"}\par
00035 {\cf21 #include "./Almog_Draw_Library.h"}\par
00036 \par
00037 {\cf21 #ifndef ALMOG_STRING_MANIPULATION_IMPLEMENTATION}\par
00038 {\cf21 #define ALMOG_STRING_MANIPULATION_IMPLEMENTATION}\par
00039 {\cf21 #endif}\par
00040 {\cf21 #include "./Almog_String_Manipulation.h"}\par
00041 \par
00042 {\cf21 #ifndef AE_ASSERT}\par
00043 {\cf21 #include <assert.h>}\par
00044 {\cf21 #define AE_ASSERT assert}\par
00045 {\cf21 #endif}\par
00046 \par
00047 {\cf21 #include <math.h>}\par
00048 {\cf21 #include <stdbool.h>}\par
00049 {\cf21 #include <float.h>}\par
00050 {\cf21 #include <stdint.h>}\par
00051 {\cf21 #include <errno.h>}\par
00052 {\cf21 #include <string.h>}\par
00053 \par
00054 {\cf21 #ifndef PI}\par
00055 {\cf21 #define PI M_PI}\par
00056 {\cf21 #endif}\par
00057 \par
00058 {\cf21 #ifndef STL_HEADER_SIZE}\par
00059 {\cf21 #define STL_HEADER_SIZE 80}\par
00060 {\cf21 #endif}\par
00061 \par
00062 {\cf21 #ifndef STL_NUM_SIZE}\par
00063 {\cf21 #define STL_NUM_SIZE 4}\par
00064 {\cf21 #endif}\par
00065 \par
00066 {\cf21 #ifndef STL_SIZE_FOREACH_TRI}\par
00067 {\cf21 #define STL_SIZE_FOREACH_TRI 50}\par
00068 {\cf21 #endif}\par
00069 \par
00070 {\cf21 #ifndef STL_ATTRIBUTE_BITS_SIZE}\par
00071 {\cf21 #define STL_ATTRIBUTE_BITS_SIZE 2}\par
00072 {\cf21 #endif}\par
00073 \par
00074 {\cf21 #ifndef HexARGB_RGBA}\par
00075 {\cf21 #define HexARGB_RGBA(x) ((x)>>(8*2)&0xFF), ((x)>>(8*1)&0xFF), ((x)>>(8*0)&0xFF), ((x)>>(8*3)&0xFF)}\par
00076 {\cf21 #endif}\par
00077 {\cf21 #ifndef HexARGB_RGB_VAR}\par
00078 {\cf21 #define HexARGB_RGB_VAR(x, r, g, b) r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF);}\par
00079 {\cf21 #endif}\par
00080 {\cf21 #ifndef HexARGB_RGBA_VAR}\par
00081 {\cf21 #define HexARGB_RGBA_VAR(x, r, g, b, a) r = ((x)>>(8*2)&0xFF); g = ((x)>>(8*1)&0xFF); b = ((x)>>(8*0)&0xFF); a = ((x)>>(8*3)&0xFF)}\par
00082 {\cf21 #endif}\par
00083 {\cf21 #define ARGB_hexARGB(a, r, g, b) 0x01000000l*(uint8_t)(a) + 0x00010000*(uint8_t)(r) + 0x00000100*(uint8_t)(g) + 0x00000001*(uint8_t)(b)}\par
00084 {\cf21 #ifndef RGB_hexRGB}\par
00085 {\cf21 #define RGB_hexRGB(r, g, b) (int)(0x010000*(int)(r) + 0x000100*(int)(g) + 0x000001*(int)(b))}\par
00086 {\cf21 #endif}\par
00087 \par
00088 {\cf21 #define AE_MAX_POINT_VAL 1e5}\par
00089 {\cf21 #define ae_assert_point_is_valid(p) AE_ASSERT(isfinite((p).x) && isfinite((p).y) && isfinite((p).z) && isfinite((p).w));    \\}\par
00090 {\cf21         AE_ASSERT((p).x > -AE_MAX_POINT_VAL && (p).x < AE_MAX_POINT_VAL);                                                                  \\}\par
00091 {\cf21         AE_ASSERT((p).y > -AE_MAX_POINT_VAL && (p).y < AE_MAX_POINT_VAL);                                                                  \\}\par
00092 {\cf21         AE_ASSERT((p).z > -AE_MAX_POINT_VAL && (p).z < AE_MAX_POINT_VAL);                                                                  \\}\par
00093 {\cf21         AE_ASSERT((p).w > -AE_MAX_POINT_VAL && (p).w < AE_MAX_POINT_VAL);}\par
00094 {\cf21 #define ae_assert_tri_is_valid(tri) ae_assert_point_is_valid((tri).points[0]);  \\}\par
00095 {\cf21         ae_assert_point_is_valid((tri).points[1]);                              \\}\par
00096 {\cf21         ae_assert_point_is_valid((tri).points[2])}\par
00097 {\cf21 #define ae_assert_quad_is_valid(quad) ae_assert_point_is_valid((quad).points[0]);   \\}\par
00098 {\cf21         ae_assert_point_is_valid((quad).points[1]);                                 \\}\par
00099 {\cf21         ae_assert_point_is_valid((quad).points[2]);                                 \\}\par
00100 {\cf21         ae_assert_point_is_valid((quad).points[3])}\par
00101 {\cf21 #define ae_point_normalize_xyz_norma(p, norma) (p).x = (p).x / norma;  \\}\par
00102 {\cf21         (p).y = (p).y / norma;                        \\}\par
00103 {\cf21         (p).z = (p).z / norma }\par
00104 {\cf21 #define ae_point_calc_norma(p) sqrt(((p).x * (p).x) + ((p).y * (p).y) + ((p).z * (p).z))}\par
00105 {\cf21 #define ae_point_add_point(p, p1, p2) (p).x = (p1).x + (p2).x;  \\}\par
00106 {\cf21         (p).y = (p1).y + (p2).y;                                \\}\par
00107 {\cf21         (p).z = (p1).z + (p2).z;                                \\}\par
00108 {\cf21         (p).w = (p1).w + (p2).w}\par
00109 {\cf21 #define ae_point_sub_point(p, p1, p2) (p).x = (p1).x - (p2).x;  \\}\par
00110 {\cf21         (p).y = (p1).y - (p2).y;                                \\}\par
00111 {\cf21         (p).z = (p1).z - (p2).z;                                \\}\par
00112 {\cf21         (p).w = (p1).w - (p2).w}\par
00113 {\cf21 #define ae_point_dot_point(p1, p2) (((p1).x * (p2).x) + ((p1).y * (p2).y) + ((p1).z * (p2).z))}\par
00114 {\cf21 #define ae_point_mult(p, const) (p).x *= const; \\}\par
00115 {\cf21         (p).y *= const;                         \\}\par
00116 {\cf21         (p).z *= const}\par
00117 {\cf21 #define ae_points_equal(p1, p2) (p1).x == (p2).x && (p1).y == (p2).y && (p1).z == (p2).z}\par
00118 \par
00119 \par
00120 {\cf17 typedef} {\cf17 enum} \{\par
00121     AE_LIGHTING_FLAT,\par
00122     AE_LIGHTING_SMOOTH,\par
00123     AE_LIGHTING_MODE_LENGTH\par
00124 \} Lighting_mode;\par
00125 \par
00126 {\cf21 #ifndef TRI_MESH_ARRAY}\par
00127 {\cf21 #define TRI_MESH_ARRAY}\par
00128 {\cf17 typedef} {\cf17 struct }\{\par
00129     {\cf18 size_t} length;\par
00130     {\cf18 size_t} capacity;\par
00131     Tri_mesh *elements;\par
00132 \} Tri_mesh_array; {\cf20 /* Tri_mesh ada array */}\par
00133 {\cf21 #endif}\par
00134 \par
00135 {\cf21 #ifndef QUAD_MESH_ARRAY}\par
00136 {\cf21 #define QUAD_MESH_ARRAY}\par
00137 {\cf17 typedef} {\cf17 struct }\{\par
00138     {\cf18 size_t} length;\par
00139     {\cf18 size_t} capacity;\par
00140     Quad_mesh *elements;\par
00141 \} Quad_mesh_array; {\cf20 /* Quad_mesh ada array */}\par
00142 {\cf21 #endif}\par
00143 \par
00144 {\cf17 typedef} {\cf17 struct }\{\par
00145     Mat2D init_position;\par
00146     Mat2D current_position;\par
00147     Mat2D offset_position;\par
00148     Mat2D direction;\par
00149     {\cf18 float} z_near;\par
00150     {\cf18 float} z_far;\par
00151     {\cf18 float} fov_deg;\par
00152     {\cf18 float} aspect_ratio;\par
00153     {\cf18 float} roll_offset_deg;\par
00154     {\cf18 float} pitch_offset_deg;\par
00155     {\cf18 float} yaw_offset_deg;\par
00156     Mat2D camera_x;\par
00157     Mat2D camera_y;\par
00158     Mat2D camera_z;\par
00159 \} Camera;\par
00160 \par
00161 {\cf17 typedef} {\cf17 struct }\{\par
00162     Point light_direction_or_pos;\par
00163     {\cf18 float} light_intensity;\par
00164 \} Light_source;\par
00165 \par
00166 {\cf17 typedef} {\cf17 struct }\{\par
00167     {\cf18 float} specular_power_alpha;\par
00168     {\cf18 float} c_ambi;\par
00169     {\cf18 float} c_diff;\par
00170     {\cf18 float} c_spec;\par
00171 \} Material;\par
00172 \par
00173 {\cf17 typedef} {\cf17 struct }\{\par
00174     Tri_mesh_array in_world_tri_meshes;\par
00175     Tri_mesh_array projected_tri_meshes;\par
00176     Tri_mesh_array original_tri_meshes;\par
00177 \par
00178     Quad_mesh_array in_world_quad_meshes;\par
00179     Quad_mesh_array projected_quad_meshes;\par
00180     Quad_mesh_array original_quad_meshes;\par
00181 \par
00182     Camera camera;\par
00183     Mat2D up_direction;\par
00184     Mat2D proj_mat;\par
00185     Mat2D view_mat;\par
00186 \par
00187     Light_source light_source0;\par
00188     Material material0;\par
00189 \} Scene;\par
00190 \par
00191 Tri         ae_tri_create(Point p1, Point p2, Point p3);\par
00192 {\cf18 void}        ae_tri_mesh_create_copy(Tri_mesh *des, Tri *src_elements, {\cf18 size_t} len);\par
00193 \par
00194 {\cf18 void}        ae_camera_init(Scene *scene, {\cf18 int} window_h, {\cf18 int} window_w);\par
00195 {\cf18 void}        ae_camera_free(Scene *scene);\par
00196 Scene       ae_scene_init({\cf18 int} window_h, {\cf18 int} window_w);\par
00197 {\cf18 void}        ae_scene_free(Scene *scene);\par
00198 {\cf18 void}        ae_camera_reset_pos(Scene *scene);\par
00199 \par
00200 {\cf18 void}        ae_point_to_mat2D(Point p, Mat2D m);\par
00201 Point       ae_mat2D_to_point(Mat2D m);\par
00202 \par
00203 Tri_mesh    ae_tri_mesh_get_from_obj_file({\cf18 char} *file_path);\par
00204 Tri_mesh    ae_tri_mesh_get_from_stl_file({\cf18 char} *file_path);\par
00205 Tri_mesh    ae_tri_mesh_get_from_file({\cf18 char} *file_path);\par
00206 {\cf18 void}        ae_tri_mesh_appand_copy(Tri_mesh_array *mesh_array, Tri_mesh mesh);\par
00207 Tri_mesh    ae_tri_mesh_get_from_quad_mesh(Quad_mesh q_mesh);\par
00208 \par
00209 {\cf18 void}        ae_print_points(Curve p);\par
00210 {\cf18 void}        ae_print_tri(Tri tri, {\cf18 char} *name, {\cf18 size_t} padding);\par
00211 {\cf18 void}        ae_print_tri_mesh(Tri_mesh mesh, {\cf18 char} *name, {\cf18 size_t} padding);\par
00212 \par
00213 Point       ae_point_normalize_xyz(Point p);\par
00214 {\cf18 void}        ae_tri_set_normals(Tri *tri);\par
00215 Point       ae_tri_get_average_normal(Tri tri);\par
00216 Point       ae_tri_get_average_point(Tri tri);\par
00217 {\cf18 void}        ae_tri_calc_normal(Mat2D normal, Tri tri);\par
00218 {\cf18 void}        ae_tri_mesh_translate(Tri_mesh mesh, {\cf18 float} x, {\cf18 float} y, {\cf18 float} z);\par
00219 {\cf18 void}        ae_tri_mesh_rotate_Euler_xyz(Tri_mesh mesh, {\cf18 float} phi_deg, {\cf18 float} theta_deg, {\cf18 float} psi_deg);\par
00220 {\cf18 void}        ae_tri_mesh_set_bounding_box(Tri_mesh mesh, {\cf18 float} *x_min, {\cf18 float} *x_max, {\cf18 float} *y_min, {\cf18 float} *y_max, {\cf18 float} *z_min, {\cf18 float} *z_max);\par
00221 {\cf18 void}        ae_tri_mesh_normalize(Tri_mesh mesh);\par
00222 {\cf18 void}        ae_tri_mesh_flip_normals(Tri_mesh mesh);\par
00223 {\cf18 void}        ae_tri_mesh_set_normals(Tri_mesh mesh);\par
00224 {\cf18 void}        ae_quad_set_normals(Quad *quad);\par
00225 Point       ae_quad_get_average_normal(Quad quad);\par
00226 Point       ae_quad_get_average_point(Quad quad);\par
00227 {\cf18 void}        ae_quad_calc_normal(Mat2D normal, Quad quad);\par
00228 {\cf18 void}        ae_curve_copy(Curve *des, Curve src);\par
00229 \par
00230 {\cf18 void}        ae_tri_calc_light_intensity(Tri *tri, Scene *scene, Lighting_mode lighting_mode);\par
00231 {\cf18 void}        ae_quad_calc_light_intensity(Quad *quad, Scene *scene, Lighting_mode lighting_mode);\par
00232 \par
00233 Point       ae_line_itersect_plane(Mat2D plane_p, Mat2D plane_n, Mat2D line_start, Mat2D line_end, {\cf18 float} *t);\par
00234 {\cf18 int}         ae_line_clip_with_plane(Point start_in, Point end_in, Mat2D plane_p, Mat2D plane_n, Point *start_out, Point *end_out);\par
00235 {\cf18 float}       ae_signed_dist_point_and_plane(Point p, Mat2D plane_p, Mat2D plane_n);\par
00236 {\cf18 int}         ae_tri_clip_with_plane(Tri tri_in, Mat2D plane_p, Mat2D plane_n, Tri *tri_out1, Tri *tri_out2);\par
00237 {\cf18 int}         ae_quad_clip_with_plane(Quad quad_in, Mat2D plane_p, Mat2D plane_n, Quad *quad_out1, Quad *quad_out2);\par
00238 \par
00239 {\cf18 void}        ae_projection_mat_set(Mat2D proj_mat,{\cf18 float} aspect_ratio, {\cf18 float} FOV_deg, {\cf18 float} z_near, {\cf18 float} z_far);\par
00240 {\cf18 void}        ae_view_mat_set(Mat2D view_mat, Camera camera, Mat2D up);\par
00241 Point       ae_point_project_world2screen(Mat2D view_mat, Mat2D proj_mat, Point src, {\cf18 int} window_w, {\cf18 int} window_h);\par
00242 Point       ae_point_project_world2view(Mat2D view_mat, Point src);\par
00243 Point       ae_point_project_view2screen(Mat2D proj_mat, Point src, {\cf18 int} window_w, {\cf18 int} window_h);\par
00244 {\cf18 void}        ae_line_project_world2screen(Mat2D view_mat, Mat2D proj_mat, Point start_src, Point end_src, {\cf18 int} window_w, {\cf18 int} window_h, Point *start_des, Point *end_des, Scene *scene);\par
00245 Tri         ae_tri_transform_to_view(Mat2D view_mat, Tri tri);\par
00246 Tri_mesh    ae_tri_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Tri tri, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode);\par
00247 {\cf18 void}        ae_tri_mesh_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Tri_mesh *des, Tri_mesh src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode);\par
00248 Quad        ae_quad_transform_to_view(Mat2D view_mat, Quad quad);\par
00249 Quad_mesh   ae_quad_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Quad quad, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode);\par
00250 {\cf18 void}        ae_quad_mesh_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Quad_mesh *des, Quad_mesh src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode);\par
00251 {\cf18 void}        ae_curve_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Curve *des, Curve src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene);\par
00252 {\cf18 void}        ae_curve_ada_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Curve_ada *des, Curve_ada src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene);\par
00253 {\cf18 void}        ae_grid_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Grid des, Grid src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene);\par
00254 \par
00255 {\cf18 void}        ae_tri_swap(Tri *v, {\cf18 int} i, {\cf18 int} j);\par
00256 {\cf18 bool}        ae_tri_compare(Tri t1, Tri t2);\par
00257 {\cf18 void}        ae_tri_qsort(Tri *v, {\cf18 int} left, {\cf18 int} right);\par
00258 {\cf18 double}      ae_linear_map({\cf18 double} s, {\cf18 double} min_in, {\cf18 double} max_in, {\cf18 double} min_out, {\cf18 double} max_out);\par
00259 {\cf18 void}        ae_z_buffer_copy_to_screen(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer);\par
00260 \par
00261 {\cf21 #endif }{\cf20 /* ALMOG_ENGINE_H_ */}{\cf21 }\par
00262 \par
00263 {\cf21 #ifdef ALMOG_ENGINE_IMPLEMENTATION}\par
00264 {\cf21 #undef ALMOG_ENGINE_IMPLEMENTATION}\par
00265 \par
00266 {\cf21 #define AE_PRINT_TRI(tri) ae_print_tri(tri, #tri, 0)}\par
00267 {\cf21 #define AE_PRINT_MESH(mesh) ae_print_tri_mesh(mesh, #mesh, 0)}\par
00268 \par
00278 Tri ae_tri_create(Point p1, Point p2, Point p3)\par
00279 \{\par
00280     Tri tri;\par
00281 \par
00282     tri.points[0] = p1;\par
00283     tri.points[1] = p2;\par
00284     tri.points[2] = p3;\par
00285 \par
00286     {\cf19 return} tri;\par
00287 \}\par
00288 \par
00299 {\cf18 void} ae_tri_mesh_create_copy(Tri_mesh *des, Tri *src_elements, {\cf18 size_t} len)\par
00300 \{\par
00301     Tri_mesh temp_des = *des;\par
00302     temp_des.length = 0;\par
00303     {\cf19 for} ({\cf18 size_t} i = 0; i < len; i++) \{\par
00304         ada_appand(Tri, temp_des, src_elements[i]);\par
00305     \}\par
00306     *des = temp_des;\par
00307 \}\par
00308 \par
00320 {\cf18 void} ae_camera_init(Scene *scene, {\cf18 int} window_h, {\cf18 int} window_w)\par
00321 \{\par
00322     scene->camera.z_near       = 0.1;\par
00323     scene->camera.z_far        = 1000;\par
00324     scene->camera.fov_deg      = 60;\par
00325     scene->camera.aspect_ratio = (float)window_h / ({\cf18 float})window_w;\par
00326 \par
00327     scene->camera.init_position = mat2D_alloc(3, 1);\par
00328     mat2D_fill(scene->camera.init_position, 0);\par
00329     MAT2D_AT(scene->camera.init_position, 2, 0) = -4;\par
00330 \par
00331     scene->camera.current_position = mat2D_alloc(3, 1);\par
00332     mat2D_copy(scene->camera.current_position, scene->camera.init_position);\par
00333 \par
00334     scene->camera.offset_position = mat2D_alloc(3, 1);\par
00335     mat2D_fill(scene->camera.offset_position, 0);\par
00336 \par
00337     scene->camera.roll_offset_deg = 0;\par
00338     scene->camera.pitch_offset_deg = 0;\par
00339     scene->camera.yaw_offset_deg = 0;\par
00340 \par
00341     scene->camera.direction = mat2D_alloc(3, 1);\par
00342     mat2D_fill(scene->camera.direction, 0);\par
00343     MAT2D_AT(scene->camera.direction, 2, 0) = 1;\par
00344 \par
00345     scene->camera.camera_x = mat2D_alloc(3, 1);\par
00346     mat2D_fill(scene->camera.camera_x, 0);\par
00347     MAT2D_AT(scene->camera.camera_x, 0, 0) = 1;\par
00348     \par
00349     scene->camera.camera_y = mat2D_alloc(3, 1);\par
00350     mat2D_fill(scene->camera.camera_y, 0);\par
00351     MAT2D_AT(scene->camera.camera_y, 1, 0) = 1;\par
00352 \par
00353     scene->camera.camera_z = mat2D_alloc(3, 1);\par
00354     mat2D_fill(scene->camera.camera_z, 0);\par
00355     MAT2D_AT(scene->camera.camera_z, 2, 0) = 1;\par
00356 \}\par
00357 \par
00366 {\cf18 void} ae_camera_free(Scene *scene)\par
00367 \{\par
00368     mat2D_free(scene->camera.init_position);\par
00369     mat2D_free(scene->camera.current_position);\par
00370     mat2D_free(scene->camera.offset_position);\par
00371     mat2D_free(scene->camera.direction);\par
00372     mat2D_free(scene->camera.camera_x);\par
00373     mat2D_free(scene->camera.camera_y);\par
00374     mat2D_free(scene->camera.camera_z);\par
00375 \}\par
00376 \par
00388 Scene ae_scene_init({\cf18 int} window_h, {\cf18 int} window_w)\par
00389 \{\par
00390     Scene scene = \{0\};\par
00391     ae_camera_init(&(scene), window_h, window_w);\par
00392 \par
00393     scene.up_direction = mat2D_alloc(3, 1);\par
00394     mat2D_fill(scene.up_direction, 0);\par
00395     MAT2D_AT(scene.up_direction, 1, 0) = 1;\par
00396 \par
00397     scene.light_source0.light_direction_or_pos.x = 0.5;\par
00398     scene.light_source0.light_direction_or_pos.y = 1;\par
00399     scene.light_source0.light_direction_or_pos.z = 1;\par
00400     scene.light_source0.light_direction_or_pos.w = 0;\par
00401     scene.light_source0.light_direction_or_pos = ae_point_normalize_xyz(scene.light_source0.light_direction_or_pos);\par
00402     scene.light_source0.light_intensity = 1;\par
00403 \par
00404     scene.material0.specular_power_alpha = 1;\par
00405     scene.material0.c_ambi = 0.2;\par
00406     scene.material0.c_diff = 0.6;\par
00407     scene.material0.c_spec = 0.2;\par
00408 \par
00409     scene.proj_mat = mat2D_alloc(4, 4);\par
00410     ae_projection_mat_set(scene.proj_mat, scene.camera.aspect_ratio, scene.camera.fov_deg, scene.camera.z_near, scene.camera.z_far);\par
00411 \par
00412     scene.view_mat = mat2D_alloc(4, 4);\par
00413     ae_view_mat_set(scene.view_mat, scene.camera, scene.up_direction);\par
00414 \par
00415     {\cf19 return} scene;\par
00416 \}\par
00417 \par
00429 {\cf18 void} ae_scene_free(Scene *scene)\par
00430 \{\par
00431     ae_camera_free(scene);\par
00432     mat2D_free(scene->up_direction);\par
00433     mat2D_free(scene->proj_mat);\par
00434     mat2D_free(scene->view_mat);\par
00435 \par
00436     {\cf19 for} ({\cf18 size_t} i = 0; i < scene->in_world_tri_meshes.length; i++) \{\par
00437         free(scene->in_world_tri_meshes.elements[i].elements);\par
00438     \}\par
00439     {\cf19 for} ({\cf18 size_t} i = 0; i < scene->projected_tri_meshes.length; i++) \{\par
00440         free(scene->projected_tri_meshes.elements[i].elements);\par
00441     \}\par
00442     {\cf19 for} ({\cf18 size_t} i = 0; i < scene->original_tri_meshes.length; i++) \{\par
00443         free(scene->original_tri_meshes.elements[i].elements);\par
00444     \}\par
00445     {\cf19 if} (scene->in_world_tri_meshes.elements) free(scene->in_world_tri_meshes.elements);\par
00446     {\cf19 if} (scene->projected_tri_meshes.elements) free(scene->projected_tri_meshes.elements);\par
00447     {\cf19 if} (scene->original_tri_meshes.elements) free(scene->original_tri_meshes.elements);\par
00448 \par
00449     {\cf19 for} ({\cf18 size_t} i = 0; i < scene->in_world_quad_meshes.length; i++) \{\par
00450         free(scene->in_world_quad_meshes.elements[i].elements);\par
00451     \}\par
00452     {\cf19 for} ({\cf18 size_t} i = 0; i < scene->projected_quad_meshes.length; i++) \{\par
00453         free(scene->projected_quad_meshes.elements[i].elements);\par
00454     \}\par
00455     {\cf19 for} ({\cf18 size_t} i = 0; i < scene->original_quad_meshes.length; i++) \{\par
00456         free(scene->original_quad_meshes.elements[i].elements);\par
00457     \}\par
00458     {\cf19 if} (scene->in_world_quad_meshes.elements) free(scene->in_world_quad_meshes.elements);\par
00459     {\cf19 if} (scene->projected_quad_meshes.elements) free(scene->projected_quad_meshes.elements);\par
00460     {\cf19 if} (scene->original_quad_meshes.elements) free(scene->original_quad_meshes.elements);\par
00461 \}\par
00462 \par
00472 {\cf18 void} ae_camera_reset_pos(Scene *scene)\par
00473 \{\par
00474     scene->camera.roll_offset_deg = 0;\par
00475     scene->camera.pitch_offset_deg = 0;\par
00476     scene->camera.yaw_offset_deg = 0;\par
00477 \par
00478     mat2D_fill(scene->camera.offset_position, 0);\par
00479 \par
00480     mat2D_fill(scene->camera.camera_x, 0);\par
00481     MAT2D_AT(scene->camera.camera_x, 0, 0) = 1;\par
00482     mat2D_fill(scene->camera.camera_y, 0);\par
00483     MAT2D_AT(scene->camera.camera_y, 1, 0) = 1;\par
00484     mat2D_fill(scene->camera.camera_z, 0);\par
00485     MAT2D_AT(scene->camera.camera_z, 2, 0) = 1;\par
00486 \par
00487     mat2D_copy(scene->camera.current_position, scene->camera.init_position);\par
00488 \}\par
00489 \par
00498 {\cf18 void} ae_point_to_mat2D(Point p, Mat2D m)\par
00499 \{\par
00500     MATRIX2D_ASSERT((3 == m.rows && 1 == m.cols) || (1 == m.rows && 3 == m.cols));\par
00501     \par
00502     {\cf19 if} (3 == m.rows) \{\par
00503         MAT2D_AT(m, 0, 0) = p.x;\par
00504         MAT2D_AT(m, 1, 0) = p.y;\par
00505         MAT2D_AT(m, 2, 0) = p.z;\par
00506     \}\par
00507     {\cf19 if} (3 == m.cols) \{\par
00508         MAT2D_AT(m, 0, 0) = p.x;\par
00509         MAT2D_AT(m, 0, 1) = p.y;\par
00510         MAT2D_AT(m, 0, 2) = p.z;\par
00511     \}\par
00512 \}\par
00513 \par
00522 Point ae_mat2D_to_point(Mat2D m)\par
00523 \{\par
00524     Point res = \{.x = MAT2D_AT(m, 0, 0), .y = MAT2D_AT(m, 1, 0), .z = MAT2D_AT(m, 2, 0), .w = 1\};\par
00525     {\cf19 return} res;\par
00526 \}\par
00527 \par
00540 Tri_mesh ae_tri_mesh_get_from_obj_file({\cf18 char} *file_path)\par
00541 \{\par
00542     {\cf18 char} current_line[ASM_MAX_LEN_LINE], current_word[ASM_MAX_LEN_LINE], current_num_str[ASM_MAX_LEN_LINE];\par
00543     {\cf18 char} file_name[ASM_MAX_LEN_LINE], file_extention[ASM_MAX_LEN_LINE], mesh_name[ASM_MAX_LEN_LINE];\par
00544     {\cf18 int} texture_warning_was_printed = 0;\par
00545 \par
00546     strncpy(file_name, file_path, ASM_MAX_LEN_LINE);\par
00547     strncpy(file_extention, file_name, ASM_MAX_LEN_LINE);\par
00548 \par
00549     {\cf20 /* check if file is an obj file*/}\par
00550     asm_get_word_and_cut(file_name, file_extention, {\cf23 '.'});\par
00551     asm_get_word_and_cut(file_name, file_extention, {\cf23 '.'});\par
00552     {\cf19 if} (strncmp(file_extention, {\cf22 ".obj"}, ASM_MAX_LEN_LINE)) \{\par
00553         fprintf(stderr, {\cf22 "%s:%d: [Error] unsupported file format: '%s'\\n"}, __FILE__, __LINE__, file_name);\par
00554         exit(1);\par
00555     \}\par
00556 \par
00557     strncpy(mesh_name, file_name, ASM_MAX_LEN_LINE);\par
00558     {\cf19 while}(asm_length(mesh_name)) \{\par
00559         asm_get_word_and_cut(current_word, mesh_name, {\cf23 '/'});\par
00560     \}\par
00561 \par
00562     strncpy(mesh_name, current_word, ASM_MAX_LEN_LINE);\par
00563 \par
00564     strncpy(current_word, {\cf22 "."}, ASM_MAX_LEN_LINE);\par
00565     strncat(file_name, {\cf22 ".obj"}, ASM_MAX_LEN_LINE/2);\par
00566     strncat(current_word, file_name, ASM_MAX_LEN_LINE/2);\par
00567 \par
00568     FILE *fp_input = fopen(current_word, {\cf22 "rt"});\par
00569     {\cf19 if} (fp_input == NULL) \{\par
00570         fprintf(stderr, {\cf22 "%s:%d: [Error] failed to open input file: '%s', %s\\n"}, __FILE__, __LINE__, current_word, strerror(errno));\par
00571         exit(1);\par
00572     \}\par
00573 \par
00574     {\cf20 // strncpy(output_file_name, "./build/", ASM_MAX_LEN_LINE);}\par
00575     {\cf20 // strncat(output_file_name, mesh_name, ASM_MAX_LEN_LINE/2);}\par
00576     {\cf20 // strncat(output_file_name, ".c", ASM_MAX_LEN_LINE/2);}\par
00577     {\cf20 // FILE *fp_output = fopen(output_file_name, "wt");}\par
00578     {\cf20 // if (fp_input == NULL) \{}\par
00579     {\cf20 //     fprintf(stderr, "%s:%d: [Error] failed to open output file: '%s'. %s\\n", __FILE__, __LINE__, output_file_name, strerror(errno));}\par
00580     {\cf20 //     exit(1);}\par
00581     {\cf20 // \}}\par
00582 \par
00583     {\cf20 /* parsing data from file */}\par
00584     Curve points = \{0\};\par
00585     ada_init_array(Point, points);\par
00586     Tri_mesh mesh;\par
00587     ada_init_array(Tri, mesh);\par
00588 \par
00589     {\cf18 int} line_len;\par
00590 \par
00591     {\cf19 while} ((line_len = asm_get_line(fp_input, current_line)) != -1) \{\par
00592         asm_get_next_word_from_line(current_word, current_line, {\cf23 ' '});\par
00593         {\cf19 if} (!strncmp(current_word, {\cf22 "v"}, 1)) \{\par
00594             Point p;\par
00595             asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00596             asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00597             p.x = atof(current_word);\par
00598             asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00599             p.y = atof(current_word);\par
00600             asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00601             p.z = atof(current_word);\par
00602             {\cf20 // printf("current word: %s\\n", current_word);}\par
00603             ada_appand(Point, points, p);\par
00604             {\cf20 // break;}\par
00605         \}\par
00606         {\cf19 if} (!strncmp(current_word, {\cf22 "f"}, 1)) \{\par
00607             Tri tri1 = \{0\}, tri2 = \{0\};\par
00608 \par
00609             {\cf20 // printf("line: %s\\nword: %s, %d\\n", current_line, current_word, atoi(current_word));}\par
00610             asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00611             {\cf20 // printf("line: %s\\nword: %s, %d\\n", current_line, current_word, atoi(current_word));}\par
00612 \par
00613             {\cf18 int} number_of_spaces = asm_str_in_str(current_line, {\cf22 " "});\par
00614             {\cf20 // printf("%d\\n", number_of_spaces);}\par
00615             {\cf20 // exit(1);}\par
00616             {\cf19 if} (!(number_of_spaces == 3 || number_of_spaces == 4 || number_of_spaces == 5)) \{\par
00617                 fprintf(stderr, {\cf22 "%s:%d: [Error] there is unsupported number of vertices for a face: %d\\n"}, __FILE__, __LINE__, number_of_spaces);\par
00618                 exit(1);\par
00619             \}\par
00620             {\cf19 if} (number_of_spaces == 3) \{\par
00621                 {\cf20 /* there are 3 vertices for the face. */}\par
00622                 asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00623                 {\cf20 // printf("line: %s\\nword: %s, %d\\n", current_line, current_word, atoi(current_word));}\par
00624                 {\cf18 int} number_of_backslash = asm_str_in_str(current_word, {\cf22 "/"});\par
00625                 {\cf19 if} (number_of_backslash == 0) \{\par
00626                     tri1.points[0] = points.elements[atoi(current_word)-1];\par
00627                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00628                     tri1.points[1] = points.elements[atoi(current_word)-1];\par
00629                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00630                     tri1.points[2] = points.elements[atoi(current_word)-1];\par
00631                 \}\par
00632                 {\cf19 if} (number_of_backslash == 2) \{\par
00633                     {\cf19 if} (!texture_warning_was_printed) \{\par
00634                         fprintf(stderr, {\cf22 "%s:%d [Warning] texture and normals data ignored of file at - '%s'\\n"}, __FILE__, __LINE__, file_path);\par
00635                         texture_warning_was_printed = 1;\par
00636                     \}\par
00637 \par
00638                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00639                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00640                     tri1.points[0] = points.elements[atoi(current_num_str)-1];\par
00641 \par
00642                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00643                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00644                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00645                     tri1.points[1] = points.elements[atoi(current_num_str)-1];\par
00646 \par
00647                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00648                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00649                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00650                     tri1.points[2] = points.elements[atoi(current_num_str)-1];\par
00651                 \}\par
00652 \par
00653                 tri1.to_draw = {\cf17 true};\par
00654                 tri1.light_intensity[0] = 1;\par
00655                 tri1.light_intensity[1] = 1;\par
00656                 tri1.light_intensity[2] = 1;\par
00657                 tri1.colors[0] = 0xFFFFFFFF;\par
00658                 tri1.colors[1] = 0xFFFFFFFF;\par
00659                 tri1.colors[2] = 0xFFFFFFFF;\par
00660 \par
00661                 ada_appand(Tri, mesh, tri1);\par
00662                 {\cf20 // AE_PRINT_TRI(tri1);}\par
00663             \} {\cf19 else} {\cf19 if} (number_of_spaces == 5 || number_of_spaces == 4) \{\par
00664                 {\cf20 /* there are 4 vertices for the face. */}\par
00665                 {\cf20 /* sometimes there is a space in the end */}\par
00666                 asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00667                 {\cf20 // printf("line: %s\\nword: %s, %d\\n", current_line, current_word, atoi(current_word));}\par
00668                 {\cf18 int} number_of_backslash = asm_str_in_str(current_word, {\cf22 "/"});\par
00669                 {\cf19 if} (number_of_backslash == 0) \{\par
00670                     tri1.points[0] = points.elements[atoi(current_word)-1];\par
00671                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00672                     tri1.points[1] = points.elements[atoi(current_word)-1];\par
00673                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00674                     tri1.points[2] = points.elements[atoi(current_word)-1];\par
00675                 \}\par
00676                 {\cf19 if} (number_of_backslash == 2 || number_of_backslash == 1) \{\par
00677                     {\cf19 if} (!texture_warning_was_printed) \{\par
00678                         fprintf(stderr, {\cf22 "%s:%d [Warning] texture and normals data ignored of file at - '%s'\\n"}, __FILE__, __LINE__, file_path);\par
00679                         texture_warning_was_printed = 1;\par
00680                     \}\par
00681 \par
00682                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00683                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00684                     tri1.points[0] = points.elements[atoi(current_num_str)-1];\par
00685                     tri2.points[2] = points.elements[atoi(current_num_str)-1];\par
00686 \par
00687                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00688                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00689                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00690                     tri1.points[1] = points.elements[atoi(current_num_str)-1];\par
00691 \par
00692                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00693                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00694                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00695                     tri1.points[2] = points.elements[atoi(current_num_str)-1];\par
00696                     tri2.points[0] = points.elements[atoi(current_num_str)-1];\par
00697 \par
00698                     asm_get_word_and_cut(current_word, current_line, {\cf23 ' '});\par
00699                     asm_get_word_and_cut(current_num_str, current_word, {\cf23 '/'});\par
00700                     {\cf20 // printf("line: %s\\nword: %s\\nnum str: %s, %d\\n", current_line, current_word, current_num_str, atoi(current_num_str));}\par
00701                     tri2.points[1] = points.elements[atoi(current_num_str)-1];\par
00702                 \}\par
00703 \par
00704                 tri1.to_draw = {\cf17 true};\par
00705                 tri1.light_intensity[0] = 1;\par
00706                 tri1.light_intensity[1] = 1;\par
00707                 tri1.light_intensity[2] = 1;\par
00708                 tri1.colors[0] = 0xFFFFFFFF;\par
00709                 tri1.colors[1] = 0xFFFFFFFF;\par
00710                 tri1.colors[2] = 0xFFFFFFFF;\par
00711 \par
00712                 tri2.to_draw = {\cf17 true};\par
00713                 tri2.light_intensity[0] = 1;\par
00714                 tri2.light_intensity[1] = 1;\par
00715                 tri2.light_intensity[2] = 1;\par
00716                 tri2.colors[0] = 0xFFFFFFFF;\par
00717                 tri2.colors[1] = 0xFFFFFFFF;\par
00718                 tri2.colors[2] = 0xFFFFFFFF;\par
00719 \par
00720                 ada_appand(Tri, mesh, tri1);\par
00721                 ada_appand(Tri, mesh, tri2);\par
00722                 {\cf20 // AE_PRINT_TRI(tri1);}\par
00723                 {\cf20 // AE_PRINT_TRI(tri2);}\par
00724             \}\par
00725             {\cf20 // exit(2);}\par
00726         \}\par
00727     \}\par
00728     \par
00729     {\cf19 return} mesh;\par
00730 \}\par
00731 \par
00743 Tri_mesh ae_tri_mesh_get_from_stl_file({\cf18 char} *file_path)\par
00744 \{\par
00745     FILE *file;\par
00746     file = fopen(file_path, {\cf22 "rb"});\par
00747     {\cf19 if} (file == NULL) \{\par
00748         fprintf(stderr, {\cf22 "%s:%d: [Error] failed to open input file: '%s', %s\\n"}, __FILE__, __LINE__, file_path, strerror(errno));\par
00749         exit(1);\par
00750     \}\par
00751 \par
00752     {\cf18 char} header[STL_HEADER_SIZE];\par
00753     fread(header, STL_HEADER_SIZE, 1, file);\par
00754     {\cf20 // dprintSTRING(header);}\par
00755 \par
00756     uint32_t num_of_tri;\par
00757     fread(&num_of_tri, STL_NUM_SIZE, 1, file);\par
00758     {\cf20 // dprintINT(num_of_tri);}\par
00759 \par
00760     Tri_mesh mesh;\par
00761     ada_init_array(Tri, mesh);\par
00762     {\cf19 for} ({\cf18 size_t} i = 0; i < num_of_tri; i++) \{\par
00763         Tri temp_tri = \{0\};\par
00764 \par
00765         fread(&(temp_tri.normals[0].x), STL_NUM_SIZE, 1, file);\par
00766         fread(&(temp_tri.normals[0].y), STL_NUM_SIZE, 1, file);\par
00767         fread(&(temp_tri.normals[0].z), STL_NUM_SIZE, 1, file);\par
00768 \par
00769         temp_tri.normals[0].x = - temp_tri.normals[0].x;\par
00770         temp_tri.normals[0].y = - temp_tri.normals[0].y;\par
00771         temp_tri.normals[0].z = - temp_tri.normals[0].z;\par
00772 \par
00773         temp_tri.normals[1] = temp_tri.normals[0];\par
00774         temp_tri.normals[2] = temp_tri.normals[0];\par
00775 \par
00776         fread(&(temp_tri.points[0].x), STL_NUM_SIZE, 1, file);\par
00777         fread(&(temp_tri.points[0].y), STL_NUM_SIZE, 1, file);\par
00778         fread(&(temp_tri.points[0].z), STL_NUM_SIZE, 1, file);\par
00779 \par
00780         fread(&(temp_tri.points[1].x), STL_NUM_SIZE, 1, file);\par
00781         fread(&(temp_tri.points[1].y), STL_NUM_SIZE, 1, file);\par
00782         fread(&(temp_tri.points[1].z), STL_NUM_SIZE, 1, file);\par
00783         \par
00784         fread(&(temp_tri.points[2].x), STL_NUM_SIZE, 1, file);\par
00785         fread(&(temp_tri.points[2].y), STL_NUM_SIZE, 1, file);\par
00786         fread(&(temp_tri.points[2].z), STL_NUM_SIZE, 1, file);\par
00787 \par
00788         fseek(file, STL_ATTRIBUTE_BITS_SIZE, SEEK_CUR);\par
00789 \par
00790         temp_tri.to_draw = {\cf17 true};\par
00791         temp_tri.light_intensity[0] = 1;\par
00792         temp_tri.light_intensity[1] = 1;\par
00793         temp_tri.light_intensity[2] = 1;\par
00794         temp_tri.colors[0] = 0xFFFFFFFF;\par
00795         temp_tri.colors[1] = 0xFFFFFFFF;\par
00796         temp_tri.colors[2] = 0xFFFFFFFF;\par
00797 \par
00798         {\cf20 // ae_tri_set_normals(&temp_tri);}\par
00799 \par
00800         ada_appand(Tri, mesh, temp_tri);\par
00801     \}\par
00802 \par
00803     {\cf19 return} mesh;\par
00804 \}\par
00805 \par
00816 Tri_mesh ae_tri_mesh_get_from_file({\cf18 char} *file_path)\par
00817 \{\par
00818     {\cf18 char} file_extention[ASM_MAX_LEN_LINE], temp_word[ASM_MAX_LEN_LINE];\par
00819 \par
00820     strncpy(file_extention, file_path, ASM_MAX_LEN_LINE);\par
00821 \par
00822     {\cf18 int} num_of_dots;\par
00823     {\cf19 while} ((num_of_dots = asm_str_in_str(file_extention, {\cf22 "."})) >= 1) \{\par
00824         asm_get_word_and_cut(temp_word, file_extention, {\cf23 '.'});\par
00825     \}\par
00826 \par
00827     {\cf19 if} (!(!strncmp(file_extention, {\cf22 "obj"}, 3) || !strncmp(file_extention, {\cf22 "STL"}, 3) || !strncmp(file_extention, {\cf22 "stl"}, 3))) \{\par
00828         fprintf(stderr, {\cf22 "%s:%d: [Error] unsupported file format: '%s'\\n"}, __FILE__, __LINE__, file_path);\par
00829         exit(1);\par
00830     \}\par
00831 \par
00832     {\cf19 if} (!strncmp(file_extention, {\cf22 "STL"}, 3) || !strncmp(file_extention, {\cf22 "stl"}, 3)) \{\par
00833         {\cf19 return} ae_tri_mesh_get_from_stl_file(file_path);\par
00834     \} {\cf19 else} {\cf19 if} (!strncmp(file_extention, {\cf22 "obj"}, 3)) \{\par
00835         {\cf19 return} ae_tri_mesh_get_from_obj_file(file_path);\par
00836     \}\par
00837     \par
00838     Tri_mesh null_mesh = \{0\};\par
00839     {\cf19 return} null_mesh;\par
00840 \}\par
00841 \par
00851 {\cf18 void} ae_tri_mesh_appand_copy(Tri_mesh_array *mesh_array, Tri_mesh mesh)\par
00852 \{\par
00853     Tri_mesh_array temp_mesh_array = *mesh_array;\par
00854     Tri_mesh temp_mesh;\par
00855     ada_init_array(Tri, temp_mesh);\par
00856     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
00857         ada_appand(Tri, temp_mesh, mesh.elements[i]);\par
00858     \}\par
00859     ada_appand(Tri_mesh, temp_mesh_array, temp_mesh);\par
00860 \par
00861 \par
00862     *mesh_array = temp_mesh_array;\par
00863 \}\par
00864 \par
00875 Tri_mesh ae_tri_mesh_get_from_quad_mesh(Quad_mesh q_mesh)\par
00876 \{\par
00877     Tri_mesh t_mesh;\par
00878     ada_init_array(Tri, t_mesh);\par
00879 \par
00880     {\cf19 for} ({\cf18 size_t} q_index = 0; q_index < q_mesh.length; q_index++) \{\par
00881         Quad current_q = q_mesh.elements[q_index];\par
00882         Tri temp_t = \{.to_draw = current_q.to_draw\};\par
00883 \par
00884         temp_t.points[0] = current_q.points[0];\par
00885         temp_t.colors[0] = current_q.colors[0];\par
00886         temp_t.normals[0] = current_q.normals[0];\par
00887         temp_t.light_intensity[0] = current_q.light_intensity[0];\par
00888         temp_t.points[1] = current_q.points[1];\par
00889         temp_t.colors[1] = current_q.colors[1];\par
00890         temp_t.normals[1] = current_q.normals[1];\par
00891         temp_t.light_intensity[1] = current_q.light_intensity[1];\par
00892         temp_t.points[2] = current_q.points[2];\par
00893         temp_t.colors[2] = current_q.colors[2];\par
00894         temp_t.normals[2] = current_q.normals[2];\par
00895         temp_t.light_intensity[2] = current_q.light_intensity[2];\par
00896 \par
00897         ada_appand(Tri, t_mesh, temp_t);\par
00898 \par
00899         temp_t.points[0] = current_q.points[2];\par
00900         temp_t.colors[0] = current_q.colors[2];\par
00901         temp_t.normals[0] = current_q.normals[2];\par
00902         temp_t.light_intensity[0] = current_q.light_intensity[2];\par
00903         temp_t.points[1] = current_q.points[3];\par
00904         temp_t.colors[1] = current_q.colors[3];\par
00905         temp_t.normals[1] = current_q.normals[3];\par
00906         temp_t.light_intensity[1] = current_q.light_intensity[3];\par
00907         temp_t.points[2] = current_q.points[0];\par
00908         temp_t.colors[2] = current_q.colors[0];\par
00909         temp_t.normals[2] = current_q.normals[0];\par
00910         temp_t.light_intensity[2] = current_q.light_intensity[0];\par
00911 \par
00912         ada_appand(Tri, t_mesh, temp_t);\par
00913     \}\par
00914 \par
00915     {\cf19 return} t_mesh;\par
00916 \}\par
00917 \par
00925 {\cf18 void} ae_print_points(Curve p)\par
00926 \{\par
00927     {\cf19 for} ({\cf18 size_t} i = 0; i < p.length; i++) \{\par
00928         printf({\cf22 "point %3zu: (%5f, %5f, %5f)\\n"}, i, p.elements[i].x, p.elements[i].y, p.elements[i].z);\par
00929     \}\par
00930 \}\par
00931 \par
00942 {\cf18 void} ae_print_tri(Tri tri, {\cf18 char} *name, {\cf18 size_t} padding)\par
00943 \{\par
00944     printf({\cf22 "%*s%s:\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
00945     printf({\cf22 "%*s    (%f, %f, %f)\\n%*s    (%f, %f, %f)\\n%*s    (%f, %f, %f)\\n"}, ({\cf18 int}) padding, {\cf22 ""}, tri.points[0].x, tri.points[0].y, tri.points[0].z, ({\cf18 int}) padding, {\cf22 ""}, tri.points[1].x, tri.points[1].y, tri.points[1].z, ({\cf18 int}) padding, {\cf22 ""}, tri.points[2].x, tri.points[2].y, tri.points[2].z);\par
00946     printf({\cf22 "%*s    draw? %d\\n"}, ({\cf18 int})padding, {\cf22 ""}, tri.to_draw);\par
00947 \}\par
00948 \par
00958 {\cf18 void} ae_print_tri_mesh(Tri_mesh mesh, {\cf18 char} *name, {\cf18 size_t} padding)\par
00959 \{\par
00960     {\cf18 char} tri_name[256];\par
00961     printf({\cf22 "%*s%s:\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
00962     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
00963         snprintf(tri_name, 256, {\cf22 "tri %zu"}, i);\par
00964         ae_print_tri(mesh.elements[i], tri_name, 4);\par
00965     \}\par
00966 \}\par
00967 \par
00976 Point ae_point_normalize_xyz(Point p)\par
00977 \{\par
00978     Point res = \{0\};\par
00979 \par
00980     {\cf18 float} norma = ae_point_calc_norma(p);\par
00981 \par
00982     res.x = p.x / norma;\par
00983     res.y = p.y / norma;\par
00984     res.z = p.z / norma;\par
00985     res.w = p.w;\par
00986 \par
00987     {\cf19 return} res;\par
00988 \}\par
00989 \par
00998 {\cf18 void} ae_tri_set_normals(Tri *tri)\par
00999 \{\par
01000     ae_assert_tri_is_valid(*tri);\par
01001 \par
01002     Mat2D point  = mat2D_alloc(3, 1);\par
01003     Mat2D to_p   = mat2D_alloc(3, 1);\par
01004     Mat2D from_p = mat2D_alloc(3, 1);\par
01005     Mat2D normal = mat2D_alloc(3, 1);\par
01006 \par
01007     {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
01008         {\cf18 int} current_index  = i;\par
01009         {\cf18 int} next_index     = (i + 1) % 3;\par
01010         {\cf18 int} previous_index = (i - 1 + 3) % 3;\par
01011         ae_point_to_mat2D(tri->points[current_index], point);\par
01012         ae_point_to_mat2D(tri->points[next_index], from_p);\par
01013         ae_point_to_mat2D(tri->points[previous_index], to_p);\par
01014 \par
01015         mat2D_sub(from_p, point);\par
01016         mat2D_sub(point, to_p);\par
01017 \par
01018         mat2D_copy(to_p, point);\par
01019 \par
01020         mat2D_cross(normal, to_p, from_p);\par
01021         {\cf20 // mat2D_cross(normal, from_p, to_p);}\par
01022         mat2D_normalize(normal);\par
01023 \par
01024         tri->normals[current_index] = ae_mat2D_to_point(normal);\par
01025     \}\par
01026 \par
01027     mat2D_free(point);\par
01028     mat2D_free(to_p);\par
01029     mat2D_free(from_p);\par
01030     mat2D_free(normal);\par
01031 \}\par
01032 \par
01041 Point ae_tri_get_average_normal(Tri tri)\par
01042 \{\par
01043     Point normal0 = tri.normals[0];\par
01044     Point normal1 = tri.normals[1];\par
01045     Point normal2 = tri.normals[2];\par
01046 \par
01047     Point res;\par
01048     res.x = (normal0.x + normal1.x + normal2.x) / 3;\par
01049     res.y = (normal0.y + normal1.y + normal2.y) / 3;\par
01050     res.z = (normal0.z + normal1.z + normal2.z) / 3;\par
01051     res.w = (normal0.w + normal1.w + normal2.w) / 3;\par
01052 \par
01053     {\cf19 return} ae_point_normalize_xyz(res);\par
01054 \}\par
01055 \par
01062 Point ae_tri_get_average_point(Tri tri)\par
01063 \{\par
01064     Point point0 = tri.points[0];\par
01065     Point point1 = tri.points[1];\par
01066     Point point2 = tri.points[2];\par
01067 \par
01068     Point res;\par
01069     res.x = (point0.x + point1.x + point2.x) / 3;\par
01070     res.y = (point0.y + point1.y + point2.y) / 3;\par
01071     res.z = (point0.z + point1.z + point2.z) / 3;\par
01072     res.w = (point0.w + point1.w + point2.w) / 3;\par
01073 \par
01074     {\cf19 return} res;\par
01075 \}\par
01076 \par
01086 {\cf18 void} ae_tri_calc_normal(Mat2D normal, Tri tri)\par
01087 \{\par
01088     AE_ASSERT(3 == normal.rows && 1 == normal.cols);\par
01089     ae_assert_tri_is_valid(tri);\par
01090 \par
01091     Mat2D a = mat2D_alloc(3, 1);\par
01092     Mat2D b = mat2D_alloc(3, 1);\par
01093     Mat2D c = mat2D_alloc(3, 1);\par
01094 \par
01095     ae_point_to_mat2D(tri.points[0], a);\par
01096     ae_point_to_mat2D(tri.points[1], b);\par
01097     ae_point_to_mat2D(tri.points[2], c);\par
01098 \par
01099     mat2D_sub(b, a);\par
01100     mat2D_sub(c, a);\par
01101 \par
01102     mat2D_cross(normal, b, c);\par
01103 \par
01104     mat2D_mult(normal, 1/mat2D_calc_norma(normal));\par
01105 \par
01106     mat2D_free(a);\par
01107     mat2D_free(b);\par
01108     mat2D_free(c);\par
01109 \}\par
01110 \par
01121 {\cf18 void} ae_tri_mesh_translate(Tri_mesh mesh, {\cf18 float} x, {\cf18 float} y, {\cf18 float} z)\par
01122 \{\par
01123     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01124         {\cf19 for} ({\cf18 int} j = 0; j < 3; j++) \{\par
01125             mesh.elements[i].points[j].x += x;\par
01126             mesh.elements[i].points[j].y += y;\par
01127             mesh.elements[i].points[j].z += z;\par
01128         \}\par
01129     \}\par
01130 \}\par
01131 \par
01143 {\cf18 void} ae_tri_mesh_rotate_Euler_xyz(Tri_mesh mesh, {\cf18 float} phi_deg, {\cf18 float} theta_deg, {\cf18 float} psi_deg)\par
01144 \{\par
01145     Mat2D RotZ = mat2D_alloc(3,3);\par
01146     mat2D_set_rot_mat_z(RotZ, psi_deg);\par
01147     Mat2D RotY = mat2D_alloc(3,3);\par
01148     mat2D_set_rot_mat_y(RotY, theta_deg);\par
01149     Mat2D RotX = mat2D_alloc(3,3);\par
01150     mat2D_set_rot_mat_x(RotX, phi_deg);\par
01151     Mat2D DCM = mat2D_alloc(3,3);\par
01152     {\cf20 // mat2D_fill(DCM,0);}\par
01153     Mat2D temp = mat2D_alloc(3,3);\par
01154     {\cf20 // mat2D_fill(temp,0);}\par
01155     mat2D_dot(temp, RotY, RotZ);\par
01156     mat2D_dot(DCM, RotX, temp); {\cf20 /* I have a DCM */}\par
01157 \par
01158     Mat2D src_point_mat = mat2D_alloc(3,1);\par
01159     Mat2D des_point_mat = mat2D_alloc(3,1);\par
01160 \par
01161     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01162         {\cf19 for} ({\cf18 int} j = 0; j < 3; j++) \{\par
01163             {\cf20 // mat2D_fill(src_point_mat, 0);}\par
01164             {\cf20 // mat2D_fill(des_point_mat, 0);}\par
01165             Point des;\par
01166             Point src = mesh.elements[i].points[j];\par
01167 \par
01168             MAT2D_AT(src_point_mat, 0, 0) = src.x;\par
01169             MAT2D_AT(src_point_mat, 1, 0) = src.y;\par
01170             MAT2D_AT(src_point_mat, 2, 0) = src.z;\par
01171 \par
01172             mat2D_dot(des_point_mat, DCM, src_point_mat);\par
01173 \par
01174             des.x = MAT2D_AT(des_point_mat, 0, 0);\par
01175             des.y = MAT2D_AT(des_point_mat, 1, 0);\par
01176             des.z = MAT2D_AT(des_point_mat, 2, 0);\par
01177 \par
01178             mesh.elements[i].points[j] = des;\par
01179         \}\par
01180     \}\par
01181 \par
01182     ae_tri_mesh_set_normals(mesh);\par
01183 \par
01184     mat2D_free(RotZ);\par
01185     mat2D_free(RotY);\par
01186     mat2D_free(RotX);\par
01187     mat2D_free(DCM);\par
01188     mat2D_free(temp);\par
01189     mat2D_free(src_point_mat);\par
01190     mat2D_free(des_point_mat);\par
01191 \}\par
01192 \par
01206 {\cf18 void} ae_tri_mesh_set_bounding_box(Tri_mesh mesh, {\cf18 float} *x_min, {\cf18 float} *x_max, {\cf18 float} *y_min, {\cf18 float} *y_max, {\cf18 float} *z_min, {\cf18 float} *z_max)\par
01207 \{\par
01208     {\cf18 float} xmin = FLT_MAX, xmax = FLT_MIN;\par
01209     {\cf18 float} ymin = FLT_MAX, ymax = FLT_MIN;\par
01210     {\cf18 float} zmin = FLT_MAX, zmax = FLT_MIN;\par
01211 \par
01212     {\cf18 float} x, y, z;\par
01213 \par
01214     {\cf19 for} ({\cf18 size_t} t = 0; t < mesh.length; t++) \{\par
01215         {\cf19 for} ({\cf18 size_t} p = 0; p < 3; p++) \{\par
01216             x = mesh.elements[t].points[p].x;\par
01217             y = mesh.elements[t].points[p].y;\par
01218             z = mesh.elements[t].points[p].z;\par
01219             {\cf19 if} (x > xmax) xmax = x;\par
01220             {\cf19 if} (x < xmin) xmin = x;\par
01221             {\cf19 if} (y > ymax) ymax = y;\par
01222             {\cf19 if} (y < ymin) ymin = y;\par
01223             {\cf19 if} (z > zmax) zmax = z;\par
01224             {\cf19 if} (z < zmin) zmin = z;\par
01225         \}\par
01226     \}\par
01227     *x_min = xmin;\par
01228     *x_max = xmax; \par
01229     *y_min = ymin;\par
01230     *y_max = ymax;\par
01231     *z_min = zmin;\par
01232     *z_max = zmax;\par
01233 \}\par
01234 \par
01244 {\cf18 void} ae_tri_mesh_normalize(Tri_mesh mesh)\par
01245 \{\par
01246     {\cf18 float} xmax, xmin, ymax, ymin, zmax, zmin;\par
01247     ae_tri_mesh_set_bounding_box(mesh, &xmin, &xmax, &ymin, &ymax, &zmin, &zmax);\par
01248 \par
01249     {\cf19 for} ({\cf18 size_t} t = 0; t < mesh.length; t++) \{\par
01250         {\cf19 for} ({\cf18 size_t} p = 0; p < 3; p++) \{\par
01251             {\cf18 float} x, y, z;\par
01252             x = mesh.elements[t].points[p].x;\par
01253             y = mesh.elements[t].points[p].y;\par
01254             z = mesh.elements[t].points[p].z;\par
01255 \par
01256             {\cf18 float} xdiff = xmax-xmin;\par
01257             {\cf18 float} ydiff = ymax-ymin;\par
01258             {\cf18 float} zdiff = zmax-zmin;\par
01259             {\cf18 float} max_diff = fmax(xdiff, fmax(ydiff, zdiff));\par
01260             {\cf18 float} xfactor = xdiff/max_diff;\par
01261             {\cf18 float} yfactor = ydiff/max_diff;\par
01262             {\cf18 float} zfactor = zdiff/max_diff;\par
01263 \par
01264             x = (((x - xmin) / (xdiff)) * 2 - 1) * xfactor;\par
01265             y = (((y - ymin) / (ydiff)) * 2 - 1) * yfactor;\par
01266             z = (((z - zmin) / (zdiff)) * 2 - 1) * zfactor;\par
01267 \par
01268             mesh.elements[t].points[p].x = x;\par
01269             mesh.elements[t].points[p].y = y;\par
01270             mesh.elements[t].points[p].z = z;\par
01271         \}\par
01272     \}\par
01273 \}\par
01274 \par
01283 {\cf18 void} ae_tri_mesh_flip_normals(Tri_mesh mesh)\par
01284 \{\par
01285     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01286         Tri res_tri, tri = mesh.elements[i];\par
01287 \par
01288         res_tri.to_draw = tri.to_draw;\par
01289 \par
01290         res_tri.colors[0]          = tri.colors[2];\par
01291         res_tri.light_intensity[0] = tri.light_intensity[2];\par
01292         res_tri.normals[0]         = tri.normals[2];\par
01293         res_tri.points[0]          = tri.points[2];\par
01294         res_tri.tex_points[0]      = tri.tex_points[2];\par
01295 \par
01296         res_tri.colors[1]          = tri.colors[1];\par
01297         res_tri.light_intensity[1] = tri.light_intensity[1];\par
01298         res_tri.normals[1]         = tri.normals[1];\par
01299         res_tri.points[1]          = tri.points[1];\par
01300         res_tri.tex_points[1]      = tri.tex_points[1];\par
01301 \par
01302         res_tri.colors[2]          = tri.colors[0];\par
01303         res_tri.light_intensity[2] = tri.light_intensity[0];\par
01304         res_tri.normals[2]         = tri.normals[0];\par
01305         res_tri.points[2]          = tri.points[0];\par
01306         res_tri.tex_points[2]      = tri.tex_points[0];\par
01307 \par
01308         ae_tri_set_normals(&res_tri);\par
01309 \par
01310         mesh.elements[i] = res_tri;\par
01311     \}\par
01312 \}\par
01313 \par
01321 {\cf18 void} ae_tri_mesh_set_normals(Tri_mesh mesh)\par
01322 \{\par
01323     {\cf19 for} ({\cf18 size_t} i = 0; i < mesh.length; i++) \{\par
01324         ae_tri_set_normals(&(mesh.elements[i]));\par
01325     \}\par
01326 \}\par
01327 \par
01336 {\cf18 void} ae_quad_set_normals(Quad *quad)\par
01337 \{\par
01338     ae_assert_quad_is_valid(*quad);\par
01339 \par
01340     Mat2D point  = mat2D_alloc(3, 1);\par
01341     Mat2D to_p   = mat2D_alloc(3, 1);\par
01342     Mat2D from_p = mat2D_alloc(3, 1);\par
01343     Mat2D normal = mat2D_alloc(3, 1);\par
01344 \par
01345     {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
01346         {\cf18 int} current_index  = i;\par
01347         {\cf18 int} next_index     = (i + 1) % 4;\par
01348         {\cf18 int} previous_index = (i - 1 + 4) % 4;\par
01349         ae_point_to_mat2D(quad->points[current_index], point);\par
01350         ae_point_to_mat2D(quad->points[next_index], from_p);\par
01351         ae_point_to_mat2D(quad->points[previous_index], to_p);\par
01352 \par
01353         mat2D_sub(from_p, point);\par
01354         mat2D_sub(point, to_p);\par
01355 \par
01356         mat2D_copy(to_p, point);\par
01357 \par
01358         mat2D_cross(normal, to_p, from_p);\par
01359         mat2D_normalize(normal);\par
01360 \par
01361         quad->normals[current_index] = ae_mat2D_to_point(normal);\par
01362     \}\par
01363 \par
01364     mat2D_free(point);\par
01365     mat2D_free(to_p);\par
01366     mat2D_free(from_p);\par
01367     mat2D_free(normal);\par
01368 \par
01369 \}\par
01370 \par
01379 Point ae_quad_get_average_normal(Quad quad)\par
01380 \{\par
01381     Point normal0 = quad.normals[0];\par
01382     Point normal1 = quad.normals[1];\par
01383     Point normal2 = quad.normals[2];\par
01384     Point normal3 = quad.normals[3];\par
01385 \par
01386     Point res;\par
01387     res.x = (normal0.x + normal1.x + normal2.x + normal3.x) / 4;\par
01388     res.y = (normal0.y + normal1.y + normal2.y + normal3.y) / 4;\par
01389     res.z = (normal0.z + normal1.z + normal2.z + normal3.z) / 4;\par
01390     res.w = (normal0.w + normal1.w + normal2.w + normal3.w) / 4;\par
01391 \par
01392     res = ae_point_normalize_xyz(res);\par
01393 \par
01394     {\cf19 return} res;\par
01395 \}\par
01396 \par
01403 Point ae_quad_get_average_point(Quad quad)\par
01404 \{\par
01405     Point point0 = quad.points[0];\par
01406     Point point1 = quad.points[1];\par
01407     Point point2 = quad.points[2];\par
01408     Point point3 = quad.points[3];\par
01409 \par
01410     Point res;\par
01411     res.x = (point0.x + point1.x + point2.x + point3.x) / 4;\par
01412     res.y = (point0.y + point1.y + point2.y + point3.y) / 4;\par
01413     res.z = (point0.z + point1.z + point2.z + point3.z) / 4;\par
01414     res.w = (point0.w + point1.w + point2.w + point3.w) / 4;\par
01415 \par
01416     {\cf19 return} res;\par
01417 \}\par
01418 \par
01428 {\cf18 void} ae_quad_calc_normal(Mat2D normal, Quad quad)\par
01429 \{\par
01430     AE_ASSERT(3 == normal.rows && 1 == normal.cols);\par
01431     ae_assert_quad_is_valid(quad);\par
01432 \par
01433     Mat2D a = mat2D_alloc(3, 1);\par
01434     Mat2D b = mat2D_alloc(3, 1);\par
01435     Mat2D c = mat2D_alloc(3, 1);\par
01436 \par
01437     ae_point_to_mat2D(quad.points[0], a);\par
01438     ae_point_to_mat2D(quad.points[1], b);\par
01439     ae_point_to_mat2D(quad.points[2], c);\par
01440 \par
01441     mat2D_sub(b, a);\par
01442     mat2D_sub(c, a);\par
01443 \par
01444     mat2D_cross(normal, b, c);\par
01445 \par
01446     mat2D_mult(normal, 1/mat2D_calc_norma(normal));\par
01447 \par
01448     mat2D_free(a);\par
01449     mat2D_free(b);\par
01450     mat2D_free(c);\par
01451 \}\par
01452 \par
01461 {\cf18 void} ae_curve_copy(Curve *des, Curve src)\par
01462 \{\par
01463     Curve temp_des = *des;\par
01464     temp_des.length = 0;\par
01465 \par
01466     {\cf19 for} ({\cf18 size_t} i = 0; i < src.length; i++) \{\par
01467         ada_appand(Point, temp_des, src.elements[i]);\par
01468     \}\par
01469 \par
01470     *des = temp_des;\par
01471 \}\par
01472 \par
01487 {\cf18 void} ae_tri_calc_light_intensity(Tri *tri, Scene *scene, Lighting_mode lighting_mode)\par
01488 \{\par
01489     {\cf20 /* based on the lighting model described in: 'Alexandru C. Telea-Data Visualization_ Principles and Practice-A K Peters_CRC Press (2014)' Pg.29 */}\par
01490     Point L = \{0\};\par
01491     Point r = \{0\};\par
01492     Point v = \{0\};\par
01493     Point mL = \{0\};\par
01494     Point pml = \{0\};\par
01495     Point mLn2n = \{0\};\par
01496     Point ave_norm = ae_tri_get_average_normal(*tri);\par
01497     Point camera_pos = ae_mat2D_to_point(scene->camera.current_position);\par
01498 \par
01499     {\cf18 float} c_ambi = scene->material0.c_ambi;\par
01500     {\cf18 float} c_diff = scene->material0.c_diff;\par
01501     {\cf18 float} c_spec = scene->material0.c_spec;\par
01502     {\cf18 float} alpha  = scene->material0.specular_power_alpha;\par
01503 \par
01504     {\cf19 switch} (lighting_mode) \{\par
01505     {\cf19 case} AE_LIGHTING_FLAT:\par
01506         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
01507             {\cf19 if} (scene->light_source0.light_direction_or_pos.w == 0) \{\par
01508                 L = scene->light_source0.light_direction_or_pos;\par
01509                 L = ae_point_normalize_xyz(L);\par
01510                 mL = L;\par
01511                 ae_point_mult(mL, -1);\par
01512             \} {\cf19 else} \{\par
01513                 Point l = scene->light_source0.light_direction_or_pos;\par
01514                 Point p = tri->points[i];\par
01515                 ae_point_sub_point(pml, p, l);\par
01516                 pml = ae_point_normalize_xyz(pml);\par
01517                 L = pml;\par
01518                 L.w = 0;\par
01519                 mL = L;\par
01520                 ae_point_mult(mL, -1);\par
01521             \}\par
01522             \par
01523             ae_point_sub_point(v, camera_pos, ae_tri_get_average_point(*tri));\par
01524             {\cf18 float} mL_dot_norm = ae_point_dot_point(mL, ave_norm);\par
01525             mLn2n = ave_norm;\par
01526             ae_point_mult(mLn2n, 2 * mL_dot_norm);\par
01527             ae_point_add_point(r, L, mLn2n);\par
01528             \par
01529             tri->light_intensity[i] = c_ambi + scene->light_source0.light_intensity * (c_diff * fmaxf(mL_dot_norm, 0) + c_spec * powf(fmaxf(ae_point_dot_point(r, v), 0), alpha));\par
01530         \}\par
01531         {\cf19 break};\par
01532     {\cf19 case} AE_LIGHTING_SMOOTH:\par
01533         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
01534             {\cf19 if} (scene->light_source0.light_direction_or_pos.w == 0) \{\par
01535                 L = scene->light_source0.light_direction_or_pos;\par
01536                 L = ae_point_normalize_xyz(L);\par
01537                 mL = L;\par
01538                 ae_point_mult(mL, -1);\par
01539             \} {\cf19 else} \{\par
01540                 Point l = scene->light_source0.light_direction_or_pos;\par
01541                 Point p = tri->points[i];\par
01542                 ae_point_sub_point(pml, p, l);\par
01543                 pml = ae_point_normalize_xyz(pml);\par
01544                 L = pml;\par
01545                 L.w = 0;\par
01546                 mL = L;\par
01547                 ae_point_mult(mL, -1);\par
01548             \}\par
01549             ae_point_sub_point(v, camera_pos, tri->points[i]);\par
01550             {\cf18 float} mL_dot_norm = ae_point_dot_point(mL, tri->normals[i]);\par
01551             mLn2n = tri->normals[i];\par
01552             ae_point_mult(mLn2n, 2 * mL_dot_norm);\par
01553             ae_point_add_point(r, L, mLn2n);\par
01554             \par
01555             tri->light_intensity[i] = c_ambi + scene->light_source0.light_intensity * (c_diff * fmaxf(mL_dot_norm, 0) + c_spec * powf(fmaxf(ae_point_dot_point(r, v), 0), alpha));\par
01556         \}\par
01557         {\cf19 break};\par
01558     {\cf19 default}:\par
01559         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
01560             tri->light_intensity[i] = 1;\par
01561         \}\par
01562         {\cf19 break};\par
01563     \}\par
01564 \par
01565     {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
01566         tri->light_intensity[i] = fminf(1, fmaxf(0, tri->light_intensity[i]));\par
01567     \}\par
01568 \}\par
01569 \par
01580 {\cf18 void} ae_quad_calc_light_intensity(Quad *quad, Scene *scene, Lighting_mode lighting_mode)\par
01581 \{\par
01582     {\cf20 /* based on the lighting model described in: 'Alexandru C. Telea-Data Visualization_ Principles and Practice-A K Peters_CRC Press (2014)' Pg.29 */}\par
01583     Point L = \{0\};\par
01584     Point r = \{0\};\par
01585     Point v = \{0\};\par
01586     Point mL = \{0\};\par
01587     Point pml = \{0\};\par
01588     Point mLn2n = \{0\};\par
01589     Point ave_norm = ae_quad_get_average_normal(*quad);\par
01590     Point camera_pos = ae_mat2D_to_point(scene->camera.current_position);\par
01591 \par
01592     {\cf18 float} c_ambi = scene->material0.c_ambi;\par
01593     {\cf18 float} c_diff = scene->material0.c_diff;\par
01594     {\cf18 float} c_spec = scene->material0.c_spec;\par
01595     {\cf18 float} alpha  = scene->material0.specular_power_alpha;\par
01596 \par
01597     {\cf19 switch} (lighting_mode) \{\par
01598     {\cf19 case} AE_LIGHTING_FLAT:\par
01599         {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
01600             {\cf19 if} (scene->light_source0.light_direction_or_pos.w == 0) \{\par
01601                 L = scene->light_source0.light_direction_or_pos;\par
01602                 L = ae_point_normalize_xyz(L);\par
01603                 mL = L;\par
01604                 ae_point_mult(mL, -1);\par
01605             \} {\cf19 else} \{\par
01606                 Point l = scene->light_source0.light_direction_or_pos;\par
01607                 Point p = quad->points[i];\par
01608                 ae_point_sub_point(pml, p, l);\par
01609                 pml = ae_point_normalize_xyz(pml);\par
01610                 L = pml;\par
01611                 L.w = 0;\par
01612                 mL = L;\par
01613                 ae_point_mult(mL, -1);\par
01614             \}\par
01615             \par
01616             ae_point_sub_point(v, camera_pos, ae_quad_get_average_point(*quad));\par
01617             {\cf18 float} mL_dot_norm = ae_point_dot_point(mL, ave_norm);\par
01618             mLn2n = ave_norm;\par
01619             ae_point_mult(mLn2n, 2 * mL_dot_norm);\par
01620             ae_point_add_point(r, L, mLn2n);\par
01621             \par
01622             quad->light_intensity[i] = c_ambi + scene->light_source0.light_intensity * (c_diff * fmaxf(mL_dot_norm, 0) + c_spec * powf(fmaxf(ae_point_dot_point(r, v), 0), alpha));\par
01623         \}\par
01624         {\cf19 break};\par
01625     {\cf19 case} AE_LIGHTING_SMOOTH:\par
01626         {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
01627             {\cf19 if} (scene->light_source0.light_direction_or_pos.w == 0) \{\par
01628                 L = scene->light_source0.light_direction_or_pos;\par
01629                 L = ae_point_normalize_xyz(L);\par
01630                 mL = L;\par
01631                 ae_point_mult(mL, -1);\par
01632             \} {\cf19 else} \{\par
01633                 Point l = scene->light_source0.light_direction_or_pos;\par
01634                 Point p = quad->points[i];\par
01635                 ae_point_sub_point(pml, p, l);\par
01636                 pml = ae_point_normalize_xyz(pml);\par
01637                 L = pml;\par
01638                 L.w = 0;\par
01639                 mL = L;\par
01640                 ae_point_mult(mL, -1);\par
01641             \}\par
01642             ae_point_sub_point(v, camera_pos, quad->points[i]);\par
01643             {\cf18 float} mL_dot_norm = ae_point_dot_point(mL, quad->normals[i]);\par
01644             mLn2n = quad->normals[i];\par
01645             ae_point_mult(mLn2n, 2 * mL_dot_norm);\par
01646             ae_point_add_point(r, L, mLn2n);\par
01647             \par
01648             quad->light_intensity[i] = c_ambi + scene->light_source0.light_intensity * (c_diff * fmaxf(mL_dot_norm, 0) + c_spec * powf(fmaxf(ae_point_dot_point(r, v), 0), alpha));\par
01649         \}\par
01650         {\cf19 break};\par
01651     {\cf19 default}:\par
01652         {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
01653             quad->light_intensity[i] = 1;\par
01654         \}\par
01655         {\cf19 break};\par
01656     \}\par
01657 \par
01658     {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
01659         quad->light_intensity[i] = fminf(1, fmaxf(0, quad->light_intensity[i]));\par
01660     \}\par
01661 \}\par
01662 \par
01680 Point ae_line_itersect_plane(Mat2D plane_p, Mat2D plane_n, Mat2D line_start, Mat2D line_end, {\cf18 float} *t)\par
01681 \{\par
01682     mat2D_normalize(plane_n);\par
01683     {\cf18 float} plane_d = - mat2D_dot_product(plane_n, plane_p);\par
01684     {\cf18 float} ad = mat2D_dot_product(line_start, plane_n);\par
01685     {\cf18 float} bd = mat2D_dot_product(line_end, plane_n);\par
01686     *t  = (- plane_d - ad) / (bd - ad);\par
01687     mat2D_sub(line_end, line_start);\par
01688     Mat2D line_start_to_end = line_end;\par
01689     mat2D_mult(line_start_to_end, *t);\par
01690     Mat2D line_to_intersection = line_start_to_end;\par
01691     \par
01692     Mat2D intersection_p = mat2D_alloc(3, 1);\par
01693     mat2D_fill(intersection_p, 0);\par
01694     mat2D_add(intersection_p, line_start);\par
01695     mat2D_add(intersection_p, line_to_intersection);\par
01696 \par
01697     Point ans_p = ae_mat2D_to_point(intersection_p);\par
01698 \par
01699     mat2D_free(intersection_p);\par
01700 \par
01701     {\cf19 return} ans_p;\par
01702 \}\par
01703 \par
01720 {\cf18 int} ae_line_clip_with_plane(Point start_in, Point end_in, Mat2D plane_p, Mat2D plane_n, Point *start_out, Point *end_out)\par
01721 \{\par
01722     ae_assert_point_is_valid(start_in);\par
01723     ae_assert_point_is_valid(end_in);\par
01724 \par
01725     mat2D_normalize(plane_n);\par
01726 \par
01727     {\cf20 /* if the signed distance is positive, the point lies on the "inside" of the plane */}\par
01728     Point inside_points[2];\par
01729     Point outside_points[2];\par
01730     {\cf18 int} inside_points_count = 0;\par
01731     {\cf18 int} outside_points_count = 0;\par
01732     \par
01733     {\cf20 /* calc signed distance of each point of tri_in */}\par
01734     {\cf18 float} d0 = ae_signed_dist_point_and_plane(start_in, plane_p, plane_n);\par
01735     {\cf18 float} d1 = ae_signed_dist_point_and_plane(end_in, plane_p, plane_n);\par
01736     {\cf18 float} t;\par
01737 \par
01738     {\cf20 // float epsilon = 1e-3;}\par
01739     {\cf18 float} epsilon = 0;\par
01740     {\cf19 if} (d0 >= epsilon) \{\par
01741         inside_points[inside_points_count++] = start_in;\par
01742     \} {\cf19 else} \{\par
01743         outside_points[outside_points_count++] = start_in;\par
01744     \}\par
01745     {\cf19 if} (d1 >= epsilon) \{\par
01746         inside_points[inside_points_count++] = end_in;\par
01747     \} {\cf19 else} \{\par
01748         outside_points[outside_points_count++] = end_in;\par
01749     \}\par
01750 \par
01751     {\cf20 /* classifying the triangle points */}\par
01752     {\cf19 if} (outside_points_count == 2) \{\par
01753         {\cf19 return} 0;\par
01754     \} {\cf19 else} {\cf19 if} (inside_points_count == 2) \{\par
01755         *start_out = start_in;\par
01756         *end_out = end_in;\par
01757         {\cf19 return} 1;\par
01758     \} {\cf19 else} {\cf19 if} (d0 >= epsilon && d1 < epsilon) \{\par
01759         Mat2D line_start = mat2D_alloc(3, 1);\par
01760         Mat2D line_end   = mat2D_alloc(3, 1);\par
01761 \par
01762         *start_out = inside_points[0];\par
01763 \par
01764         ae_point_to_mat2D(inside_points[0], line_start);\par
01765         ae_point_to_mat2D(outside_points[0], line_end);\par
01766         *end_out = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01767 \par
01768         mat2D_free(line_start);\par
01769         mat2D_free(line_end);\par
01770 \par
01771         ae_assert_point_is_valid(*start_out);\par
01772         ae_assert_point_is_valid(*end_out);\par
01773 \par
01774         {\cf19 return} 1;\par
01775     \} {\cf19 else} {\cf19 if} (d1 >= epsilon && d0 < epsilon) \{\par
01776         Mat2D line_start = mat2D_alloc(3, 1);\par
01777         Mat2D line_end   = mat2D_alloc(3, 1);\par
01778 \par
01779         *end_out = inside_points[0];\par
01780 \par
01781         ae_point_to_mat2D(inside_points[0], line_start);\par
01782         ae_point_to_mat2D(outside_points[0], line_end);\par
01783         *start_out = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01784 \par
01785         mat2D_free(line_start);\par
01786         mat2D_free(line_end);\par
01787 \par
01788         ae_assert_point_is_valid(*start_out);\par
01789         ae_assert_point_is_valid(*end_out);\par
01790 \par
01791         {\cf19 return} 1;\par
01792     \}\par
01793     {\cf19 return} -1;\par
01794 \}\par
01795 \par
01807 {\cf18 float} ae_signed_dist_point_and_plane(Point p, Mat2D plane_p, Mat2D plane_n)\par
01808 \{\par
01809     ae_assert_point_is_valid(p);\par
01810 \par
01811     {\cf20 // mat2D_normalize(plane_n);}\par
01812     {\cf20 // Mat2D p_mat2D = mat2D_alloc(3, 1);}\par
01813     {\cf20 // ae_point_to_mat2D(p, p_mat2D);}\par
01814 \par
01815     {\cf20 // float res = mat2D_dot_product(plane_n, p_mat2D) - mat2D_dot_product(plane_n, plane_p); }\par
01816 \par
01817     {\cf18 float} res = MAT2D_AT(plane_n, 0, 0) * p.x + MAT2D_AT(plane_n, 1, 0) * p.y + MAT2D_AT(plane_n, 2, 0) * p.z - (MAT2D_AT(plane_n, 0, 0) * MAT2D_AT(plane_p, 0, 0) + MAT2D_AT(plane_n, 1, 0) * MAT2D_AT(plane_p, 1, 0) + MAT2D_AT(plane_n, 2, 0) * MAT2D_AT(plane_p, 2, 0)); \par
01818 \par
01819     {\cf20 // mat2D_free(p_mat2D);}\par
01820 \par
01821     {\cf19 return} res;\par
01822 \}\par
01823 \par
01838 {\cf18 int} ae_tri_clip_with_plane(Tri tri_in, Mat2D plane_p, Mat2D plane_n, Tri *tri_out1, Tri *tri_out2)\par
01839 \{\par
01840     ae_assert_tri_is_valid(tri_in);\par
01841 \par
01842     mat2D_normalize(plane_n);\par
01843 \par
01844     {\cf20 /* if the signed distance is positive, the point lies on the "inside" of the plane */}\par
01845     Point inside_points[3];\par
01846     Point outside_points[3];\par
01847     {\cf18 int} inside_points_count = 0;\par
01848     {\cf18 int} outside_points_count = 0;\par
01849     Point tex_inside_points[3];\par
01850     Point tex_outside_points[3];\par
01851     {\cf18 int} tex_inside_points_count = 0;\par
01852     {\cf18 int} tex_outside_points_count = 0;\par
01853     \par
01854     {\cf20 /* calc signed distance of each point of tri_in */}\par
01855     {\cf18 float} d0 = ae_signed_dist_point_and_plane(tri_in.points[0], plane_p, plane_n);\par
01856     {\cf18 float} d1 = ae_signed_dist_point_and_plane(tri_in.points[1], plane_p, plane_n);\par
01857     {\cf18 float} d2 = ae_signed_dist_point_and_plane(tri_in.points[2], plane_p, plane_n);\par
01858     {\cf18 float} t;\par
01859 \par
01860     {\cf20 // float epsilon = 1e-3;}\par
01861     {\cf18 float} epsilon = 0;\par
01862     {\cf19 if} (d0 >= epsilon) \{\par
01863         inside_points[inside_points_count++] = tri_in.points[0];\par
01864         tex_inside_points[tex_inside_points_count++] = tri_in.tex_points[0];\par
01865     \} {\cf19 else} \{\par
01866         outside_points[outside_points_count++] = tri_in.points[0];\par
01867         tex_outside_points[tex_outside_points_count++] = tri_in.tex_points[0];\par
01868     \}\par
01869     {\cf19 if} (d1 >= epsilon) \{\par
01870         inside_points[inside_points_count++] = tri_in.points[1];\par
01871         tex_inside_points[tex_inside_points_count++] = tri_in.tex_points[1];\par
01872     \} {\cf19 else} \{\par
01873         outside_points[outside_points_count++] = tri_in.points[1];\par
01874         tex_outside_points[tex_outside_points_count++] = tri_in.tex_points[1];\par
01875     \}\par
01876     {\cf19 if} (d2 >= epsilon) \{\par
01877         inside_points[inside_points_count++] = tri_in.points[2];\par
01878         tex_inside_points[tex_inside_points_count++] = tri_in.tex_points[2];\par
01879     \} {\cf19 else} \{\par
01880         outside_points[outside_points_count++] = tri_in.points[2];\par
01881         tex_outside_points[tex_outside_points_count++] = tri_in.tex_points[2];\par
01882     \}\par
01883 \par
01884     {\cf20 /* classifying the triangle points */}\par
01885     {\cf19 if} (inside_points_count == 0) \{\par
01886         {\cf19 return} 0;\par
01887     \} {\cf19 else} {\cf19 if} (inside_points_count == 3) \{\par
01888         *tri_out1 = tri_in;\par
01889         {\cf19 return} 1;\par
01890     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 2 && d2 >= epsilon) \{\par
01891         Mat2D line_start = mat2D_alloc(3, 1);\par
01892         Mat2D line_end   = mat2D_alloc(3, 1);\par
01893 \par
01894         *tri_out1 = tri_in;\par
01895         {\cf20 // tri_out1->colors[0] = 0xFF0000;}\par
01896         {\cf20 // tri_out1->colors[1] = 0xFF0000;}\par
01897         {\cf20 // tri_out1->colors[2] = 0xFF0000;}\par
01898         \par
01899         (*tri_out1).points[0] = inside_points[0];\par
01900         (*tri_out1).tex_points[0] = tex_inside_points[0];\par
01901 \par
01902         ae_point_to_mat2D(inside_points[0], line_start);\par
01903         ae_point_to_mat2D(outside_points[0], line_end);\par
01904         (*tri_out1).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01905         (*tri_out1).points[1].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
01906         (*tri_out1).tex_points[1].x = t * (tex_outside_points[0].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
01907         (*tri_out1).tex_points[1].y = t * (tex_outside_points[0].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
01908 \par
01909         ae_point_to_mat2D(inside_points[0], line_start);\par
01910         ae_point_to_mat2D(outside_points[1], line_end);\par
01911         (*tri_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01912         (*tri_out1).points[2].w = t * (outside_points[1].w - inside_points[0].w) + inside_points[0].w;\par
01913         (*tri_out1).tex_points[2].x = t * (tex_outside_points[1].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
01914         (*tri_out1).tex_points[2].y = t * (tex_outside_points[1].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
01915 \par
01916         mat2D_free(line_start);\par
01917         mat2D_free(line_end);\par
01918 \par
01919         {\cf20 /* fixing color ordering */}\par
01920         uint32_t temp_color = tri_out1->colors[2]; \par
01921         tri_out1->colors[2] = tri_out1->colors[1];\par
01922         tri_out1->colors[1] = tri_out1->colors[0];\par
01923         tri_out1->colors[0] = temp_color;\par
01924 \par
01925         ae_assert_tri_is_valid(*tri_out1);\par
01926 \par
01927         {\cf19 return} 1;\par
01928     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 2 && d1 >= epsilon) \{\par
01929         Mat2D line_start = mat2D_alloc(3, 1);\par
01930         Mat2D line_end   = mat2D_alloc(3, 1);\par
01931 \par
01932         *tri_out1 = tri_in;\par
01933         {\cf20 // tri_out1->colors[0] = 0xFF0000;}\par
01934         {\cf20 // tri_out1->colors[1] = 0xFF0000;}\par
01935         {\cf20 // tri_out1->colors[2] = 0xFF0000;}\par
01936         \par
01937         (*tri_out1).points[0] = inside_points[0];\par
01938         (*tri_out1).tex_points[0] = tex_inside_points[0];\par
01939 \par
01940         ae_point_to_mat2D(inside_points[0], line_start);\par
01941         ae_point_to_mat2D(outside_points[0], line_end);\par
01942         (*tri_out1).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01943         (*tri_out1).points[1].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
01944         (*tri_out1).tex_points[1].x = t * (tex_outside_points[0].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
01945         (*tri_out1).tex_points[1].y = t * (tex_outside_points[0].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
01946 \par
01947         ae_point_to_mat2D(inside_points[0], line_start);\par
01948         ae_point_to_mat2D(outside_points[1], line_end);\par
01949         (*tri_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01950         (*tri_out1).points[2].w = t * (outside_points[1].w - inside_points[0].w) + inside_points[0].w;\par
01951         (*tri_out1).tex_points[2].x = t * (tex_outside_points[1].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
01952         (*tri_out1).tex_points[2].y = t * (tex_outside_points[1].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
01953 \par
01954         mat2D_free(line_start);\par
01955         mat2D_free(line_end);\par
01956 \par
01957         {\cf20 /* fixing color ordering */}\par
01958         uint32_t temp_color = tri_out1->colors[2]; \par
01959         tri_out1->colors[2] = tri_out1->colors[1];\par
01960         tri_out1->colors[1] = tri_out1->colors[0];\par
01961         tri_out1->colors[0] = temp_color;\par
01962 \par
01963         temp_color = tri_out1->colors[2]; \par
01964         tri_out1->colors[2] = tri_out1->colors[0];\par
01965         tri_out1->colors[0] = temp_color;\par
01966 \par
01967         ae_assert_tri_is_valid(*tri_out1);\par
01968 \par
01969         {\cf19 return} 1;\par
01970     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 2 && d0 >= epsilon) \{\par
01971         Mat2D line_start = mat2D_alloc(3, 1);\par
01972         Mat2D line_end   = mat2D_alloc(3, 1);\par
01973 \par
01974         *tri_out1 = tri_in;\par
01975         {\cf20 // tri_out1->colors[0] = 0xFF0000;}\par
01976         {\cf20 // tri_out1->colors[1] = 0xFF0000;}\par
01977         {\cf20 // tri_out1->colors[2] = 0xFF0000;}\par
01978         \par
01979         (*tri_out1).points[0] = inside_points[0];\par
01980         (*tri_out1).tex_points[0] = tex_inside_points[0];\par
01981 \par
01982         ae_point_to_mat2D(inside_points[0], line_start);\par
01983         ae_point_to_mat2D(outside_points[0], line_end);\par
01984         (*tri_out1).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01985         (*tri_out1).points[1].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
01986         (*tri_out1).tex_points[1].x = t * (tex_outside_points[0].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
01987         (*tri_out1).tex_points[1].y = t * (tex_outside_points[0].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
01988 \par
01989         ae_point_to_mat2D(inside_points[0], line_start);\par
01990         ae_point_to_mat2D(outside_points[1], line_end);\par
01991         (*tri_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
01992         (*tri_out1).points[2].w = t * (outside_points[1].w - inside_points[0].w) + inside_points[0].w;\par
01993         (*tri_out1).tex_points[2].x = t * (tex_outside_points[1].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
01994         (*tri_out1).tex_points[2].y = t * (tex_outside_points[1].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
01995 \par
01996         mat2D_free(line_start);\par
01997         mat2D_free(line_end);\par
01998 \par
01999         ae_assert_tri_is_valid(*tri_out1);\par
02000 \par
02001         {\cf19 return} 1;\par
02002     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 1 && d2 < epsilon) \{\par
02003         Mat2D line_start = mat2D_alloc(3, 1);\par
02004         Mat2D line_end   = mat2D_alloc(3, 1);\par
02005         \par
02006         *tri_out1 = tri_in;\par
02007         {\cf20 // tri_out1->colors[0] = 0x00FF00;}\par
02008         {\cf20 // tri_out1->colors[1] = 0x00FF00;}\par
02009         {\cf20 // tri_out1->colors[2] = 0x00FF00;}\par
02010 \par
02011         *tri_out2 = tri_in;\par
02012         {\cf20 // tri_out2->colors[0] = 0x0000FF;}\par
02013         {\cf20 // tri_out2->colors[1] = 0x0000FF;}\par
02014         {\cf20 // tri_out2->colors[2] = 0x0000FF;}\par
02015 \par
02016         (*tri_out1).points[0] = inside_points[0];\par
02017         (*tri_out1).tex_points[0] = tex_inside_points[0];\par
02018         (*tri_out1).points[1] = inside_points[1];\par
02019         (*tri_out1).tex_points[1] = tex_inside_points[1];\par
02020         ae_point_to_mat2D(inside_points[0], line_start);\par
02021         ae_point_to_mat2D(outside_points[0], line_end);\par
02022         (*tri_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02023         (*tri_out1).points[2].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
02024         (*tri_out1).tex_points[2].x = t * (tex_outside_points[0].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
02025         (*tri_out1).tex_points[2].y = t * (tex_outside_points[0].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
02026 \par
02027         (*tri_out2).points[0] = inside_points[1];\par
02028         (*tri_out2).tex_points[0] = tex_inside_points[1];\par
02029         ae_point_to_mat2D(inside_points[1], line_start);\par
02030         ae_point_to_mat2D(outside_points[0], line_end);\par
02031         (*tri_out2).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02032         (*tri_out2).points[1].w = t * (outside_points[0].w - inside_points[1].w) + inside_points[1].w;\par
02033         (*tri_out2).tex_points[1].x = t * (tex_outside_points[0].x - tex_inside_points[1].x) + tex_inside_points[1].x;\par
02034         (*tri_out2).tex_points[1].y = t * (tex_outside_points[0].y - tex_inside_points[1].y) + tex_inside_points[1].y;\par
02035         (*tri_out2).points[2] = (*tri_out1).points[2];\par
02036         (*tri_out2).tex_points[2] = (*tri_out1).tex_points[2];\par
02037 \par
02038         mat2D_free(line_start);\par
02039         mat2D_free(line_end);\par
02040 \par
02041         {\cf20 /* fixing color ordering */}\par
02042         uint32_t temp_color = tri_out2->colors[2]; \par
02043         tri_out2->colors[2] = tri_out2->colors[0];\par
02044         tri_out2->colors[0] = tri_out2->colors[1];\par
02045         tri_out2->colors[1] = temp_color;\par
02046 \par
02047         ae_assert_tri_is_valid(*tri_out1);\par
02048         ae_assert_tri_is_valid(*tri_out2);\par
02049 \par
02050         {\cf19 return} 2;\par
02051     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 1 && d1 < epsilon) \{\par
02052         Mat2D line_start = mat2D_alloc(3, 1);\par
02053         Mat2D line_end   = mat2D_alloc(3, 1);\par
02054         \par
02055         *tri_out1 = tri_in;\par
02056         {\cf20 // tri_out1->colors[0] = 0x00FF00;}\par
02057         {\cf20 // tri_out1->colors[1] = 0x00FF00;}\par
02058         {\cf20 // tri_out1->colors[2] = 0x00FF00;}\par
02059 \par
02060         *tri_out2 = tri_in;\par
02061         {\cf20 // tri_out2->colors[0] = 0x0000FF;}\par
02062         {\cf20 // tri_out2->colors[1] = 0x0000FF;}\par
02063         {\cf20 // tri_out2->colors[2] = 0x0000FF;}\par
02064 \par
02065         (*tri_out1).points[0] = inside_points[0];\par
02066         (*tri_out1).tex_points[0] = tex_inside_points[0];\par
02067         (*tri_out1).points[1] = inside_points[1];\par
02068         (*tri_out1).tex_points[1] = tex_inside_points[1];\par
02069         ae_point_to_mat2D(inside_points[0], line_start);\par
02070         ae_point_to_mat2D(outside_points[0], line_end);\par
02071         (*tri_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02072         (*tri_out1).points[2].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
02073         (*tri_out1).tex_points[2].x = t * (tex_outside_points[0].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
02074         (*tri_out1).tex_points[2].y = t * (tex_outside_points[0].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
02075 \par
02076         (*tri_out2).points[0] = inside_points[1];\par
02077         (*tri_out2).tex_points[0] = tex_inside_points[1];\par
02078         ae_point_to_mat2D(inside_points[1], line_start);\par
02079         ae_point_to_mat2D(outside_points[0], line_end);\par
02080         (*tri_out2).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02081         (*tri_out2).points[1].w = t * (outside_points[0].w - inside_points[1].w) + inside_points[1].w;\par
02082         (*tri_out2).tex_points[1].x = t * (tex_outside_points[0].x - tex_inside_points[1].x) + tex_inside_points[1].x;\par
02083         (*tri_out2).tex_points[1].y = t * (tex_outside_points[0].y - tex_inside_points[1].y) + tex_inside_points[1].y;\par
02084         (*tri_out2).points[2] = (*tri_out1).points[2];\par
02085         (*tri_out2).tex_points[2] = (*tri_out1).tex_points[2];\par
02086 \par
02087         mat2D_free(line_start);\par
02088         mat2D_free(line_end);\par
02089         \par
02090         {\cf20 /* fixing color ordering */}\par
02091         uint32_t temp_color = tri_out1->colors[2]; \par
02092         tri_out1->colors[2] = tri_out1->colors[1];\par
02093         tri_out1->colors[1] = temp_color;\par
02094         \par
02095         temp_color = tri_out2->colors[2]; \par
02096         tri_out2->colors[2] = tri_out2->colors[0];\par
02097         tri_out2->colors[0] = tri_out2->colors[1];\par
02098         tri_out2->colors[1] = temp_color;\par
02099         temp_color = tri_out2->colors[1]; \par
02100         tri_out2->colors[1] = tri_out2->colors[0];\par
02101         tri_out2->colors[0] = temp_color;\par
02102 \par
02103         ae_assert_tri_is_valid(*tri_out1);\par
02104         ae_assert_tri_is_valid(*tri_out2);\par
02105 \par
02106         {\cf19 return} 2;\par
02107     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 1 && d0 < epsilon) \{\par
02108         Mat2D line_start = mat2D_alloc(3, 1);\par
02109         Mat2D line_end   = mat2D_alloc(3, 1);\par
02110         \par
02111         *tri_out1 = tri_in;\par
02112         {\cf20 // tri_out1->colors[0] = 0x00FF00;}\par
02113         {\cf20 // tri_out1->colors[1] = 0x00FF00;}\par
02114         {\cf20 // tri_out1->colors[2] = 0x00FF00;}\par
02115 \par
02116         *tri_out2 = tri_in;\par
02117         {\cf20 // tri_out2->colors[0] = 0x0000FF;}\par
02118         {\cf20 // tri_out2->colors[1] = 0x0000FF;}\par
02119         {\cf20 // tri_out2->colors[2] = 0x0000FF;}\par
02120 \par
02121         (*tri_out1).points[0] = inside_points[0];\par
02122         (*tri_out1).tex_points[0] = tex_inside_points[0];\par
02123         (*tri_out1).points[1] = inside_points[1];\par
02124         (*tri_out1).tex_points[1] = tex_inside_points[1];\par
02125         ae_point_to_mat2D(inside_points[0], line_start);\par
02126         ae_point_to_mat2D(outside_points[0], line_end);\par
02127         (*tri_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02128         (*tri_out1).points[2].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
02129         (*tri_out1).tex_points[2].x = t * (tex_outside_points[0].x - tex_inside_points[0].x) + tex_inside_points[0].x;\par
02130         (*tri_out1).tex_points[2].y = t * (tex_outside_points[0].y - tex_inside_points[0].y) + tex_inside_points[0].y;\par
02131 \par
02132         (*tri_out2).points[0] = inside_points[1];\par
02133         (*tri_out2).tex_points[0] = tex_inside_points[1];\par
02134         ae_point_to_mat2D(inside_points[1], line_start);\par
02135         ae_point_to_mat2D(outside_points[0], line_end);\par
02136         (*tri_out2).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02137         (*tri_out2).points[1].w = t * (outside_points[0].w - inside_points[1].w) + inside_points[1].w;\par
02138         (*tri_out2).tex_points[1].x = t * (tex_outside_points[0].x - tex_inside_points[1].x) + tex_inside_points[1].x;\par
02139         (*tri_out2).tex_points[1].y = t * (tex_outside_points[0].y - tex_inside_points[1].y) + tex_inside_points[1].y;\par
02140         (*tri_out2).points[2] = (*tri_out1).points[2];\par
02141         (*tri_out2).tex_points[2] = (*tri_out1).tex_points[2];\par
02142 \par
02143         mat2D_free(line_start);\par
02144         mat2D_free(line_end);\par
02145 \par
02146         {\cf20 /* fixing color ordering */}\par
02147         uint32_t temp_color = tri_out1->colors[2]; \par
02148         tri_out1->colors[2] = tri_out1->colors[0];\par
02149         tri_out1->colors[0] = tri_out1->colors[1];\par
02150         tri_out1->colors[1] = temp_color;\par
02151 \par
02152         temp_color = tri_out2->colors[2]; \par
02153         tri_out2->colors[2] = tri_out2->colors[1];\par
02154         tri_out2->colors[1] = tri_out2->colors[0];\par
02155         tri_out2->colors[0] = temp_color;\par
02156 \par
02157         ae_assert_tri_is_valid(*tri_out1);\par
02158         ae_assert_tri_is_valid(*tri_out2);\par
02159 \par
02160         {\cf19 return} 2;\par
02161     \}\par
02162     {\cf19 return} -1;\par
02163 \}\par
02164 \par
02181 {\cf18 int} ae_quad_clip_with_plane(Quad quad_in, Mat2D plane_p, Mat2D plane_n, Quad *quad_out1, Quad *quad_out2)\par
02182 \{\par
02183     ae_assert_quad_is_valid(quad_in);\par
02184 \par
02185     mat2D_normalize(plane_n);\par
02186 \par
02187     {\cf20 /* if the signed distance is positive, the point lies on the "inside" of the plane */}\par
02188     Point inside_points[4];\par
02189     Point outside_points[4];\par
02190     {\cf18 int} inside_points_count = 0;\par
02191     {\cf18 int} outside_points_count = 0;\par
02192     \par
02193     {\cf20 /* calc signed distance of each point of tri_in */}\par
02194     {\cf18 float} d0 = ae_signed_dist_point_and_plane(quad_in.points[0], plane_p, plane_n);\par
02195     {\cf18 float} d1 = ae_signed_dist_point_and_plane(quad_in.points[1], plane_p, plane_n);\par
02196     {\cf18 float} d2 = ae_signed_dist_point_and_plane(quad_in.points[2], plane_p, plane_n);\par
02197     {\cf18 float} d3 = ae_signed_dist_point_and_plane(quad_in.points[3], plane_p, plane_n);\par
02198     {\cf18 float} t;\par
02199 \par
02200     {\cf20 // float epsilon = 1e-3;}\par
02201     {\cf18 float} epsilon = 0;\par
02202     {\cf19 if} (d0 >= epsilon) \{\par
02203         inside_points[inside_points_count++] = quad_in.points[0];\par
02204     \} {\cf19 else} \{\par
02205         outside_points[outside_points_count++] = quad_in.points[0];\par
02206     \}\par
02207     {\cf19 if} (d1 >= epsilon) \{\par
02208         inside_points[inside_points_count++] = quad_in.points[1];\par
02209     \} {\cf19 else} \{\par
02210         outside_points[outside_points_count++] = quad_in.points[1];\par
02211     \}\par
02212     {\cf19 if} (d2 >= epsilon) \{\par
02213         inside_points[inside_points_count++] = quad_in.points[2];\par
02214     \} {\cf19 else} \{\par
02215         outside_points[outside_points_count++] = quad_in.points[2];\par
02216     \}\par
02217     {\cf19 if} (d3 >= epsilon) \{\par
02218         inside_points[inside_points_count++] = quad_in.points[3];\par
02219     \} {\cf19 else} \{\par
02220         outside_points[outside_points_count++] = quad_in.points[3];\par
02221     \}\par
02222 \par
02223     {\cf20 /* classifying the triangle points */}\par
02224     {\cf19 if} (inside_points_count == 0) \{\par
02225         {\cf19 return} 0;\par
02226     \} {\cf19 else} {\cf19 if} (inside_points_count == 4) \{\par
02227         *quad_out1 = quad_in;\par
02228         {\cf19 return} 1;\par
02229     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 3 && d1 >= epsilon) \{\par
02230         Mat2D line_start = mat2D_alloc(3, 1);\par
02231         Mat2D line_end   = mat2D_alloc(3, 1);\par
02232 \par
02233         *quad_out1 = quad_in;        \par
02234         *quad_out2 = quad_in;        \par
02235 \par
02236         (*quad_out1).points[1] = quad_in.points[1];\par
02237 \par
02238         ae_point_to_mat2D(quad_in.points[1], line_start);\par
02239         ae_point_to_mat2D(quad_in.points[2], line_end);\par
02240         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02241         (*quad_out1).points[2].w = t * (quad_in.points[2].w - quad_in.points[1].w) + quad_in.points[1].w;\par
02242         (*quad_out1).colors[2] = quad_in.colors[2];\par
02243 \par
02244         ae_point_to_mat2D(quad_in.points[1], line_start);\par
02245         ae_point_to_mat2D(quad_in.points[0], line_end);\par
02246         (*quad_out1).points[0] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02247         (*quad_out1).points[0].w = t * (quad_in.points[0].w - quad_in.points[1].w) + quad_in.points[1].w;\par
02248         (*quad_out1).colors[0] = quad_in.colors[0];\par
02249 \par
02250         (*quad_out1).points[3].x = ((*quad_out1).points[0].x + (*quad_out1).points[2].x) / 2;\par
02251         (*quad_out1).points[3].y = ((*quad_out1).points[0].y + (*quad_out1).points[2].y) / 2;\par
02252         (*quad_out1).points[3].z = ((*quad_out1).points[0].z + (*quad_out1).points[2].z) / 2;\par
02253         (*quad_out1).points[3].w = ((*quad_out1).points[0].w + (*quad_out1).points[2].w) / 2;\par
02254         (*quad_out1).colors[3] = quad_in.colors[3];\par
02255 \par
02256         mat2D_free(line_start);\par
02257         mat2D_free(line_end);\par
02258 \par
02259         ae_assert_quad_is_valid(*quad_out1);\par
02260 \par
02261         {\cf19 return} 1;\par
02262     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 3 && d2 >= epsilon) \{\par
02263         Mat2D line_start = mat2D_alloc(3, 1);\par
02264         Mat2D line_end   = mat2D_alloc(3, 1);\par
02265 \par
02266         *quad_out1 = quad_in;        \par
02267         *quad_out2 = quad_in;        \par
02268 \par
02269         (*quad_out1).points[2] = quad_in.points[2];\par
02270 \par
02271         ae_point_to_mat2D(quad_in.points[2], line_start);\par
02272         ae_point_to_mat2D(quad_in.points[3], line_end);\par
02273         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02274         (*quad_out1).points[3].w = t * (quad_in.points[3].w - quad_in.points[2].w) + quad_in.points[2].w;\par
02275         (*quad_out1).colors[3] = quad_in.colors[3];\par
02276 \par
02277         ae_point_to_mat2D(quad_in.points[2], line_start);\par
02278         ae_point_to_mat2D(quad_in.points[1], line_end);\par
02279         (*quad_out1).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02280         (*quad_out1).points[1].w = t * (quad_in.points[1].w - quad_in.points[2].w) + quad_in.points[2].w;\par
02281         (*quad_out1).colors[1] = quad_in.colors[1];\par
02282 \par
02283         (*quad_out1).points[0].x = ((*quad_out1).points[3].x + (*quad_out1).points[1].x) / 2;\par
02284         (*quad_out1).points[0].y = ((*quad_out1).points[3].y + (*quad_out1).points[1].y) / 2;\par
02285         (*quad_out1).points[0].z = ((*quad_out1).points[3].z + (*quad_out1).points[1].z) / 2;\par
02286         (*quad_out1).points[0].w = ((*quad_out1).points[3].w + (*quad_out1).points[1].w) / 2;\par
02287         (*quad_out1).colors[0] = quad_in.colors[0];\par
02288 \par
02289         mat2D_free(line_start);\par
02290         mat2D_free(line_end);\par
02291 \par
02292         ae_assert_quad_is_valid(*quad_out1);\par
02293 \par
02294         {\cf19 return} 1;\par
02295     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 3 && d3 >= epsilon) \{\par
02296         Mat2D line_start = mat2D_alloc(3, 1);\par
02297         Mat2D line_end   = mat2D_alloc(3, 1);\par
02298 \par
02299         *quad_out1 = quad_in;        \par
02300         *quad_out2 = quad_in;        \par
02301 \par
02302         (*quad_out1).points[3] = quad_in.points[3];\par
02303 \par
02304         ae_point_to_mat2D(quad_in.points[3], line_start);\par
02305         ae_point_to_mat2D(quad_in.points[0], line_end);\par
02306         (*quad_out1).points[0] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02307         (*quad_out1).points[0].w = t * (quad_in.points[0].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02308         (*quad_out1).colors[0] = quad_in.colors[0];\par
02309 \par
02310         ae_point_to_mat2D(quad_in.points[3], line_start);\par
02311         ae_point_to_mat2D(quad_in.points[2], line_end);\par
02312         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02313         (*quad_out1).points[2].w = t * (quad_in.points[2].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02314         (*quad_out1).colors[2] = quad_in.colors[2];\par
02315 \par
02316         (*quad_out1).points[1].x = ((*quad_out1).points[2].x + (*quad_out1).points[0].x) / 2;\par
02317         (*quad_out1).points[1].y = ((*quad_out1).points[2].y + (*quad_out1).points[0].y) / 2;\par
02318         (*quad_out1).points[1].z = ((*quad_out1).points[2].z + (*quad_out1).points[0].z) / 2;\par
02319         (*quad_out1).points[1].w = ((*quad_out1).points[2].w + (*quad_out1).points[0].w) / 2;\par
02320         (*quad_out1).colors[1] = quad_in.colors[1];\par
02321 \par
02322         mat2D_free(line_start);\par
02323         mat2D_free(line_end);\par
02324 \par
02325         ae_assert_quad_is_valid(*quad_out1);\par
02326 \par
02327         {\cf19 return} 1;\par
02328     \} {\cf19 else} {\cf19 if} (inside_points_count == 1 && outside_points_count == 3) \{\par
02329         Mat2D line_start = mat2D_alloc(3, 1);\par
02330         Mat2D line_end   = mat2D_alloc(3, 1);\par
02331 \par
02332         *quad_out1 = quad_in;        \par
02333         *quad_out2 = quad_in;        \par
02334 \par
02335         (*quad_out1).points[0] = inside_points[0];\par
02336 \par
02337         ae_point_to_mat2D(inside_points[0], line_start);\par
02338         ae_point_to_mat2D(outside_points[0], line_end);\par
02339         (*quad_out1).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02340         (*quad_out1).points[1].w = t * (outside_points[0].w - inside_points[0].w) + inside_points[0].w;\par
02341 \par
02342         ae_point_to_mat2D(inside_points[0], line_start);\par
02343         ae_point_to_mat2D(outside_points[1], line_end);\par
02344         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02345         (*quad_out1).points[2].w = t * (outside_points[1].w - inside_points[0].w) + inside_points[0].w;\par
02346 \par
02347         ae_point_to_mat2D(inside_points[0], line_start);\par
02348         ae_point_to_mat2D(outside_points[2], line_end);\par
02349         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02350         (*quad_out1).points[3].w = t * (outside_points[2].w - inside_points[0].w) + inside_points[0].w;\par
02351 \par
02352         mat2D_free(line_start);\par
02353         mat2D_free(line_end);\par
02354 \par
02355         ae_assert_quad_is_valid(*quad_out1);\par
02356 \par
02357         {\cf19 return} 1;\par
02358     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 2 && d2 < epsilon && d1 < epsilon) \{\par
02359         Mat2D line_start = mat2D_alloc(3, 1);\par
02360         Mat2D line_end   = mat2D_alloc(3, 1);\par
02361         \par
02362         *quad_out1 = quad_in;\par
02363 \par
02364         (*quad_out1).points[0] = quad_in.points[3];\par
02365         (*quad_out1).colors[0] = quad_in.colors[3];\par
02366         (*quad_out1).points[1] = quad_in.points[0];\par
02367         (*quad_out1).colors[1] = quad_in.colors[0];\par
02368 \par
02369         ae_point_to_mat2D(quad_in.points[0], line_start);\par
02370         ae_point_to_mat2D(quad_in.points[1], line_end);\par
02371         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02372         (*quad_out1).points[2].w = t * (quad_in.points[1].w - quad_in.points[0].w) + quad_in.points[0].w;\par
02373         (*quad_out1).colors[2] = quad_in.colors[1];\par
02374 \par
02375         ae_point_to_mat2D(quad_in.points[3], line_start);\par
02376         ae_point_to_mat2D(quad_in.points[2], line_end);\par
02377         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02378         (*quad_out1).points[3].w = t * (quad_in.points[2].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02379         (*quad_out1).colors[3] = quad_in.colors[2];\par
02380 \par
02381         mat2D_free(line_start);\par
02382         mat2D_free(line_end);\par
02383 \par
02384         ae_assert_quad_is_valid(*quad_out1);\par
02385 \par
02386         {\cf19 return} 2;\par
02387     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 2 && d0 < epsilon && d1 < epsilon) \{\par
02388         Mat2D line_start = mat2D_alloc(3, 1);\par
02389         Mat2D line_end   = mat2D_alloc(3, 1);\par
02390         \par
02391         *quad_out1 = quad_in;\par
02392 \par
02393         (*quad_out1).points[0] = quad_in.points[2];\par
02394         (*quad_out1).colors[0] = quad_in.colors[2];\par
02395         (*quad_out1).points[1] = quad_in.points[3];\par
02396         (*quad_out1).colors[1] = quad_in.colors[3];\par
02397 \par
02398         ae_point_to_mat2D(quad_in.points[2], line_start);\par
02399         ae_point_to_mat2D(quad_in.points[1], line_end);\par
02400         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02401         (*quad_out1).points[3].w = t * (quad_in.points[1].w - quad_in.points[2].w) + quad_in.points[2].w;\par
02402         (*quad_out1).colors[3] = quad_in.colors[1];\par
02403 \par
02404         ae_point_to_mat2D(quad_in.points[3], line_start);\par
02405         ae_point_to_mat2D(quad_in.points[0], line_end);\par
02406         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02407         (*quad_out1).points[2].w = t * (quad_in.points[0].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02408         (*quad_out1).colors[2] = quad_in.colors[0];\par
02409 \par
02410         mat2D_free(line_start);\par
02411         mat2D_free(line_end);\par
02412 \par
02413         ae_assert_quad_is_valid(*quad_out1);\par
02414 \par
02415         {\cf19 return} 2;\par
02416     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 2 && d0 < epsilon && d3 < epsilon) \{\par
02417         Mat2D line_start = mat2D_alloc(3, 1);\par
02418         Mat2D line_end   = mat2D_alloc(3, 1);\par
02419         \par
02420         *quad_out1 = quad_in;\par
02421 \par
02422         (*quad_out1).points[0] = quad_in.points[1];\par
02423         (*quad_out1).colors[0] = quad_in.colors[1];\par
02424         (*quad_out1).points[1] = quad_in.points[2];\par
02425         (*quad_out1).colors[1] = quad_in.colors[2];\par
02426 \par
02427         ae_point_to_mat2D(quad_in.points[2], line_start);\par
02428         ae_point_to_mat2D(quad_in.points[3], line_end);\par
02429         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02430         (*quad_out1).points[2].w = t * (quad_in.points[3].w - quad_in.points[2].w) + quad_in.points[2].w;\par
02431         (*quad_out1).colors[2] = quad_in.colors[3];\par
02432 \par
02433         ae_point_to_mat2D(quad_in.points[1], line_start);\par
02434         ae_point_to_mat2D(quad_in.points[0], line_end);\par
02435         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02436         (*quad_out1).points[3].w = t * (quad_in.points[1].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02437         (*quad_out1).colors[3] = quad_in.colors[0];\par
02438 \par
02439         mat2D_free(line_start);\par
02440         mat2D_free(line_end);\par
02441 \par
02442         ae_assert_quad_is_valid(*quad_out1);\par
02443 \par
02444         {\cf19 return} 1;\par
02445     \} {\cf19 else} {\cf19 if} (inside_points_count == 2 && outside_points_count == 2) \{\par
02446         Mat2D line_start = mat2D_alloc(3, 1);\par
02447         Mat2D line_end   = mat2D_alloc(3, 1);\par
02448         \par
02449         *quad_out1 = quad_in;\par
02450 \par
02451         (*quad_out1).points[0] = inside_points[0];\par
02452         (*quad_out1).points[1] = inside_points[1];\par
02453         ae_point_to_mat2D(inside_points[1], line_start);\par
02454         ae_point_to_mat2D(outside_points[0], line_end);\par
02455         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02456         (*quad_out1).points[2].w = t * (outside_points[0].w - inside_points[1].w) + inside_points[1].w;\par
02457 \par
02458         ae_point_to_mat2D(inside_points[0], line_start);\par
02459         ae_point_to_mat2D(outside_points[1], line_end);\par
02460         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02461         (*quad_out1).points[3].w = t * (outside_points[1].w - inside_points[0].w) + inside_points[0].w;\par
02462 \par
02463         mat2D_free(line_start);\par
02464         mat2D_free(line_end);\par
02465 \par
02466         ae_assert_quad_is_valid(*quad_out1);\par
02467 \par
02468         {\cf19 return} 1;\par
02469     \} {\cf19 else} {\cf19 if} (inside_points_count == 3 && outside_points_count == 1 && d0 < epsilon) \{\par
02470         Mat2D line_start = mat2D_alloc(3, 1);\par
02471         Mat2D line_end   = mat2D_alloc(3, 1);\par
02472         \par
02473         *quad_out1 = quad_in;\par
02474         *quad_out2 = quad_in;\par
02475 \par
02476         ae_point_to_mat2D(quad_in.points[3], line_start);\par
02477         ae_point_to_mat2D(quad_in.points[0], line_end);\par
02478         (*quad_out1).points[0] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02479         (*quad_out1).points[0].w = t * (quad_in.points[0].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02480         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[3], (quad_in).colors[0], t, &((*quad_out1).colors[0]));}\par
02481 \par
02482         (*quad_out2).points[1] = quad_in.points[1];\par
02483         {\cf20 // (*quad_out2).colors[1] = quad_in.colors[1];}\par
02484 \par
02485         ae_point_to_mat2D(quad_in.points[1], line_start);\par
02486         ae_point_to_mat2D(quad_in.points[0], line_end);\par
02487         (*quad_out2).points[0] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02488         (*quad_out2).points[0].w = t * (quad_in.points[0].w - quad_in.points[1].w) + quad_in.points[1].w;\par
02489         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[1], (quad_in).colors[0], t, &((*quad_out2).colors[0]));}\par
02490 \par
02491         (*quad_out2).points[2] = (*quad_out1).points[0];\par
02492         {\cf20 // (*quad_out2).colors[2] = (*quad_out1).colors[0];}\par
02493 \par
02494         (*quad_out2).points[3].x = ((*quad_out2).points[2].x + (*quad_out2).points[0].x) / 2;\par
02495         (*quad_out2).points[3].y = ((*quad_out2).points[2].y + (*quad_out2).points[0].y) / 2;\par
02496         (*quad_out2).points[3].z = ((*quad_out2).points[2].z + (*quad_out2).points[0].z) / 2;\par
02497         (*quad_out2).points[3].w = ((*quad_out2).points[2].w + (*quad_out2).points[0].w) / 2;\par
02498         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((*quad_out2).colors[2], (*quad_out2).colors[0], 0.5f, &((*quad_out2).colors[3]));}\par
02499 \par
02500 \par
02501         mat2D_free(line_start);\par
02502         mat2D_free(line_end);\par
02503 \par
02504         ae_assert_quad_is_valid(*quad_out1);\par
02505 \par
02506         {\cf19 return} 2;\par
02507     \} {\cf19 else} {\cf19 if} (inside_points_count == 3 && outside_points_count == 1 && d1 < epsilon) \{\par
02508         Mat2D line_start = mat2D_alloc(3, 1);\par
02509         Mat2D line_end   = mat2D_alloc(3, 1);\par
02510         \par
02511         *quad_out1 = quad_in;\par
02512         *quad_out2 = quad_in;\par
02513 \par
02514         (*quad_out1).points[0] = quad_in.points[0];\par
02515         (*quad_out1).colors[0] = quad_in.colors[0];\par
02516         (*quad_out1).points[2] = quad_in.points[2];\par
02517         (*quad_out1).colors[2] = quad_in.colors[2];\par
02518         (*quad_out1).points[3] = quad_in.points[3];\par
02519         (*quad_out1).colors[3] = quad_in.colors[3];\par
02520 \par
02521         ae_point_to_mat2D(quad_in.points[2], line_start);\par
02522         ae_point_to_mat2D(quad_in.points[1], line_end);\par
02523         (*quad_out1).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02524         (*quad_out1).points[1].w = t * (quad_in.points[1].w - quad_in.points[2].w) + quad_in.points[2].w;\par
02525         (*quad_out1).colors[1] = (*quad_out1).colors[1];\par
02526         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[2], (quad_in).colors[1], t, &((*quad_out1).colors[1]));}\par
02527 \par
02528         (*quad_out2).points[0] = quad_in.points[0];\par
02529         (*quad_out2).colors[0] = quad_in.colors[0];\par
02530         (*quad_out2).points[3] = (*quad_out1).points[1];\par
02531         (*quad_out2).colors[3] = (*quad_out1).colors[3];\par
02532 \par
02533         ae_point_to_mat2D(quad_in.points[0], line_start);\par
02534         ae_point_to_mat2D(quad_in.points[1], line_end);\par
02535         (*quad_out2).points[1] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02536         (*quad_out2).points[1].w = t * (quad_in.points[1].w - quad_in.points[0].w) + quad_in.points[0].w;\par
02537         (*quad_out2).colors[1] = quad_in.colors[1];\par
02538         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[0], (quad_in).colors[1], t, &((*quad_out2).colors[1]));}\par
02539 \par
02540         (*quad_out2).points[2].x = ((*quad_out2).points[1].x + (*quad_out2).points[3].x) / 2;\par
02541         (*quad_out2).points[2].y = ((*quad_out2).points[1].y + (*quad_out2).points[3].y) / 2;\par
02542         (*quad_out2).points[2].z = ((*quad_out2).points[1].z + (*quad_out2).points[3].z) / 2;\par
02543         (*quad_out2).points[2].w = ((*quad_out2).points[1].w + (*quad_out2).points[3].w) / 2;\par
02544         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((*quad_out2).colors[1], (*quad_out2).colors[3], 0.5f, &((*quad_out2).colors[2]));}\par
02545 \par
02546 \par
02547         mat2D_free(line_start);\par
02548         mat2D_free(line_end);\par
02549 \par
02550         ae_assert_quad_is_valid(*quad_out1);\par
02551 \par
02552         {\cf19 return} 2;\par
02553     \} {\cf19 else} {\cf19 if} (inside_points_count == 3 && outside_points_count == 1 && d2 < epsilon) \{\par
02554         Mat2D line_start = mat2D_alloc(3, 1);\par
02555         Mat2D line_end   = mat2D_alloc(3, 1);\par
02556         \par
02557         *quad_out1 = quad_in;\par
02558         *quad_out2 = quad_in;\par
02559 \par
02560         (*quad_out1).points[0] = quad_in.points[0];\par
02561         (*quad_out1).colors[0] = quad_in.colors[0];\par
02562         (*quad_out1).points[1] = quad_in.points[1];\par
02563         (*quad_out1).colors[1] = quad_in.colors[1];\par
02564         (*quad_out1).points[3] = quad_in.points[3];\par
02565         (*quad_out1).colors[3] = quad_in.colors[3];\par
02566 \par
02567         ae_point_to_mat2D(quad_in.points[1], line_start);\par
02568         ae_point_to_mat2D(quad_in.points[2], line_end);\par
02569         (*quad_out1).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02570         (*quad_out1).points[2].w = t * (quad_in.points[2].w - quad_in.points[1].w) + quad_in.points[1].w;\par
02571         (*quad_out1).colors[2] = (*quad_out1).colors[2];\par
02572         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[2], (quad_in).colors[1], t, &((*quad_out1).colors[1]));}\par
02573 \par
02574         (*quad_out2).points[3] = quad_in.points[3];\par
02575         (*quad_out2).colors[3] = quad_in.colors[3];\par
02576         (*quad_out2).points[0] = (*quad_out1).points[2];\par
02577         (*quad_out2).colors[0] = (*quad_out1).colors[0];\par
02578 \par
02579         ae_point_to_mat2D(quad_in.points[3], line_start);\par
02580         ae_point_to_mat2D(quad_in.points[2], line_end);\par
02581         (*quad_out2).points[2] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02582         (*quad_out2).points[2].w = t * (quad_in.points[2].w - quad_in.points[3].w) + quad_in.points[3].w;\par
02583         (*quad_out2).colors[2] = quad_in.colors[2];\par
02584         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[0], (quad_in).colors[1], t, &((*quad_out2).colors[1]));}\par
02585 \par
02586         (*quad_out2).points[1].x = ((*quad_out2).points[2].x + (*quad_out2).points[0].x) / 2;\par
02587         (*quad_out2).points[1].y = ((*quad_out2).points[2].y + (*quad_out2).points[0].y) / 2;\par
02588         (*quad_out2).points[1].z = ((*quad_out2).points[2].z + (*quad_out2).points[0].z) / 2;\par
02589         (*quad_out2).points[1].w = ((*quad_out2).points[2].w + (*quad_out2).points[0].w) / 2;\par
02590         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((*quad_out2).colors[1], (*quad_out2).colors[3], 0.5f, &((*quad_out2).colors[2]));}\par
02591 \par
02592 \par
02593         mat2D_free(line_start);\par
02594         mat2D_free(line_end);\par
02595 \par
02596         ae_assert_quad_is_valid(*quad_out1);\par
02597 \par
02598         {\cf19 return} 2;\par
02599     \} {\cf19 else} {\cf19 if} (inside_points_count == 3 && outside_points_count == 1 && d3 < epsilon) \{\par
02600         Mat2D line_start = mat2D_alloc(3, 1);\par
02601         Mat2D line_end   = mat2D_alloc(3, 1);\par
02602         \par
02603         *quad_out1 = quad_in;\par
02604         *quad_out2 = quad_in;\par
02605 \par
02606         (*quad_out1).points[0] = quad_in.points[0];\par
02607         (*quad_out1).colors[0] = quad_in.colors[0];\par
02608         (*quad_out1).points[1] = quad_in.points[1];\par
02609         (*quad_out1).colors[1] = quad_in.colors[1];\par
02610         (*quad_out1).points[2] = quad_in.points[2];\par
02611         (*quad_out1).colors[2] = quad_in.colors[2];\par
02612 \par
02613         ae_point_to_mat2D(quad_in.points[0], line_start);\par
02614         ae_point_to_mat2D(quad_in.points[3], line_end);\par
02615         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02616         (*quad_out1).points[3].w = t * (quad_in.points[3].w - quad_in.points[0].w) + quad_in.points[0].w;\par
02617         (*quad_out1).colors[3] = (*quad_out1).colors[3];\par
02618         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[2], (quad_in).colors[1], t, &((*quad_out1).colors[1]));}\par
02619 \par
02620         (*quad_out2).points[2] = quad_in.points[2];\par
02621         (*quad_out2).colors[2] = quad_in.colors[2];\par
02622         (*quad_out2).points[1] = (*quad_out1).points[3];\par
02623         (*quad_out2).colors[1] = (*quad_out1).colors[1];\par
02624 \par
02625         ae_point_to_mat2D(quad_in.points[2], line_start);\par
02626         ae_point_to_mat2D(quad_in.points[3], line_end);\par
02627         (*quad_out2).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02628         (*quad_out2).points[3].w = t * (quad_in.points[3].w - quad_in.points[2].w) + quad_in.points[2].w;\par
02629         (*quad_out2).colors[3] = quad_in.colors[3];\par
02630         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((quad_in).colors[0], (quad_in).colors[1], t, &((*quad_out2).colors[1]));}\par
02631 \par
02632         (*quad_out2).points[0].x = ((*quad_out2).points[3].x + (*quad_out2).points[1].x) / 2;\par
02633         (*quad_out2).points[0].y = ((*quad_out2).points[3].y + (*quad_out2).points[1].y) / 2;\par
02634         (*quad_out2).points[0].z = ((*quad_out2).points[3].z + (*quad_out2).points[1].z) / 2;\par
02635         (*quad_out2).points[0].w = ((*quad_out2).points[3].w + (*quad_out2).points[1].w) / 2;\par
02636         {\cf20 // adl_interpolate_ARGBcolor_on_RGB((*quad_out2).colors[1], (*quad_out2).colors[3], 0.5f, &((*quad_out2).colors[2]));}\par
02637 \par
02638 \par
02639         mat2D_free(line_start);\par
02640         mat2D_free(line_end);\par
02641 \par
02642         ae_assert_quad_is_valid(*quad_out1);\par
02643 \par
02644         {\cf19 return} 2;\par
02645     \} {\cf19 else} {\cf19 if} (inside_points_count == 3 && outside_points_count == 1) \{\par
02646         Mat2D line_start = mat2D_alloc(3, 1);\par
02647         Mat2D line_end   = mat2D_alloc(3, 1);\par
02648         \par
02649         *quad_out1 = quad_in;\par
02650 \par
02651         (*quad_out1).points[0] = inside_points[0];\par
02652         (*quad_out1).points[1] = inside_points[1];\par
02653         (*quad_out1).points[2] = inside_points[2];\par
02654         ae_point_to_mat2D(inside_points[2], line_start);\par
02655         ae_point_to_mat2D(outside_points[0], line_end);\par
02656         (*quad_out1).points[3] = ae_line_itersect_plane(plane_p, plane_n, line_start, line_end, &t);\par
02657         (*quad_out1).points[3].w = t * (outside_points[0].w - inside_points[2].w) + inside_points[2].w;\par
02658 \par
02659         mat2D_free(line_start);\par
02660         mat2D_free(line_end);\par
02661 \par
02662         ae_assert_quad_is_valid(*quad_out1);\par
02663 \par
02664         {\cf19 return} 1;\par
02665     \}\par
02666     {\cf19 return} -1;\par
02667 \}\par
02668 \par
02682 {\cf18 void} ae_projection_mat_set(Mat2D proj_mat,{\cf18 float} aspect_ratio, {\cf18 float} FOV_deg, {\cf18 float} z_near, {\cf18 float} z_far)\par
02683 \{\par
02684     AE_ASSERT(4 == proj_mat.cols); \par
02685     AE_ASSERT(4 == proj_mat.rows); \par
02686     AE_ASSERT(FOV_deg && {\cf22 "FOV needs to bee bigger then zero"});\par
02687 \par
02688     mat2D_fill(proj_mat, 0);\par
02689 \par
02690     {\cf18 float} field_of_view = 1.0f / tanf(0.5f * FOV_deg * PI / 180);\par
02691     {\cf18 float} z_normalization = z_far / (z_far - z_near);\par
02692 \par
02693     MAT2D_AT(proj_mat, 0, 0) = aspect_ratio * field_of_view;\par
02694     MAT2D_AT(proj_mat, 1, 1) = field_of_view;\par
02695     MAT2D_AT(proj_mat, 2, 2) = z_normalization;\par
02696     MAT2D_AT(proj_mat, 2, 3) = 1;\par
02697     MAT2D_AT(proj_mat, 3, 2) = - z_normalization * z_near;\par
02698 \}\par
02699 \par
02716 {\cf18 void} ae_view_mat_set(Mat2D view_mat, Camera camera, Mat2D up)\par
02717 \{\par
02718     Mat2D DCM = mat2D_alloc(3,3);\par
02719     Mat2D DCM_trans = mat2D_alloc(3,3);\par
02720     mat2D_set_DCM_zyx(DCM, camera.yaw_offset_deg, camera.pitch_offset_deg, camera.roll_offset_deg);\par
02721     mat2D_transpose(DCM_trans, DCM);\par
02722 \par
02723     Mat2D temp_vec = mat2D_alloc(3, 1);\par
02724     Mat2D camera_direction = mat2D_alloc(3, 1);\par
02725 \par
02726     {\cf20 /* rotating camera_direction */}\par
02727     mat2D_dot(camera_direction, DCM_trans, camera.direction);\par
02728 \par
02729     {\cf20 /* calc new forward direction */}\par
02730     Mat2D new_forward = mat2D_alloc(3, 1);\par
02731     mat2D_copy(new_forward, camera_direction);\par
02732     mat2D_mult(new_forward, 1.0 / mat2D_calc_norma(new_forward));\par
02733 \par
02734     {\cf20 /* calc new up direction */}\par
02735     mat2D_copy(temp_vec, new_forward);\par
02736     mat2D_mult(temp_vec, mat2D_dot_product(up, new_forward));\par
02737     Mat2D new_up = mat2D_alloc(3, 1);\par
02738     mat2D_copy(new_up, up);\par
02739     mat2D_sub(new_up, temp_vec);\par
02740     mat2D_mult(new_up, 1.0 / mat2D_calc_norma(new_up));\par
02741 \par
02742     {\cf20 /* calc new right direction */}\par
02743     Mat2D new_right = mat2D_alloc(3, 1);\par
02744     mat2D_cross(new_right, new_up, new_forward);\par
02745     mat2D_mult(new_right, 1.0 / mat2D_calc_norma(new_right));\par
02746 \par
02747     mat2D_copy(camera.camera_x, new_right);\par
02748     mat2D_copy(camera.camera_y, new_up);\par
02749     mat2D_copy(camera.camera_z, new_forward);\par
02750 \par
02751     {\cf20 /* adding offset to init_position */}\par
02752     {\cf20 // mat2D_add(camera_pos, camera.offset_position);}\par
02753 \par
02754     mat2D_copy(temp_vec, camera.camera_x);\par
02755     mat2D_mult(temp_vec, MAT2D_AT(camera.offset_position, 0, 0));\par
02756     mat2D_add(camera.current_position, temp_vec);\par
02757     mat2D_copy(temp_vec, camera.camera_y);\par
02758     mat2D_mult(temp_vec, MAT2D_AT(camera.offset_position, 1, 0));\par
02759     mat2D_add(camera.current_position, temp_vec);\par
02760     mat2D_copy(temp_vec, camera.camera_z);\par
02761     mat2D_mult(temp_vec, MAT2D_AT(camera.offset_position, 2, 0));\par
02762     mat2D_add(camera.current_position, temp_vec);\par
02763 \par
02764     mat2D_fill(camera.offset_position, 0);\par
02765 \par
02766     MAT2D_AT(view_mat, 0, 0) = MAT2D_AT(new_right, 0, 0);\par
02767     MAT2D_AT(view_mat, 0, 1) = MAT2D_AT(new_up, 0, 0);\par
02768     MAT2D_AT(view_mat, 0, 2) = MAT2D_AT(new_forward, 0, 0);\par
02769     MAT2D_AT(view_mat, 0, 3) = 0;\par
02770     MAT2D_AT(view_mat, 1, 0) = MAT2D_AT(new_right, 1, 0);\par
02771     MAT2D_AT(view_mat, 1, 1) = MAT2D_AT(new_up, 1, 0);\par
02772     MAT2D_AT(view_mat, 1, 2) = MAT2D_AT(new_forward, 1, 0);\par
02773     MAT2D_AT(view_mat, 1, 3) = 0;\par
02774     MAT2D_AT(view_mat, 2, 0) = MAT2D_AT(new_right, 2, 0);\par
02775     MAT2D_AT(view_mat, 2, 1) = MAT2D_AT(new_up, 2, 0);\par
02776     MAT2D_AT(view_mat, 2, 2) = MAT2D_AT(new_forward, 2, 0);\par
02777     MAT2D_AT(view_mat, 2, 3) = 0;\par
02778     MAT2D_AT(view_mat, 3, 0) = - mat2D_dot_product(camera.current_position, new_right);\par
02779     MAT2D_AT(view_mat, 3, 1) = - mat2D_dot_product(camera.current_position, new_up);\par
02780     MAT2D_AT(view_mat, 3, 2) = - mat2D_dot_product(camera.current_position, new_forward);\par
02781     MAT2D_AT(view_mat, 3, 3) = 1;\par
02782 \par
02783 \par
02784     mat2D_free(temp_vec);\par
02785     mat2D_free(new_forward);\par
02786     mat2D_free(new_up);\par
02787     mat2D_free(new_right);\par
02788     mat2D_free(DCM);\par
02789     mat2D_free(DCM_trans);\par
02790     mat2D_free(camera_direction);\par
02791 \}\par
02792 \par
02806 Point ae_point_project_world2screen(Mat2D view_mat, Mat2D proj_mat, Point src, {\cf18 int} window_w, {\cf18 int} window_h)\par
02807 \{\par
02808     Point view_point = ae_point_project_world2view(view_mat, src);\par
02809     Point screen_point = ae_point_project_view2screen(proj_mat, view_point, window_w, window_h);\par
02810 \par
02811     {\cf19 return} screen_point;\par
02812 \}\par
02813 \par
02824 Point ae_point_project_world2view(Mat2D view_mat, Point src)\par
02825 \{\par
02826     ae_assert_point_is_valid(src);\par
02827 \par
02828     Mat2D src_point_mat = mat2D_alloc(1,4);\par
02829     Mat2D des_point_mat = mat2D_alloc(1,4);\par
02830 \par
02831     Point des_point = \{0\};\par
02832 \par
02833     MAT2D_AT(src_point_mat, 0, 0) = src.x;\par
02834     MAT2D_AT(src_point_mat, 0, 1) = src.y;\par
02835     MAT2D_AT(src_point_mat, 0, 2) = src.z;\par
02836     MAT2D_AT(src_point_mat, 0, 3) = 1;\par
02837 \par
02838     mat2D_dot(des_point_mat, src_point_mat, view_mat);\par
02839 \par
02840     {\cf18 double} w = MAT2D_AT(des_point_mat, 0, 3);\par
02841     AE_ASSERT(w == 1);\par
02842     des_point.x = MAT2D_AT(des_point_mat, 0, 0) / w;\par
02843     des_point.y = MAT2D_AT(des_point_mat, 0, 1) / w;\par
02844     des_point.z = MAT2D_AT(des_point_mat, 0, 2) / w;\par
02845     des_point.w = w;\par
02846 \par
02847     mat2D_free(src_point_mat);\par
02848     mat2D_free(des_point_mat);\par
02849 \par
02850     {\cf19 return} des_point;\par
02851 \par
02852 \}\par
02853 \par
02870 Point ae_point_project_view2screen(Mat2D proj_mat, Point src, {\cf18 int} window_w, {\cf18 int} window_h)\par
02871 \{\par
02872     ae_assert_point_is_valid(src);\par
02873 \par
02874     Mat2D src_point_mat = mat2D_alloc(1,4);\par
02875     Mat2D des_point_mat = mat2D_alloc(1,4);\par
02876     Point des;\par
02877 \par
02878     MAT2D_AT(src_point_mat, 0, 0) = src.x;\par
02879     MAT2D_AT(src_point_mat, 0, 1) = src.y;\par
02880     MAT2D_AT(src_point_mat, 0, 2) = src.z;\par
02881     MAT2D_AT(src_point_mat, 0, 3) = 1;\par
02882 \par
02883     mat2D_dot(des_point_mat, src_point_mat, proj_mat);\par
02884 \par
02885     {\cf18 double} w = MAT2D_AT(des_point_mat, 0, 3);\par
02886     {\cf19 if} (fabs(w) > 1e-3) \{\par
02887         des.x = MAT2D_AT(des_point_mat, 0, 0) / w;\par
02888         des.y = MAT2D_AT(des_point_mat, 0, 1) / w;\par
02889         des.z = MAT2D_AT(des_point_mat, 0, 2) / w;\par
02890         des.w = w;\par
02891     \} {\cf19 else} \{\par
02892         {\cf20 // des.x = MAT2D_AT(des_point_mat, 0, 0);}\par
02893         {\cf20 // des.y = MAT2D_AT(des_point_mat, 0, 1);}\par
02894         {\cf20 // des.z = MAT2D_AT(des_point_mat, 0, 2);}\par
02895         {\cf20 // des.w = 1;}\par
02896 \par
02897         des.x = 0;\par
02898         des.y = 0;\par
02899         des.z = 0;\par
02900         des.w = 1;\par
02901     \}\par
02902 \par
02903     mat2D_free(src_point_mat);\par
02904     mat2D_free(des_point_mat);\par
02905 \par
02906     {\cf20 /* scale into view */}\par
02907     des.x += 1;\par
02908     des.y += 1;\par
02909 \par
02910     des.x *= 0.5f * window_w;\par
02911     des.y *= 0.5f * window_h;\par
02912 \par
02913     {\cf19 return} des;\par
02914 \}\par
02915 \par
02933 {\cf18 void} ae_line_project_world2screen(Mat2D view_mat, Mat2D proj_mat, Point start_src, Point end_src, {\cf18 int} window_w, {\cf18 int} window_h, Point *start_des, Point *end_des, Scene *scene)\par
02934 \{\par
02935     Point start_view_point = ae_point_project_world2view(view_mat, start_src);\par
02936     Point end_view_point = ae_point_project_world2view(view_mat, end_src);\par
02937 \par
02938     Mat2D z_p = mat2D_alloc(3, 1);\par
02939     Mat2D z_n = mat2D_alloc(3, 1);\par
02940     mat2D_fill(z_p, 0);\par
02941     mat2D_fill(z_n, 0);\par
02942     MAT2D_AT(z_p, 2, 0) = scene->camera.z_near+0.01;\par
02943     MAT2D_AT(z_n, 2, 0) = 1;\par
02944 \par
02945     Point clipped_start_view_point = \{0\}, clipped_end_view_point = \{0\};\par
02946     {\cf18 int} rc = ae_line_clip_with_plane(start_view_point, end_view_point, z_p, z_n, &clipped_start_view_point, &clipped_end_view_point);           \par
02947 \par
02948     {\cf19 if} (rc == -1) \{\par
02949         fprintf(stderr, {\cf22 "%s:%d: [error] problem with clipping lines\\n"}, __FILE__, __LINE__);\par
02950         exit(1);\par
02951     \} {\cf19 else} {\cf19 if} (rc == 0) \{\par
02952         clipped_start_view_point = (Point)\{-1,-1,1,1\};\par
02953         clipped_end_view_point = (Point)\{-1,-1,1,1\};\par
02954         start_view_point = clipped_start_view_point;\par
02955         end_view_point = clipped_end_view_point;\par
02956         \par
02957         *start_des = start_view_point;\par
02958         *end_des = end_view_point;\par
02959         {\cf19 return};\par
02960 \par
02961     \} {\cf19 else} {\cf19 if} (rc == 1) \{\par
02962         start_view_point = clipped_start_view_point;\par
02963         end_view_point = clipped_end_view_point;\par
02964     \}\par
02965 \par
02966 \par
02967     Point start_screen_point = ae_point_project_view2screen(proj_mat, start_view_point, window_w, window_h);\par
02968     Point end_screen_point = ae_point_project_view2screen(proj_mat, end_view_point, window_w, window_h);\par
02969 \par
02970     mat2D_free(z_p);\par
02971     mat2D_free(z_n);\par
02972 \par
02973     *start_des = start_screen_point;\par
02974     *end_des = end_screen_point;\par
02975 \par
02976 \}\par
02977 \par
02988 Tri ae_tri_transform_to_view(Mat2D view_mat, Tri tri)\par
02989 \{\par
02990     ae_assert_tri_is_valid(tri);\par
02991 \par
02992     Mat2D src_point_mat = mat2D_alloc(1,4);\par
02993     Mat2D des_point_mat = mat2D_alloc(1,4);\par
02994 \par
02995     Tri des_tri = tri;\par
02996 \par
02997     {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
02998         MAT2D_AT(src_point_mat, 0, 0) = tri.points[i].x;\par
02999         MAT2D_AT(src_point_mat, 0, 1) = tri.points[i].y;\par
03000         MAT2D_AT(src_point_mat, 0, 2) = tri.points[i].z;\par
03001         MAT2D_AT(src_point_mat, 0, 3) = 1;\par
03002 \par
03003         mat2D_dot(des_point_mat, src_point_mat, view_mat);\par
03004 \par
03005         {\cf18 double} w = MAT2D_AT(des_point_mat, 0, 3);\par
03006         AE_ASSERT(w == 1);\par
03007         des_tri.points[i].x = MAT2D_AT(des_point_mat, 0, 0) / w;\par
03008         des_tri.points[i].y = MAT2D_AT(des_point_mat, 0, 1) / w;\par
03009         des_tri.points[i].z = MAT2D_AT(des_point_mat, 0, 2) / w;\par
03010         des_tri.points[i].w = w;\par
03011     \}\par
03012 \par
03013     mat2D_free(src_point_mat);\par
03014     mat2D_free(des_point_mat);\par
03015 \par
03016     ae_assert_tri_is_valid(des_tri);\par
03017 \par
03018     {\cf19 return} des_tri;\par
03019 \}\par
03020 \par
03038 Tri_mesh ae_tri_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Tri tri, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode)\par
03039 \{\par
03040     ae_assert_tri_is_valid(tri);\par
03041 \par
03042     Mat2D tri_normal = mat2D_alloc(3, 1);\par
03043     Mat2D temp_camera2tri = mat2D_alloc(3, 1);\par
03044     Mat2D camera2tri = mat2D_alloc(1, 3);\par
03045     Mat2D dot_product = mat2D_alloc(1, 1);\par
03046     Tri des_tri = tri;\par
03047 \par
03048     ae_point_to_mat2D(tri.points[0], temp_camera2tri);\par
03049     mat2D_sub(temp_camera2tri, scene->camera.current_position);\par
03050     mat2D_transpose(camera2tri, temp_camera2tri);\par
03051 \par
03052     {\cf20 /* calc lighting intensity of tri */}\par
03053 {\cf21     #if 1}\par
03054         ae_tri_calc_light_intensity(&des_tri, scene, lighting_mode);\par
03055 {\cf21     #else}\par
03056     {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
03057         ae_point_to_mat2D(tri.normals[i], tri_normal);\par
03058         MAT2D_AT(dot_product, 0, 0) = MAT2D_AT(light_direction, 0, 0) * MAT2D_AT(tri_normal, 0, 0) + MAT2D_AT(light_direction, 1, 0) * MAT2D_AT(tri_normal, 1, 0) + MAT2D_AT(light_direction, 2, 0) * MAT2D_AT(tri_normal, 2, 0);\par
03059         des_tri.light_intensity[i] = fmaxf(0.2, fminf(1, MAT2D_AT(dot_product, 0, 0)));\par
03060     \}\par
03061 {\cf21     #endif}\par
03062 \par
03063     {\cf20 /* calc if tri is visible to the camera */}\par
03064     ae_tri_calc_normal(tri_normal, tri);\par
03065     {\cf20 // ae_point_to_mat2D(tri.normals[0], tri_normal);}\par
03066     MAT2D_AT(dot_product, 0, 0) = MAT2D_AT(camera2tri, 0, 0) * MAT2D_AT(tri_normal, 0, 0) + MAT2D_AT(camera2tri, 0, 1) * MAT2D_AT(tri_normal, 1, 0) + MAT2D_AT(camera2tri, 0, 2) * MAT2D_AT(tri_normal, 2, 0);\par
03067     {\cf19 if} (MAT2D_AT(dot_product, 0, 0) < 0) \{\par
03068         des_tri.to_draw = {\cf17 true};\par
03069     \} {\cf19 else} \{\par
03070         des_tri.to_draw = {\cf17 false};\par
03071     \}\par
03072 \par
03073     {\cf20 /* transform tri to camera view */}\par
03074     tri = ae_tri_transform_to_view(view_mat, tri);\par
03075 \par
03076     {\cf20 // Tri_mesh temp_tri_array; }\par
03077     {\cf20 // ada_init_array(Tri, temp_tri_array);}\par
03078     {\cf20 // ada_appand(Tri, temp_tri_array, tri);}\par
03079     {\cf20 /* clip tir */}\par
03080     Tri clipped_tri1 = \{0\};\par
03081     Tri clipped_tri2 = \{0\};\par
03082     Mat2D z_plane_p = mat2D_alloc(3, 1);\par
03083     Mat2D z_plane_n = mat2D_alloc(3, 1);\par
03084     mat2D_fill(z_plane_p, 0);\par
03085     mat2D_fill(z_plane_n, 0);\par
03086     MAT2D_AT(z_plane_p, 2, 0) = scene->camera.z_near+0.01;\par
03087     MAT2D_AT(z_plane_n, 2, 0) = 1;\par
03088 \par
03089     {\cf18 int} num_clipped_tri = ae_tri_clip_with_plane(tri, z_plane_p, z_plane_n, &clipped_tri1, &clipped_tri2);\par
03090     Tri_mesh temp_tri_array; \par
03091     ada_init_array(Tri, temp_tri_array);\par
03092     {\cf19 if} (num_clipped_tri == -1) \{\par
03093         fprintf(stderr, {\cf22 "%s:%d: [error] problem with clipping triangles\\n"}, __FILE__, __LINE__);\par
03094         exit(1);\par
03095     \} {\cf19 else} {\cf19 if} (num_clipped_tri == 0) \{\par
03096         ;\par
03097     \} {\cf19 else} {\cf19 if} (num_clipped_tri == 1) \{\par
03098         ae_assert_tri_is_valid(clipped_tri1);\par
03099         ada_appand(Tri, temp_tri_array, clipped_tri1);\par
03100     \} {\cf19 else} {\cf19 if} (num_clipped_tri == 2) \{\par
03101         ae_assert_tri_is_valid(clipped_tri1);\par
03102         ae_assert_tri_is_valid(clipped_tri2);\par
03103         ada_appand(Tri, temp_tri_array, clipped_tri1);\par
03104         ada_appand(Tri, temp_tri_array, clipped_tri2);\par
03105     \}\par
03106     mat2D_free(z_plane_p);\par
03107     mat2D_free(z_plane_n);\par
03108 \par
03109     {\cf19 for} ({\cf18 size_t} temp_tri_index = 0; temp_tri_index < temp_tri_array.length; temp_tri_index++) \{\par
03110         {\cf20 /* project tri to screen */}\par
03111         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
03112             des_tri.points[i] = ae_point_project_view2screen(proj_mat, temp_tri_array.elements[temp_tri_index].points[i], window_w, window_h);\par
03113 \par
03114             {\cf19 if} (des_tri.points[i].w) \{\par
03115                 des_tri.tex_points[i].x /= des_tri.points[i].w;\par
03116                 des_tri.tex_points[i].y /= des_tri.points[i].w;\par
03117                 des_tri.tex_points[i].z /= des_tri.points[i].w;\par
03118                 des_tri.tex_points[i].w  = des_tri.points[i].w;\par
03119             \}\par
03120 \par
03121         \}\par
03122         ae_assert_tri_is_valid(des_tri);\par
03123         temp_tri_array.elements[temp_tri_index] = des_tri;\par
03124     \}\par
03125 \par
03126 \par
03127     mat2D_free(tri_normal);\par
03128     mat2D_free(temp_camera2tri);\par
03129     mat2D_free(camera2tri);\par
03130     mat2D_free(dot_product);\par
03131 \par
03132     {\cf19 return} temp_tri_array;\par
03133 \}\par
03134 \par
03151 {\cf18 void} ae_tri_mesh_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Tri_mesh *des, Tri_mesh src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode)\par
03152 \{\par
03153     Tri_mesh temp_des = *des;\par
03154     temp_des.length = 0;\par
03155 \par
03156     {\cf18 size_t} i;\par
03157     {\cf19 for} (i = 0; i < src.length; i++) \{\par
03158         Tri_mesh temp_tri_array = ae_tri_project_world2screen(proj_mat, view_mat, src.elements[i], window_w, window_h, scene, lighting_mode);\par
03159 \par
03160         {\cf19 for} ({\cf18 size_t} tri_index = 0; tri_index < temp_tri_array.length; tri_index++) \{\par
03161             Tri temp_tri = temp_tri_array.elements[tri_index];\par
03162             ada_appand(Tri, temp_des, temp_tri);\par
03163         \}\par
03164 \par
03165         free(temp_tri_array.elements);\par
03166     \}\par
03167 \par
03168     {\cf20 /* clip tir */}\par
03169     {\cf18 int} offset = 0;\par
03170     Mat2D top_p = mat2D_alloc(3, 1);\par
03171     Mat2D top_n = mat2D_alloc(3, 1);\par
03172     mat2D_fill(top_p, 0);\par
03173     mat2D_fill(top_n, 0);\par
03174     MAT2D_AT(top_p, 1, 0) = 0 + offset;\par
03175     MAT2D_AT(top_n, 1, 0) = 1;\par
03176 \par
03177     Mat2D bottom_p = mat2D_alloc(3, 1);\par
03178     Mat2D bottom_n = mat2D_alloc(3, 1);\par
03179     mat2D_fill(bottom_p, 0);\par
03180     mat2D_fill(bottom_n, 0);\par
03181     MAT2D_AT(bottom_p, 1, 0) = window_h - offset;\par
03182     MAT2D_AT(bottom_n, 1, 0) = -1;\par
03183 \par
03184     Mat2D left_p = mat2D_alloc(3, 1);\par
03185     Mat2D left_n = mat2D_alloc(3, 1);\par
03186     mat2D_fill(left_p, 0);\par
03187     mat2D_fill(left_n, 0);\par
03188     MAT2D_AT(left_p, 0, 0) = 0 + offset;\par
03189     MAT2D_AT(left_n, 0, 0) = 1;\par
03190 \par
03191     Mat2D right_p = mat2D_alloc(3, 1);\par
03192     Mat2D right_n = mat2D_alloc(3, 1);\par
03193     mat2D_fill(right_p, 0);\par
03194     mat2D_fill(right_n, 0);\par
03195     MAT2D_AT(right_p, 0, 0) = window_w - offset;\par
03196     MAT2D_AT(right_n, 0, 0) = -1;\par
03197 \par
03198     {\cf19 for} ({\cf18 int} plane_number = 0; plane_number < 4; plane_number++) \{\par
03199         {\cf19 for} ({\cf18 int} tri_index = 0; tri_index < (int)(temp_des.length); tri_index++) \{\par
03200             {\cf19 if} (temp_des.length == 0) \{\par
03201                 {\cf19 break};\par
03202             \}\par
03203             {\cf20 // if (temp_des.elements[tri_index].to_draw == false) \{}\par
03204             {\cf20 //     ada_remove_unordered(Tri, temp_des, tri_index);}\par
03205             {\cf20 //     tri_index--;}\par
03206             {\cf20 //     tri_index = (int)fmaxf((float)tri_index, 0.0f);}\par
03207             {\cf20 //     continue;}\par
03208             {\cf20 // \}}\par
03209             Tri clipped_tri1 = \{0\};\par
03210             Tri clipped_tri2 = \{0\};\par
03211             {\cf18 int} num_clipped_tri;\par
03212             {\cf19 switch} (plane_number) \{\par
03213                 {\cf19 case} 0:\par
03214                     num_clipped_tri = ae_tri_clip_with_plane(temp_des.elements[tri_index], top_p, top_n, &clipped_tri1, &clipped_tri2);\par
03215                 {\cf19 break};\par
03216                 {\cf19 case} 1:\par
03217                     num_clipped_tri = ae_tri_clip_with_plane(temp_des.elements[tri_index], right_p, right_n, &clipped_tri1, &clipped_tri2);\par
03218                 {\cf19 break};\par
03219                 {\cf19 case} 2:\par
03220                     num_clipped_tri = ae_tri_clip_with_plane(temp_des.elements[tri_index], bottom_p, bottom_n, &clipped_tri1, &clipped_tri2);\par
03221                 {\cf19 break};\par
03222                 {\cf19 case} 3:\par
03223                     num_clipped_tri = ae_tri_clip_with_plane(temp_des.elements[tri_index], left_p, left_n, &clipped_tri1, &clipped_tri2);\par
03224                 {\cf19 break};\par
03225             \}\par
03226             {\cf19 if} (num_clipped_tri == -1) \{\par
03227                 fprintf(stderr, {\cf22 "%s:%d: [error] problem with clipping triangles\\n"}, __FILE__, __LINE__);\par
03228                 exit(1);\par
03229             \} {\cf19 else} {\cf19 if} (num_clipped_tri == 0) \{\par
03230                 ada_remove_unordered(Tri, temp_des, tri_index);\par
03231                 tri_index--;\par
03232                 tri_index = (int)fmaxf(({\cf18 float})tri_index, 0.0f);\par
03233             \} {\cf19 else} {\cf19 if} (num_clipped_tri == 1) \{\par
03234                 ae_assert_tri_is_valid(clipped_tri1);\par
03235                 temp_des.elements[tri_index] = clipped_tri1;\par
03236             \} {\cf19 else} {\cf19 if} (num_clipped_tri == 2) \{\par
03237                 ae_assert_tri_is_valid(clipped_tri1);\par
03238                 ae_assert_tri_is_valid(clipped_tri2);\par
03239                 temp_des.elements[tri_index] = clipped_tri1;\par
03240                 ada_insert_unordered(Tri, temp_des, clipped_tri2, tri_index+1);\par
03241             \}\par
03242         \}\par
03243     \}\par
03244 \par
03245     {\cf20 // if (temp_des.length > 2) \{}\par
03246     {\cf20 //     ae_qsort_tri(temp_des.elements, 0, temp_des.length-1);}\par
03247     {\cf20 // \}}\par
03248 \par
03249     mat2D_free(top_p);\par
03250     mat2D_free(top_n);\par
03251     mat2D_free(bottom_p);\par
03252     mat2D_free(bottom_n);\par
03253     mat2D_free(left_p);\par
03254     mat2D_free(left_n);\par
03255     mat2D_free(right_p);\par
03256     mat2D_free(right_n);\par
03257 \par
03258     *des = temp_des;\par
03259 \}\par
03260 \par
03271 Quad ae_quad_transform_to_view(Mat2D view_mat, Quad quad)\par
03272 \{\par
03273     ae_assert_quad_is_valid(quad);\par
03274 \par
03275     Mat2D src_point_mat = mat2D_alloc(1,4);\par
03276     Mat2D des_point_mat = mat2D_alloc(1,4);\par
03277 \par
03278     Quad des_quad = quad;\par
03279 \par
03280     {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
03281         MAT2D_AT(src_point_mat, 0, 0) = quad.points[i].x;\par
03282         MAT2D_AT(src_point_mat, 0, 1) = quad.points[i].y;\par
03283         MAT2D_AT(src_point_mat, 0, 2) = quad.points[i].z;\par
03284         MAT2D_AT(src_point_mat, 0, 3) = 1;\par
03285 \par
03286         mat2D_dot(des_point_mat, src_point_mat, view_mat);\par
03287 \par
03288         {\cf18 double} w = MAT2D_AT(des_point_mat, 0, 3);\par
03289         AE_ASSERT(w == 1);\par
03290         des_quad.points[i].x = MAT2D_AT(des_point_mat, 0, 0) / w;\par
03291         des_quad.points[i].y = MAT2D_AT(des_point_mat, 0, 1) / w;\par
03292         des_quad.points[i].z = MAT2D_AT(des_point_mat, 0, 2) / w;\par
03293         des_quad.points[i].w = w;\par
03294     \}\par
03295 \par
03296     mat2D_free(src_point_mat);\par
03297     mat2D_free(des_point_mat);\par
03298 \par
03299     ae_assert_quad_is_valid(des_quad);\par
03300 \par
03301     {\cf19 return} des_quad;\par
03302 \}\par
03303 \par
03321 Quad_mesh ae_quad_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Quad quad, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode)\par
03322 \{\par
03323     ae_assert_quad_is_valid(quad);\par
03324 \par
03325     Mat2D quad_normal = mat2D_alloc(3, 1);\par
03326     Mat2D camera2quad = mat2D_alloc(3, 1);\par
03327     Mat2D dot_product = mat2D_alloc(1, 1);\par
03328     Quad des_quad = quad;\par
03329 \par
03330     {\cf20 /* calc lighting intensity of tri */}\par
03331 {\cf21     #if 1}\par
03332         ae_quad_calc_light_intensity(&des_quad, scene, lighting_mode);\par
03333 {\cf21     #else}\par
03334     {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
03335         ae_point_to_mat2D(quad.normals[i], quad_normal);\par
03336         MAT2D_AT(dot_product, 0, 0) = scene->light_source0.light_direction_or_pos.x * MAT2D_AT(quad_normal, 0, 0) + scene->light_source0.light_direction_or_pos.y * MAT2D_AT(quad_normal, 1, 0) + scene->light_source0.light_direction_or_pos.z * MAT2D_AT(quad_normal, 2, 0);\par
03337         des_quad.light_intensity[i] = fmaxf(0.2, fminf(1, MAT2D_AT(dot_product, 0, 0)));\par
03338     \}\par
03339 {\cf21     #endif}\par
03340 \par
03341     {\cf20 /* calc if quad is visible to the camera */}\par
03342     {\cf18 bool} visible = 0;\par
03343 {\cf21     #if 1}\par
03344     {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
03345         ae_point_to_mat2D(quad.points[i], camera2quad);\par
03346         mat2D_sub(camera2quad, scene->camera.current_position);\par
03347 \par
03348         ae_point_to_mat2D(quad.normals[i], quad_normal);\par
03349         MAT2D_AT(dot_product, 0, 0) = MAT2D_AT(camera2quad, 0, 0) * MAT2D_AT(quad_normal, 0, 0) + MAT2D_AT(camera2quad, 1, 0) * MAT2D_AT(quad_normal, 1, 0) + MAT2D_AT(camera2quad, 2, 0) * MAT2D_AT(quad_normal, 2, 0);\par
03350         visible = visible || (MAT2D_AT(dot_product, 0, 0) < 0);\par
03351     \}\par
03352 {\cf21     #else}\par
03353     ae_point_to_mat2D(quad.points[0], camera2quad);\par
03354     mat2D_sub(camera2quad, scene->camera.current_position);\par
03355 \par
03356     Point ave_norm = ae_quad_get_average_normal(quad);\par
03357     ae_point_to_mat2D(ave_norm, quad_normal);\par
03358     MAT2D_AT(dot_product, 0, 0) = MAT2D_AT(camera2quad, 0, 0) * MAT2D_AT(quad_normal, 0, 0) + MAT2D_AT(camera2quad, 1, 0) * MAT2D_AT(quad_normal, 1, 0) + MAT2D_AT(camera2quad, 2, 0) * MAT2D_AT(quad_normal, 2, 0);\par
03359     visible = MAT2D_AT(dot_product, 0, 0) < 0;\par
03360 {\cf21     #endif}\par
03361 \par
03362     {\cf19 if} (visible) \{\par
03363         des_quad.to_draw = {\cf17 true};\par
03364     \} {\cf19 else} \{\par
03365         des_quad.to_draw = {\cf17 false};\par
03366     \}\par
03367 \par
03368     {\cf20 /* transform quad to camera view */}\par
03369     quad = ae_quad_transform_to_view(view_mat, quad);\par
03370 \par
03371     {\cf20 /* clip quad */}\par
03372     Quad  clipped_quad1 = \{0\}, clipped_quad2 = \{0\};\par
03373     Mat2D z_plane_p = mat2D_alloc(3, 1);\par
03374     Mat2D z_plane_n = mat2D_alloc(3, 1);\par
03375     mat2D_fill(z_plane_p, 0);\par
03376     mat2D_fill(z_plane_n, 0);\par
03377     MAT2D_AT(z_plane_p, 2, 0) = scene->camera.z_near+0.01;\par
03378     MAT2D_AT(z_plane_n, 2, 0) = 1;\par
03379 \par
03380     {\cf18 int} num_clipped_quad = ae_quad_clip_with_plane(quad, z_plane_p, z_plane_n, &clipped_quad1, &clipped_quad2);\par
03381     Quad_mesh temp_quad_array; \par
03382     ada_init_array(Quad, temp_quad_array);\par
03383     {\cf19 if} (num_clipped_quad == -1) \{\par
03384         fprintf(stderr, {\cf22 "%s:%d: [error] problem with clipping quad\\n"}, __FILE__, __LINE__);\par
03385         exit(1);\par
03386     \} {\cf19 else} {\cf19 if} (num_clipped_quad == 0) \{\par
03387         ;\par
03388     \} {\cf19 else} {\cf19 if} (num_clipped_quad == 1) \{\par
03389         ae_assert_quad_is_valid(clipped_quad1);\par
03390         ada_appand(Quad, temp_quad_array, clipped_quad1);\par
03391     \} {\cf19 else} {\cf19 if} (num_clipped_quad == 2) \{\par
03392         ae_assert_quad_is_valid(clipped_quad1);\par
03393         ae_assert_quad_is_valid(clipped_quad2);\par
03394         ada_appand(Quad, temp_quad_array, clipped_quad1);\par
03395         ada_appand(Quad, temp_quad_array, clipped_quad2);\par
03396     \}\par
03397     mat2D_free(z_plane_p);\par
03398     mat2D_free(z_plane_n);\par
03399 \par
03400     {\cf19 for} ({\cf18 size_t} temp_quad_index = 0; temp_quad_index < temp_quad_array.length; temp_quad_index++) \{\par
03401         {\cf20 /* project quad to screen */}\par
03402         {\cf19 for} ({\cf18 int} i = 0; i < 4; i++) \{\par
03403             des_quad.points[i] = ae_point_project_view2screen(proj_mat, temp_quad_array.elements[temp_quad_index].points[i], window_w, window_h);\par
03404 \par
03405         \}\par
03406         ae_assert_quad_is_valid(des_quad);\par
03407         temp_quad_array.elements[temp_quad_index] = des_quad;\par
03408     \}\par
03409 \par
03410 \par
03411     mat2D_free(quad_normal);\par
03412     mat2D_free(camera2quad);\par
03413     mat2D_free(dot_product);\par
03414 \par
03415     {\cf19 return} temp_quad_array;\par
03416 \}\par
03417 \par
03434 {\cf18 void} ae_quad_mesh_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Quad_mesh *des, Quad_mesh src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene, Lighting_mode lighting_mode)\par
03435 \{\par
03436     Quad_mesh temp_des = *des;\par
03437     temp_des.length = 0;\par
03438 \par
03439     {\cf18 size_t} i;\par
03440     {\cf19 for} (i = 0; i < src.length; i++) \{\par
03441         Quad_mesh temp_quad_array = ae_quad_project_world2screen(proj_mat, view_mat, src.elements[i], window_w, window_h, scene, lighting_mode);\par
03442 \par
03443         {\cf19 for} ({\cf18 size_t} quad_index = 0; quad_index < temp_quad_array.length; quad_index++) \{\par
03444             Quad temp_quad = temp_quad_array.elements[quad_index];\par
03445             ada_appand(Quad, temp_des, temp_quad);\par
03446         \}\par
03447 \par
03448         free(temp_quad_array.elements);\par
03449     \}\par
03450 \par
03451 \par
03452     {\cf20 /* clip quad */}\par
03453     {\cf18 int} offset = 0;\par
03454     Mat2D top_p = mat2D_alloc(3, 1);\par
03455     Mat2D top_n = mat2D_alloc(3, 1);\par
03456     mat2D_fill(top_p, 0);\par
03457     mat2D_fill(top_n, 0);\par
03458     MAT2D_AT(top_p, 1, 0) = 0 + offset;\par
03459     MAT2D_AT(top_n, 1, 0) = 1;\par
03460 \par
03461     Mat2D bottom_p = mat2D_alloc(3, 1);\par
03462     Mat2D bottom_n = mat2D_alloc(3, 1);\par
03463     mat2D_fill(bottom_p, 0);\par
03464     mat2D_fill(bottom_n, 0);\par
03465     MAT2D_AT(bottom_p, 1, 0) = window_h - offset;\par
03466     MAT2D_AT(bottom_n, 1, 0) = -1;\par
03467 \par
03468     Mat2D left_p = mat2D_alloc(3, 1);\par
03469     Mat2D left_n = mat2D_alloc(3, 1);\par
03470     mat2D_fill(left_p, 0);\par
03471     mat2D_fill(left_n, 0);\par
03472     MAT2D_AT(left_p, 0, 0) = 0 + offset;\par
03473     MAT2D_AT(left_n, 0, 0) = 1;\par
03474 \par
03475     Mat2D right_p = mat2D_alloc(3, 1);\par
03476     Mat2D right_n = mat2D_alloc(3, 1);\par
03477     mat2D_fill(right_p, 0);\par
03478     mat2D_fill(right_n, 0);\par
03479     MAT2D_AT(right_p, 0, 0) = window_w - offset;\par
03480     MAT2D_AT(right_n, 0, 0) = -1;\par
03481 \par
03482     {\cf19 for} ({\cf18 int} plane_number = 0; plane_number < 4; plane_number++) \{\par
03483         {\cf19 for} ({\cf18 int} quad_index = 0; quad_index < (int)(temp_des.length); quad_index++) \{\par
03484             {\cf19 if} (temp_des.length == 0) \{\par
03485                 {\cf19 break};\par
03486             \}\par
03487             {\cf20 // if (temp_des.elements[quad_index].to_draw == false) \{}\par
03488             {\cf20 //     ada_remove_unordered(Quad, temp_des, quad_index);}\par
03489             {\cf20 //     quad_index--;}\par
03490             {\cf20 //     quad_index = (int)fmaxf((float)quad_index, 0.0f);}\par
03491             {\cf20 //     continue;}\par
03492             {\cf20 // \}}\par
03493             Quad clipped_quad1 = \{0\}, clipped_quad2 = \{0\};\par
03494             {\cf18 int} num_clipped_quad;\par
03495             {\cf19 switch} (plane_number) \{\par
03496                 {\cf19 case} 0:\par
03497                     num_clipped_quad = ae_quad_clip_with_plane(temp_des.elements[quad_index], top_p, top_n, &clipped_quad1, &clipped_quad2);\par
03498                 {\cf19 break};\par
03499                 {\cf19 case} 1:\par
03500                     num_clipped_quad = ae_quad_clip_with_plane(temp_des.elements[quad_index], right_p, right_n, &clipped_quad1, &clipped_quad2);\par
03501                 {\cf19 break};\par
03502                 {\cf19 case} 2:\par
03503                     num_clipped_quad = ae_quad_clip_with_plane(temp_des.elements[quad_index], bottom_p, bottom_n, &clipped_quad1, &clipped_quad2);\par
03504                 {\cf19 break};\par
03505                 {\cf19 case} 3:\par
03506                     num_clipped_quad = ae_quad_clip_with_plane(temp_des.elements[quad_index], left_p, left_n, &clipped_quad1, &clipped_quad2);\par
03507                 {\cf19 break};\par
03508             \}\par
03509             {\cf19 if} (num_clipped_quad == -1) \{\par
03510                 fprintf(stderr, {\cf22 "%s:%d: [error] problem with clipping quads\\n"}, __FILE__, __LINE__);\par
03511                 exit(1);\par
03512             \} {\cf19 else} {\cf19 if} (num_clipped_quad == 0) \{\par
03513                 ada_remove_unordered(Quad, temp_des, quad_index);\par
03514                 quad_index--;\par
03515                 quad_index = (int)fmaxf(({\cf18 float})quad_index, 0.0f);\par
03516             \} {\cf19 else} {\cf19 if} (num_clipped_quad == 1) \{\par
03517                 ae_assert_quad_is_valid(clipped_quad1);\par
03518                 temp_des.elements[quad_index] = clipped_quad1;\par
03519             \} {\cf19 else} {\cf19 if} (num_clipped_quad == 2) \{\par
03520                 ae_assert_quad_is_valid(clipped_quad1);\par
03521                 ae_assert_quad_is_valid(clipped_quad2);\par
03522                 temp_des.elements[quad_index] = clipped_quad1;\par
03523                 ada_insert_unordered(Quad, temp_des, clipped_quad2, quad_index+1);\par
03524                 quad_index++;\par
03525             \}\par
03526         \}\par
03527     \}\par
03528 \par
03529     mat2D_free(top_p);\par
03530     mat2D_free(top_n);\par
03531     mat2D_free(bottom_p);\par
03532     mat2D_free(bottom_n);\par
03533     mat2D_free(left_p);\par
03534     mat2D_free(left_n);\par
03535     mat2D_free(right_p);\par
03536     mat2D_free(right_n);\par
03537 \par
03538     *des = temp_des;\par
03539 \}\par
03540 \par
03541 \par
03558 {\cf18 void} ae_curve_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Curve *des, Curve src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene)\par
03559 \{\par
03560     ae_curve_copy(des, src);\par
03561     Curve temp_des = *des;\par
03562     {\cf20 /* set planes */}\par
03563     {\cf18 int} offset = 50;\par
03564     Mat2D top_p = mat2D_alloc(3, 1);\par
03565     Mat2D top_n = mat2D_alloc(3, 1);\par
03566     mat2D_fill(top_p, 0);\par
03567     mat2D_fill(top_n, 0);\par
03568     MAT2D_AT(top_p, 1, 0) = 0 + offset;\par
03569     MAT2D_AT(top_n, 1, 0) = 1;\par
03570     Mat2D bottom_p = mat2D_alloc(3, 1);\par
03571     Mat2D bottom_n = mat2D_alloc(3, 1);\par
03572     mat2D_fill(bottom_p, 0);\par
03573     mat2D_fill(bottom_n, 0);\par
03574     MAT2D_AT(bottom_p, 1, 0) = window_h - offset;\par
03575     MAT2D_AT(bottom_n, 1, 0) = -1;\par
03576     Mat2D left_p = mat2D_alloc(3, 1);\par
03577     Mat2D left_n = mat2D_alloc(3, 1);\par
03578     mat2D_fill(left_p, 0);\par
03579     mat2D_fill(left_n, 0);\par
03580     MAT2D_AT(left_p, 0, 0) = 0 + offset;\par
03581     MAT2D_AT(left_n, 0, 0) = 1;\par
03582     Mat2D right_p = mat2D_alloc(3, 1);\par
03583     Mat2D right_n = mat2D_alloc(3, 1);\par
03584     mat2D_fill(right_p, 0);\par
03585     mat2D_fill(right_n, 0);\par
03586     MAT2D_AT(right_p, 0, 0) = window_w - offset;\par
03587     MAT2D_AT(right_n, 0, 0) = -1;\par
03588 \par
03589     {\cf19 for} ({\cf18 size_t} point_index = 0; point_index < temp_des.length-1; point_index++) \{\par
03590         Point start_src_point = src.elements[point_index];\par
03591         Point end_src_point = src.elements[point_index+1];\par
03592 \par
03593         Point start_des_point = \{0\}, end_des_point = \{0\};\par
03594 \par
03595         ae_line_project_world2screen(view_mat, proj_mat, start_src_point, end_src_point, window_w, window_h, &start_des_point, &end_des_point, scene);\par
03596 \par
03597 \par
03598         Point clipped_start_des_point = \{0\}, clipped_end_des_point = \{0\};\par
03599 \par
03600         {\cf19 for} ({\cf18 int} plane_number = 0; plane_number < 4; plane_number++) \{\par
03601             {\cf18 int} rc;\par
03602             {\cf19 switch} (plane_number) \{\par
03603                 {\cf19 case} 0:\par
03604                     rc = ae_line_clip_with_plane(start_des_point, end_des_point, top_p, top_n, &clipped_start_des_point, &clipped_end_des_point);           \par
03605                 {\cf19 break};\par
03606                 {\cf19 case} 1:\par
03607                     rc = ae_line_clip_with_plane(start_des_point, end_des_point, right_p, right_n, &clipped_start_des_point, &clipped_end_des_point);           \par
03608                 {\cf19 break};\par
03609                 {\cf19 case} 2:\par
03610                     rc = ae_line_clip_with_plane(start_des_point, end_des_point, bottom_p, bottom_n, &clipped_start_des_point, &clipped_end_des_point);           \par
03611                 {\cf19 break};\par
03612                 {\cf19 case} 3:\par
03613                     rc = ae_line_clip_with_plane(start_des_point, end_des_point, left_p, left_n, &clipped_start_des_point, &clipped_end_des_point);           \par
03614                 {\cf19 break};\par
03615             \}\par
03616             {\cf19 if} (rc == -1) \{\par
03617                 fprintf(stderr, {\cf22 "%s:%d: [error] problem with clipping lines\\n"}, __FILE__, __LINE__);\par
03618                 exit(1);\par
03619             \} {\cf19 else} {\cf19 if} (rc == 0) \{\par
03620                 clipped_start_des_point = (Point)\{-1,-1,1,1\};\par
03621                 clipped_end_des_point = (Point)\{-1,-1,1,1\};\par
03622                 start_des_point = clipped_start_des_point;\par
03623                 end_des_point = clipped_end_des_point;\par
03624                 temp_des.elements[point_index] = start_des_point;\par
03625                 temp_des.elements[point_index+1] = end_des_point;\par
03626             \} {\cf19 else} {\cf19 if} (rc == 1) \{\par
03627                 start_des_point = clipped_start_des_point;\par
03628                 end_des_point = clipped_end_des_point;\par
03629                 temp_des.elements[point_index] = start_des_point;\par
03630                 temp_des.elements[point_index+1] = end_des_point;\par
03631             \}\par
03632         \}\par
03633 \par
03634     \}\par
03635 \par
03636     Point default_point = (Point)\{-1,-1,1,1\};\par
03637     {\cf19 for} ({\cf18 int} i = 0; i < (int)temp_des.length; i++) \{\par
03638         {\cf19 if} (ae_points_equal(temp_des.elements[i], default_point)) \{\par
03639             ada_remove(Point, temp_des, i);\par
03640             i--;\par
03641         \}\par
03642     \}\par
03643 \par
03644     *des = temp_des;\par
03645 \par
03646     mat2D_free(top_p);\par
03647     mat2D_free(top_n);\par
03648     mat2D_free(bottom_p);\par
03649     mat2D_free(bottom_n);\par
03650     mat2D_free(left_p);\par
03651     mat2D_free(left_n);\par
03652     mat2D_free(right_p);\par
03653     mat2D_free(right_n);\par
03654 \}\par
03655 \par
03670 {\cf18 void} ae_curve_ada_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Curve_ada *des, Curve_ada src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene)\par
03671 \{\par
03672     {\cf19 if} (src.length == 0) {\cf19 return};\par
03673     {\cf19 for} ({\cf18 size_t} curve_index = 0; curve_index < src.length; curve_index++) \{\par
03674         ae_curve_project_world2screen(proj_mat, view_mat, &(des->elements[curve_index]), src.elements[curve_index], window_w, window_h, scene);\par
03675     \}\par
03676 \}\par
03677 \par
03691 {\cf18 void} ae_grid_project_world2screen(Mat2D proj_mat, Mat2D view_mat, Grid des, Grid src, {\cf18 int} window_w, {\cf18 int} window_h, Scene *scene)\par
03692 \{\par
03693     {\cf19 if} (src.curves.length == 0) {\cf19 return};\par
03694     {\cf19 for} ({\cf18 size_t} curve_index = 0; curve_index < src.curves.length; curve_index++) \{\par
03695         ae_curve_project_world2screen(proj_mat, view_mat, &(des.curves.elements[curve_index]), src.curves.elements[curve_index], window_w, window_h, scene);\par
03696     \}\par
03697 \}\par
03698 \par
03706 {\cf18 void} ae_tri_swap(Tri *v, {\cf18 int} i, {\cf18 int} j)\par
03707 \{\par
03708     Tri temp;\par
03709 \par
03710     temp = v[i];\par
03711     v[i] = v[j];\par
03712     v[j] = temp;\par
03713 \}\par
03714 \par
03725 {\cf18 bool} ae_tri_compare(Tri t1, Tri t2)\par
03726 \{\par
03727     {\cf18 float} t1_z_max = fmaxf(t1.points[0].z, fmaxf(t1.points[1].z, t1.points[2].z));\par
03728     {\cf18 float} t2_z_max = fmaxf(t2.points[0].z, fmaxf(t2.points[1].z, t2.points[2].z));\par
03729 \par
03730     {\cf19 return} t1_z_max > t2_z_max;\par
03731 \}\par
03732 \par
03742 {\cf18 void} ae_tri_qsort(Tri *v, {\cf18 int} left, {\cf18 int} right)\par
03743 \{\par
03744     {\cf18 int} i, last;\par
03745 \par
03746     {\cf19 if} (left >= right)                  {\cf20 /* do nothing if array contains */}\par
03747         {\cf19 return};                         {\cf20 /* fewer than two elements */}\par
03748     ae_tri_swap(v, left, (left + right) / 2);  {\cf20 /* move partition elem */}\par
03749     last = left;                        {\cf20 /* to v[0] */}\par
03750     {\cf19 for} (i = left + 1; i <= right; i++) {\cf20 /* partition */}\par
03751         {\cf19 if} (ae_tri_compare(v[i], v[left]))\par
03752             ae_tri_swap(v, ++last, i);\par
03753     ae_tri_swap(v, left, last); {\cf20 /* restore partition elem */}\par
03754     ae_tri_qsort(v, left, last - 1);\par
03755     ae_tri_qsort(v, last + 1, right);\par
03756 \}\par
03757 \par
03770 {\cf18 double} ae_linear_map({\cf18 double} s, {\cf18 double} min_in, {\cf18 double} max_in, {\cf18 double} min_out, {\cf18 double} max_out)\par
03771 \{\par
03772     {\cf19 return} (min_out + ((s-min_in)*(max_out-min_out))/(max_in-min_in));\par
03773 \}\par
03774 \par
03785 {\cf18 void} ae_z_buffer_copy_to_screen(Mat2D_uint32 screen_mat, Mat2D inv_z_buffer)\par
03786 \{\par
03787     {\cf18 double} max_inv_z = 0;\par
03788     {\cf18 double} min_inv_z = DBL_MAX;\par
03789     {\cf19 for} ({\cf18 size_t} i = 0; i < inv_z_buffer.rows; i++) \{\par
03790         {\cf19 for} ({\cf18 size_t} j = 0; j < inv_z_buffer.cols; j++) \{\par
03791             {\cf19 if} (MAT2D_AT(inv_z_buffer, i, j) > max_inv_z) \{\par
03792                 max_inv_z = MAT2D_AT(inv_z_buffer, i, j);\par
03793             \}\par
03794             {\cf19 if} (MAT2D_AT(inv_z_buffer, i, j) < min_inv_z && MAT2D_AT(inv_z_buffer, i, j) > 0) \{\par
03795                 min_inv_z = MAT2D_AT(inv_z_buffer, i, j);\par
03796             \}\par
03797         \}\par
03798     \}\par
03799     {\cf19 for} ({\cf18 size_t} i = 0; i < inv_z_buffer.rows; i++) \{\par
03800         {\cf19 for} ({\cf18 size_t} j = 0; j < inv_z_buffer.cols; j++) \{\par
03801             {\cf18 double} z_fraq = MAT2D_AT(inv_z_buffer, i, j);\par
03802             z_fraq = fmax(z_fraq, min_inv_z);\par
03803             z_fraq = ae_linear_map(z_fraq, min_inv_z, max_inv_z, 0.1, 1);\par
03804             uint32_t color = RGB_hexRGB(0xFF*z_fraq, 0xFF*z_fraq, 0xFF*z_fraq); \par
03805             MAT2D_AT_UINT32(screen_mat, i, j) = color;\par
03806         \}\par
03807     \}\par
03808 \}\par
03809 \par
03810 {\cf21 #endif }{\cf20 /* ALMOG_ENGINE_IMPLEMENTATION */}{\cf21  }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/include/Almog_String_Manipulation.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_String_Manipulation.h}
{\xe \v src/include/Almog_String_Manipulation.h}
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lightweight string and line manipulation helpers. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include <ctype.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <assert.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Almog_String_Manipulation.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__String__Manipulation_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Almog__String__Manipulation_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ASM_MAXDIR}\~ 100\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generic maximum directory length constant (not used by the functions in this header but available to callers). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ASM_MAX_LEN_LINE}\~ (int)1e3\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Maximum number of characters read by asm_get_line (excluding the terminating null). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b asm_dprintSTRING}(expr)\~ printf(#expr " = %s\\n", expr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print a C string expression as "expr = value\\n". }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b asm_dprintCHAR}(expr)\~ printf(#expr " = %c\\n", expr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print a character expression as "expr = c\\n". }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b asm_dprintINT}(expr)\~ printf(#expr " = %d\\n", expr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print an integer expression as "expr = n\\n". }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b asm_dprintSIZE_T}(expr)\~ printf(#expr " = %zu\\n", expr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print a size_t expression as "expr = n\\n". }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b asm_get_line} (FILE *fp, char *dst)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read a single line from a stream into a buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b asm_length} (char *str)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the length of a null-terminated C string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b asm_get_next_word_from_line} (char *dst, char *src, char seperator)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Extract the next word from a line without modifying the source. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b asm_copy_array_by_indesies} (char *target, int start, int end, char *src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a substring [start, end) from src into target and null-terminate. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b asm_get_word_and_cut} (char *dst, char *src, char seperator)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the next word and cut the source string at that point. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b asm_str_in_str} (char *src, char *word2search)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Count occurrences of a substring within a string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b asm_strncmp} (const char *s1, const char *s2, const int N)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare up to N characters for equality (boolean result). }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lightweight string and line manipulation helpers. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This single-header module provides small utilities for working with C strings:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Reading a single line from a FILE stream\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Measuring string length\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Extracting the next "word" (token) from a line using a separator\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Cutting the extracted word from the source buffer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Copying a substring by indices\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Counting occurrences of a substring\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A boolean-style strncmp (returns 1 on equality, 0 otherwise)\par}
\par
Usage{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In exactly one translation unit, define ALMOG_STRING_MANIPULATION_IMPLEMENTATION before including this header to compile the implementation.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In all other files, include the header without the macro to get declarations only.\par}
\par
Notes and limitations{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
All destination buffers must be large enough; functions do not grow or allocate buffers.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asm_get_line enforces MAX_LEN_LINE characters (not counting the terminating '\\0'). Longer lines cause a fatal error via exit(1).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asm_strncmp differs from the standard C strncmp: this version returns 1 if equal and 0 otherwise.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
These functions are not locale-aware unless otherwise noted (isspace is used for whitespace handling). \par}
\par
}{
Definition in file {\b Almog_String_Manipulation.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v asm_dprintCHAR\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_dprintCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define asm_dprintCHAR( expr)\~ printf(#expr " = %c\\n", expr)}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print a character expression as "expr = c\\n". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i expr} \cell }{An expression that yields a character promoted to int. \cell }
{\row }
}
}{
Definition at line {\b 72} of file {\b Almog_String_Manipulation.h}.}\par
}
{\xe \v asm_dprintINT\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_dprintINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define asm_dprintINT( expr)\~ printf(#expr " = %d\\n", expr)}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print an integer expression as "expr = n\\n". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i expr} \cell }{An expression that yields an int. \cell }
{\row }
}
}{
Definition at line {\b 79} of file {\b Almog_String_Manipulation.h}.}\par
}
{\xe \v asm_dprintSIZE_T\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_dprintSIZE_T}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define asm_dprintSIZE_T( expr)\~ printf(#expr " = %zu\\n", expr)}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print a size_t expression as "expr = n\\n". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i expr} \cell }{An expression that yields a size_t. \cell }
{\row }
}
}{
Definition at line {\b 86} of file {\b Almog_String_Manipulation.h}.}\par
}
{\xe \v asm_dprintSTRING\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_dprintSTRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define asm_dprintSTRING( expr)\~ printf(#expr " = %s\\n", expr)}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Debug print a C string expression as "expr = value\\n". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i expr} \cell }{An expression that yields a pointer to char (const or non-const). \cell }
{\row }
}
}{
Definition at line {\b 65} of file {\b Almog_String_Manipulation.h}.}\par
}
{\xe \v ASM_MAX_LEN_LINE\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:ASM_MAX_LEN_LINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ASM_MAX_LEN_LINE\~ (int)1e3}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Maximum number of characters read by asm_get_line (excluding the terminating null). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If an input line exceeds this value before encountering '\par
' or EOF, asm_get_line prints an error to stderr and terminates the process with exit(1). \par
}{
Definition at line {\b 58} of file {\b Almog_String_Manipulation.h}.}\par
}
{\xe \v ASM_MAXDIR\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:ASM_MAXDIR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ASM_MAXDIR\~ 100}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generic maximum directory length constant (not used by the functions in this header but available to callers). }}\par
{
Definition at line {\b 47} of file {\b Almog_String_Manipulation.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v asm_copy_array_by_indesies\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_copy_array_by_indesies}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void asm_copy_array_by_indesies (char *  {\i target}, int  {\i start}, int  {\i end}, char *  {\i src})}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a substring [start, end) from src into target and null-terminate. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copies characters with indices i = start, start+1, ..., end-1 from src into target, then writes a terminating '\\0'.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i target} \cell }{Destination buffer. Must be large enough to hold (end - start) characters plus the null terminator. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start} \cell }{Inclusive start index within src (0-based). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i end} \cell }{Exclusive end index within src (must satisfy end >= start). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source string buffer.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
No bounds checking is performed. The caller must ensure valid indices and sufficient target capacity. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This routine supports in-place "left-shift" usage where target == src and start > 0 (used by asm_get_word_and_cut). \par
}}}{
Definition at line {\b 232} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
Referenced by {\b asm_get_word_and_cut()}.}\par
}
{\xe \v asm_get_line\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_get_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int asm_get_line (FILE *  {\i fp}, char *  {\i dst})}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read a single line from a stream into a buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads characters from the FILE stream until a newline ('\par
') or EOF is encountered. The newline, if present, is not copied. The result is always null-terminated.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fp} \cell }{Input stream (must be non-NULL). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination buffer. Must have capacity of at least MAX_LEN_LINE + 1 bytes. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Number of characters stored in dst (excluding the terminating null). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Return values\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i -1} \cell }{EOF was encountered before any character was read.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
If the line exceeds MAX_LEN_LINE characters before a newline or EOF, the function prints an error and calls exit(1). \par
An empty line returns 0 (not -1). \par
}}}{
Definition at line {\b 119} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
References {\b ASM_MAX_LEN_LINE}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_obj_file()}.}\par
}
{\xe \v asm_get_next_word_from_line\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_get_next_word_from_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int asm_get_next_word_from_line (char *  {\i dst}, char *  {\i src}, char  {\i seperator})}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Extract the next word from a line without modifying the source. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Skips leading whitespace in src (as determined by isspace), then copies characters into dst until one of the following is seen: the separator, a newline ('\par
'), or the string terminator ('\\0'). The copied word in dst is null-terminated and is never empty on success.\par
Special case:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the very first character in src (at index 0, without leading whitespace) is the separator, '\par
', or '\\0', that single character is returned as a one-character "word".\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination buffer for the extracted word. Must be large enough to hold the token plus the null terminator. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source C string to parse (not modified by this function). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i seperator} \cell }{Separator character to stop at (spelling as in the API). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The number of characters consumed from src (i.e., the index of the first unconsumed character). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Return values\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i -1} \cell }{No word was found (e.g., only whitespace before a delimiter or end-of-string).\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The source buffer is not altered. To both extract and advance/cut the source, see asm_get_word_and_cut. \par
}}}{
Definition at line {\b 182} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_obj_file()}, and {\b asm_get_word_and_cut()}.}\par
}
{\xe \v asm_get_word_and_cut\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_get_word_and_cut}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int asm_get_word_and_cut (char *  {\i dst}, char *  {\i src}, char  {\i seperator})}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the next word and cut the source string at that point. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Extracts the next word from src (per asm_get_next_word_from_line semantics) into dst. On success, src is modified in-place to remove the consumed prefix. The new src begins at the stopping character (the separator, newline, or terminator).\par
Example: For src = "abc,def", separator = ','{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dst becomes "abc"\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src becomes ",def" (note the leading separator remains)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination buffer for the extracted word (large enough for the token and terminating null). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source buffer. Modified in-place if a word is found. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i seperator} \cell }{Separator character to stop at (spelling as in the API). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1 if a word was extracted and src adjusted, 0 otherwise. \par
}}}{
Definition at line {\b 260} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
References {\b asm_copy_array_by_indesies()}, {\b asm_get_next_word_from_line()}, and {\b asm_length()}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_file()}, and {\b ae_tri_mesh_get_from_obj_file()}.}\par
}
{\xe \v asm_length\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_length}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int asm_length (char *  {\i str})}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the length of a null-terminated C string. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i str} \cell }{Null-terminated string (must be non-NULL). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The number of characters before the terminating null byte. \par
}}}{
Definition at line {\b 146} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_obj_file()}, {\b asm_get_word_and_cut()}, and {\b asm_str_in_str()}.}\par
}
{\xe \v asm_str_in_str\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_str_in_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int asm_str_in_str (char *  {\i src}, char *  {\i word2search})}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Count occurrences of a substring within a string. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Counts how many times word2search appears in src. Occurrences may overlap.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{The string to search in (must be null-terminated). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i word2search} \cell }{The substring to find (must be null-terminated). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The number of (possibly overlapping) occurrences found. \par
}}}{
Definition at line {\b 285} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
References {\b asm_length()}, and {\b asm_strncmp()}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_get_from_file()}, and {\b ae_tri_mesh_get_from_obj_file()}.}\par
}
{\xe \v asm_strncmp\:Almog_String_Manipulation.h}
{\xe \v Almog_String_Manipulation.h\:asm_strncmp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int asm_strncmp (const char *  {\i s1}, const char *  {\i s2}, const int  {\i N})}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare up to N characters for equality (boolean result). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns 1 if the first N characters of s1 and s2 are all equal; otherwise returns 0. Unlike the standard C strncmp, which returns 0 on equality and a non-zero value on inequality/order, this function returns a boolean-like result (1 == equal, 0 == different).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s1} \cell }{First string (may be shorter than N). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s2} \cell }{Second string (may be shorter than N). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{Number of characters to compare. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1 if equal for the first N characters, 0 otherwise. \par
}}}{
Definition at line {\b 310} of file {\b Almog_String_Manipulation.h}.}\par
{
\ql
Referenced by {\b asm_str_in_str()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Almog_String_Manipulation.h\par \pard\plain 
{\tc\tcl2 \v src/include/Almog_String_Manipulation.h}
{\xe \v src/include/Almog_String_Manipulation.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00034 {\cf21 #ifndef ALMOG_STRING_MANIPULATION_H_}\par
00035 {\cf21 #define ALMOG_STRING_MANIPULATION_H_}\par
00036 \par
00037 {\cf21 #include <stdio.h>}\par
00038 {\cf21 #include <ctype.h>}\par
00039 {\cf21 #include <stdlib.h>}\par
00040 {\cf21 #include <assert.h>}\par
00041 \par
00047 {\cf21 #define ASM_MAXDIR 100}\par
00048 \par
00058 {\cf21 #define ASM_MAX_LEN_LINE (int)1e3}\par
00059 \par
00065 {\cf21 #define asm_dprintSTRING(expr) printf(#expr " = %s\\n"}, expr)\par
00066 \par
00072 {\cf21 #define asm_dprintCHAR(expr) printf(#expr " = %c\\n"}, expr)\par
00073 \par
00079 {\cf21 #define asm_dprintINT(expr) printf(#expr " = %d\\n"}, expr)\par
00080 \par
00086 {\cf21 #define asm_dprintSIZE_T(expr) printf(#expr " = %zu\\n"}, expr)\par
00087 \par
00088 {\cf18 int} asm_get_line(FILE *fp, {\cf18 char} *dst);\par
00089 {\cf18 int} asm_length({\cf18 char} *str);\par
00090 {\cf18 int} asm_get_next_word_from_line({\cf18 char} *dst, {\cf18 char} *src, {\cf18 char} seperator);\par
00091 {\cf18 void} asm_copy_array_by_indesies({\cf18 char} *target, {\cf18 int} start, {\cf18 int} end, {\cf18 char} *src);\par
00092 {\cf18 int} asm_get_word_and_cut({\cf18 char} *dst, {\cf18 char} *src, {\cf18 char} seperator);\par
00093 {\cf18 int} asm_str_in_str({\cf18 char} *src, {\cf18 char} *word2search);\par
00094 {\cf18 int} asm_strncmp({\cf17 const} {\cf18 char} *s1, {\cf17 const} {\cf18 char} *s2, {\cf17 const} {\cf18 int} N);\par
00095 \par
00096 {\cf21 #endif }{\cf20 /*ALMOG_STRING_MANIPULATION_H_*/}{\cf21 }\par
00097 \par
00098 {\cf21 #ifdef ALMOG_STRING_MANIPULATION_IMPLEMENTATION}\par
00099 {\cf21 #undef ALMOG_STRING_MANIPULATION_IMPLEMENTATION}\par
00100 \par
00101 \par
00119 {\cf18 int} asm_get_line(FILE *fp, {\cf18 char} *dst)\par
00120 \{\par
00121     {\cf18 int} i = 0;\par
00122     {\cf18 char} c;\par
00123 \par
00124     {\cf19 while} ((c = fgetc(fp)) != {\cf23 '\\n'} && c != EOF) \{\par
00125         dst[i] = c;\par
00126         i++;\par
00127         {\cf19 if} (i >= ASM_MAX_LEN_LINE) \{\par
00128             fprintf(stderr, {\cf22 "ERROR: line too long\\n"});\par
00129             exit(1);\par
00130         \}\par
00131     \}\par
00132     dst[i] = {\cf23 '\\0'};\par
00133     {\cf19 if} (c == EOF && i == 0) \{\par
00134         {\cf19 return} -1;\par
00135     \}\par
00136     {\cf19 return} i;\par
00137 \}\par
00138 \par
00146 {\cf18 int} asm_length({\cf18 char} *str)\par
00147 \{\par
00148     {\cf18 char} c;\par
00149     {\cf18 int} i = 0;\par
00150 \par
00151     {\cf19 while} ((c = str[i]) != {\cf23 '\\0'}) \{\par
00152         i++;\par
00153     \}\par
00154     {\cf19 return} i++;\par
00155 \}\par
00156 \par
00182 {\cf18 int} asm_get_next_word_from_line({\cf18 char} *dst, {\cf18 char} *src, {\cf18 char} seperator)\par
00183 \{\par
00184     {\cf18 int} i = 0, j = 0;\par
00185     {\cf18 char} c;\par
00186 \par
00187     {\cf19 while} (isspace((c = src[i]))) \{\par
00188         i++;\par
00189     \}\par
00190 \par
00191     {\cf19 while} ((c = src[i]) != seperator &&\par
00192                       c != {\cf23 '\\n'}&&\par
00193                       c != {\cf23 '\\0'}) \{\par
00194                         dst[j] = src[i];\par
00195                         i++;\par
00196                         j++;\par
00197     \}\par
00198 \par
00199     {\cf19 if} ((c == seperator || \par
00200          c == {\cf23 '\\n'}||\par
00201          c == {\cf23 '\\0'}) && i == 0) \{\par
00202             dst[j++] = c;\par
00203             i++;\par
00204     \}\par
00205 \par
00206     dst[j] = {\cf23 '\\0'};\par
00207 \par
00208     {\cf19 if} (j == 0) \{\par
00209         {\cf19 return} -1;\par
00210     \}\par
00211     {\cf19 return} i;\par
00212 \par
00213 \}\par
00214 \par
00232 {\cf18 void} asm_copy_array_by_indesies({\cf18 char} *target, {\cf18 int} start, {\cf18 int} end, {\cf18 char} *src)\par
00233 \{\par
00234     {\cf18 int} j = 0;\par
00235     {\cf19 for} ({\cf18 int} i = start; i < end; i++) \{\par
00236         target[j] = src[i];\par
00237         j++;\par
00238     \}\par
00239     target[j] = {\cf23 '\\0'};\par
00240 \}\par
00241 \par
00260 {\cf18 int} asm_get_word_and_cut({\cf18 char} *dst, {\cf18 char} *src, {\cf18 char} seperator)\par
00261 \{\par
00262     {\cf18 int} last_pos;\par
00263 \par
00264     {\cf19 if} (src[0] == {\cf23 '\\0'}) \{\par
00265         {\cf19 return} 0;\par
00266     \}\par
00267     last_pos = asm_get_next_word_from_line(dst, src, seperator);\par
00268     {\cf19 if} (last_pos == -1) \{\par
00269         {\cf19 return} 0;\par
00270     \}\par
00271     asm_copy_array_by_indesies(src, last_pos, asm_length(src), src);\par
00272     {\cf19 return} 1;\par
00273 \}\par
00274 \par
00285 {\cf18 int} asm_str_in_str({\cf18 char} *src, {\cf18 char} *word2search)\par
00286 \{\par
00287     {\cf18 int} i = 0, num_of_accur = 0;\par
00288     {\cf19 while} (src[i] != {\cf23 '\\0'}) \{\par
00289         {\cf19 if} (asm_strncmp(src+i, word2search, asm_length(word2search))) \{\par
00290             num_of_accur++;\par
00291         \}\par
00292         i++;\par
00293     \}\par
00294     {\cf19 return} num_of_accur;\par
00295 \}\par
00296 \par
00310 {\cf18 int} asm_strncmp({\cf17 const} {\cf18 char} *s1, {\cf17 const} {\cf18 char} *s2, {\cf17 const} {\cf18 int} N)\par
00311 \{\par
00312     {\cf18 int} i = 0;\par
00313     {\cf19 while} (i < N) \{\par
00314         {\cf19 if} (s1[i] == {\cf23 '\\0'} && s2[i] == {\cf23 '\\0'}) \{\par
00315             {\cf19 break};\par
00316         \}\par
00317         {\cf19 if} (s1[i] != s2[i] || (s1[i] == {\cf23 '\\0'}) || (s2[i] == {\cf23 '\\0'})) \{\par
00318             {\cf19 return} 0;\par
00319         \}\par
00320         i++;\par
00321     \}\par
00322     {\cf19 return} 1;\par
00323 \}\par
00324 \par
00325 \par
00326 {\cf21 #endif }{\cf20 /*ALMOG_STRING_MANIPULATION_IMPLEMENTATION*/}{\cf21 }\par
00327 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/include/display.c File Reference\par \pard\plain 
{\tc\tcl2 \v src/include/display.c}
{\xe \v src/include/display.c}
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SDL2/SDL.h>}\par
{\f2 #include <SDL2/SDL_ttf.h>}\par
{\f2 #include "Matrix2D.h"}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include "Almog_Engine.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for display.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "display_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "display_8c__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b game_state_t}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WINDOW_WIDTH}\~ (16 * 80)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WINDOW_HEIGHT}\~ (9 * 80)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FPS}\~ 100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FRAME_TARGET_TIME}\~ (1000 / {\b FPS})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintSTRING}(expr)\~ printf(#expr " = %s\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintCHAR}(expr)\~ printf(#expr " = %c\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintINT}(expr)\~ printf(#expr " = %d\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintD}(expr)\~ printf(#expr " = %g\\n", expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b dprintSIZE_T}(expr)\~ printf(#expr " = %zu\\n", expr)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b initialize_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b process_input_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy_window} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b fix_framerate} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_window_mat_size} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b copy_mat_to_surface_RGB} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v dprintCHAR\:display.c}
{\xe \v display.c\:dprintCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintCHAR( expr)\~ printf(#expr " = %c\\n", expr)}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b display.c}.}\par
}
{\xe \v dprintD\:display.c}
{\xe \v display.c\:dprintD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintD( expr)\~ printf(#expr " = %g\\n", expr)}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b display.c}.}\par
}
{\xe \v dprintINT\:display.c}
{\xe \v display.c\:dprintINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintINT( expr)\~ printf(#expr " = %d\\n", expr)}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b display.c}.}\par
}
{\xe \v dprintSIZE_T\:display.c}
{\xe \v display.c\:dprintSIZE_T}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintSIZE_T( expr)\~ printf(#expr " = %zu\\n", expr)}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b display.c}.}\par
}
{\xe \v dprintSTRING\:display.c}
{\xe \v display.c\:dprintSTRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define dprintSTRING( expr)\~ printf(#expr " = %s\\n", expr)}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b display.c}.}\par
}
{\xe \v FPS\:display.c}
{\xe \v display.c\:FPS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FPS\~ 100}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b display.c}.}\par
}
{\xe \v FRAME_TARGET_TIME\:display.c}
{\xe \v display.c\:FRAME_TARGET_TIME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FRAME_TARGET_TIME\~ (1000 / {\b FPS})}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b display.c}.}\par
}
{\xe \v WINDOW_HEIGHT\:display.c}
{\xe \v display.c\:WINDOW_HEIGHT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WINDOW_HEIGHT\~ (9 * 80)}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b display.c}.}\par
}
{\xe \v WINDOW_WIDTH\:display.c}
{\xe \v display.c\:WINDOW_WIDTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WINDOW_WIDTH\~ (16 * 80)}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b display.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v check_window_mat_size\:display.c}
{\xe \v display.c\:check_window_mat_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void check_window_mat_size ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 361} of file {\b display.c}.}\par
{
\ql
References {\b Camera::aspect_ratio}, {\b Scene::camera}, {\b Mat2D_uint32::cols}, {\b game_state_t::inv_z_buffer_mat}, {\b mat2D_alloc()}, {\b mat2D_alloc_uint32()}, {\b mat2D_free()}, {\b mat2D_free_uint32()}, {\b Mat2D_uint32::rows}, {\b game_state_t::scene}, {\b game_state_t::window}, {\b game_state_t::window_h}, {\b game_state_t::window_pixels_mat}, {\b game_state_t::window_surface}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
{\xe \v copy_mat_to_surface_RGB\:display.c}
{\xe \v display.c\:copy_mat_to_surface_RGB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void copy_mat_to_surface_RGB ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 376} of file {\b display.c}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b Mat2D_uint32::elements}, {\b Mat2D_uint32::rows}, {\b game_state_t::window_pixels_mat}, and {\b game_state_t::window_surface}.}\par
{
\ql
Referenced by {\b render_window()}.}\par
}
{\xe \v destroy_window\:display.c}
{\xe \v display.c\:destroy_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void destroy_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 316} of file {\b display.c}.}\par
{
\ql
References {\b ae_scene_free()}, {\b game_state_t::inv_z_buffer_mat}, {\b mat2D_free()}, {\b mat2D_free_uint32()}, {\b game_state_t::renderer}, {\b game_state_t::scene}, {\b game_state_t::window}, {\b game_state_t::window_pixels_mat}, {\b game_state_t::window_surface}, and {\b game_state_t::window_texture}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v fix_framerate\:display.c}
{\xe \v display.c\:fix_framerate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void fix_framerate ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 333} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::delta_time}, {\b game_state_t::frame_target_time}, {\b game_state_t::previous_frame_time}, and {\b game_state_t::to_limit_fps}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
{\xe \v initialize_window\:display.c}
{\xe \v display.c\:initialize_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int initialize_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 137} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::renderer}, {\b game_state_t::window}, {\b game_state_t::window_h}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v main\:display.c}
{\xe \v display.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 88} of file {\b display.c}.}\par
{
\ql
References {\b game_state_t::a_was_pressed}, {\b game_state_t::const_fps}, {\b game_state_t::d_was_pressed}, {\b game_state_t::delta_time}, {\b destroy_window()}, {\b game_state_t::e_was_pressed}, {\b game_state_t::elapsed_time}, {\b FPS}, {\b game_state_t::fps}, {\b FRAME_TARGET_TIME}, {\b game_state_t::frame_target_time}, {\b game_state_t::game_is_running}, {\b initialize_window()}, {\b game_state_t::left_button_pressed}, {\b game_state_t::previous_frame_time}, {\b process_input_window()}, {\b game_state_t::q_was_pressed}, {\b render_window()}, {\b game_state_t::renderer}, {\b game_state_t::s_was_pressed}, {\b setup_window()}, {\b game_state_t::space_bar_was_pressed}, {\b game_state_t::to_clear_renderer}, {\b game_state_t::to_limit_fps}, {\b game_state_t::to_render}, {\b game_state_t::to_update}, {\b update_window()}, {\b game_state_t::w_was_pressed}, {\b game_state_t::window}, {\b game_state_t::window_h}, {\b WINDOW_HEIGHT}, {\b game_state_t::window_w}, and {\b WINDOW_WIDTH}.}\par
}
{\xe \v process_input_window\:display.c}
{\xe \v display.c\:process_input_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void process_input_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 186} of file {\b display.c}.}\par
{
\ql
References {\b ae_camera_reset_pos()}, {\b Scene::camera}, {\b game_state_t::game_is_running}, {\b game_state_t::left_button_pressed}, {\b MAT2D_AT}, {\b Camera::offset_position}, {\b Camera::pitch_offset_deg}, {\b game_state_t::previous_frame_time}, {\b Camera::roll_offset_deg}, {\b game_state_t::scene}, {\b game_state_t::space_bar_was_pressed}, {\b game_state_t::to_render}, and {\b game_state_t::to_update}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v render\:display.c}
{\xe \v display.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b grid_example.c}.}\par
{
\ql
References {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_grid_draw()}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b Tri_mesh_array::elements}, {\b grid_proj}, {\b Scene::in_world_tri_meshes}, {\b game_state_t::inv_z_buffer_mat}, {\b Tri_mesh::length}, {\b Tri_mesh_array::length}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, and {\b game_state_t::window_pixels_mat}.}\par
{
\ql
Referenced by {\b render_window()}.}\par
}
{\xe \v render_window\:display.c}
{\xe \v display.c\:render_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 295} of file {\b display.c}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D_uint32::cols}, {\b copy_mat_to_surface_RGB()}, {\b Mat2D::elements}, {\b Mat2D_uint32::elements}, {\b game_state_t::inv_z_buffer_mat}, {\b render()}, {\b Mat2D::rows}, {\b Mat2D_uint32::rows}, {\b game_state_t::to_clear_renderer}, {\b game_state_t::window}, and {\b game_state_t::window_pixels_mat}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v setup\:display.c}
{\xe \v display.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b grid_example.c}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b adl_cartesian_grid_create()}, {\b ae_tri_mesh_appand_copy()}, {\b ae_tri_mesh_get_from_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ASM_MAX_LEN_LINE}, {\b game_state_t::const_fps}, {\b Tri_mesh_array::elements}, {\b grid}, {\b grid_proj}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh::length}, {\b Tri_mesh_array::length}, {\b Scene::original_tri_meshes}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, and {\b game_state_t::to_limit_fps}.}\par
{
\ql
Referenced by {\b setup_window()}.}\par
}
{\xe \v setup_window\:display.c}
{\xe \v display.c\:setup_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 170} of file {\b display.c}.}\par
{
\ql
References {\b ae_scene_init()}, {\b game_state_t::inv_z_buffer_mat}, {\b mat2D_alloc()}, {\b mat2D_alloc_uint32()}, {\b game_state_t::scene}, {\b setup()}, {\b game_state_t::window}, {\b game_state_t::window_h}, {\b game_state_t::window_pixels_mat}, {\b game_state_t::window_surface}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
{\xe \v update\:display.c}
{\xe \v display.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b grid_example.c}.}\par
{
\ql
References {\b ae_grid_project_world2screen()}, {\b AE_LIGHTING_FLAT}, {\b ae_projection_mat_set()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_view_mat_set()}, {\b Camera::aspect_ratio}, {\b Scene::camera}, {\b Tri_mesh_array::elements}, {\b Camera::fov_deg}, {\b grid}, {\b grid_proj}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh_array::length}, {\b Scene::proj_mat}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, {\b Scene::up_direction}, {\b Scene::view_mat}, {\b game_state_t::window_h}, {\b game_state_t::window_w}, {\b Camera::z_far}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
{\xe \v update_window\:display.c}
{\xe \v display.c\:update_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update_window ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 267} of file {\b display.c}.}\par
{
\ql
References {\b check_window_mat_size()}, {\b game_state_t::const_fps}, {\b game_state_t::delta_time}, {\b game_state_t::elapsed_time}, {\b fix_framerate()}, {\b game_state_t::fps}, {\b game_state_t::frame_target_time}, {\b game_state_t::to_limit_fps}, {\b update()}, {\b game_state_t::window}, {\b game_state_t::window_h}, and {\b game_state_t::window_w}.}\par
{
\ql
Referenced by {\b main()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
display.c\par \pard\plain 
{\tc\tcl2 \v src/include/display.c}
{\xe \v src/include/display.c}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <SDL2/SDL.h>}\par
00002 {\cf21 #include <SDL2/SDL_ttf.h>}\par
00003 {\cf21 #include "Matrix2D.h"}\par
00004 {\cf21 #include <stdlib.h>}\par
00005 {\cf21 #include <stdint.h>}\par
00006 {\cf21 #include "Almog_Engine.h"}\par
00007 \par
00008 {\cf21 #ifndef WINDOW_WIDTH}\par
00009 {\cf21 #define WINDOW_WIDTH (16 * 80)}\par
00010 {\cf21 #endif}\par
00011 \par
00012 {\cf21 #ifndef WINDOW_HEIGHT}\par
00013 {\cf21 #define WINDOW_HEIGHT (9 * 80)}\par
00014 {\cf21 #endif}\par
00015 \par
00016 {\cf21 #ifndef FPS}\par
00017 {\cf21 #define FPS 100}\par
00018 {\cf21 #endif}\par
00019 \par
00020 {\cf21 #ifndef FRAME_TARGET_TIME}\par
00021 {\cf21 #define FRAME_TARGET_TIME (1000 / FPS)}\par
00022 {\cf21 #endif}\par
00023 \par
00024 {\cf21 #define dprintSTRING(expr) printf(#expr " = %s\\n"}, expr)\par
00025 {\cf21 #define dprintCHAR(expr) printf(#expr " = %c\\n"}, expr)\par
00026 {\cf21 #define dprintINT(expr) printf(#expr " = %d\\n"}, expr)\par
00027 {\cf21 #define dprintD(expr) printf(#expr " = %g\\n"}, expr)\par
00028 {\cf21 #define dprintSIZE_T(expr) printf(#expr " = %zu\\n"}, expr)\par
00029 \par
00030 {\cf21 #ifndef PI}\par
00031 {\cf21     #ifndef __USE_MISC}\par
00032 {\cf21     #define __USE_MISC}\par
00033 {\cf21     #endif}\par
00034 {\cf21     #include <math.h>}\par
00035 {\cf21     #define PI M_PI}\par
00036 {\cf21 #endif}\par
00037 \par
00038 {\cf17 typedef} {\cf17 struct }\{\par
00039     {\cf18 int} game_is_running;\par
00040     {\cf18 float} delta_time;\par
00041     {\cf18 float} elapsed_time;\par
00042     {\cf18 float} const_fps;\par
00043     {\cf18 float} fps;\par
00044     {\cf18 float} frame_target_time;\par
00045     {\cf18 int} to_render;\par
00046     {\cf18 int} to_update;\par
00047     {\cf18 size_t} previous_frame_time;\par
00048     {\cf18 int} left_button_pressed;\par
00049     {\cf18 int} to_limit_fps;\par
00050     {\cf18 int} to_clear_renderer;\par
00051 \par
00052     {\cf18 int} space_bar_was_pressed;\par
00053     {\cf18 int} w_was_pressed;\par
00054     {\cf18 int} s_was_pressed;\par
00055     {\cf18 int} a_was_pressed;\par
00056     {\cf18 int} d_was_pressed;\par
00057     {\cf18 int} e_was_pressed;\par
00058     {\cf18 int} q_was_pressed;\par
00059 \par
00060     SDL_Window *window;\par
00061     {\cf18 int} window_w;\par
00062     {\cf18 int} window_h;\par
00063     SDL_Renderer *renderer;\par
00064 \par
00065     SDL_Surface *window_surface;\par
00066     SDL_Texture *window_texture;\par
00067 \par
00068     Mat2D_uint32 window_pixels_mat;\par
00069     Mat2D inv_z_buffer_mat;\par
00070     \par
00071     Scene scene;\par
00072 \} game_state_t;\par
00073 \par
00074 {\cf18 int} initialize_window(game_state_t *game_state);\par
00075 {\cf18 void} setup_window(game_state_t *game_state);\par
00076 {\cf18 void} process_input_window(game_state_t *game_state);\par
00077 {\cf18 void} update_window(game_state_t *game_state);\par
00078 {\cf18 void} render_window(game_state_t *game_state);\par
00079 {\cf18 void} destroy_window(game_state_t *game_state);\par
00080 {\cf18 void} fix_framerate(game_state_t *game_state);\par
00081 {\cf18 void} setup(game_state_t *game_state);\par
00082 {\cf18 void} update(game_state_t *game_state);\par
00083 {\cf18 void} render(game_state_t *game_state);\par
00084 \par
00085 {\cf18 void} check_window_mat_size(game_state_t *game_state);\par
00086 {\cf18 void} copy_mat_to_surface_RGB(game_state_t *game_state);\par
00087 \par
00088 {\cf18 int} main()\par
00089 \{\par
00090     game_state_t game_state = \{0\};\par
00091 \par
00092     game_state.game_is_running = 0;\par
00093     game_state.delta_time = 0;\par
00094     game_state.elapsed_time = 0;\par
00095     game_state.const_fps = FPS;\par
00096     game_state.fps = 0;\par
00097     game_state.frame_target_time = FRAME_TARGET_TIME;\par
00098 \par
00099     game_state.space_bar_was_pressed = 0;\par
00100     game_state.w_was_pressed = 0;\par
00101     game_state.s_was_pressed = 0;\par
00102     game_state.a_was_pressed = 0;\par
00103     game_state.d_was_pressed = 0;\par
00104     game_state.e_was_pressed = 0;\par
00105     game_state.q_was_pressed = 0;\par
00106 \par
00107     game_state.to_render = 1;\par
00108     game_state.to_update = 1;\par
00109     game_state.previous_frame_time = 0;\par
00110     game_state.left_button_pressed = 0;\par
00111     game_state.to_limit_fps = 1;\par
00112     game_state.to_clear_renderer = 1;\par
00113     game_state.window = NULL;\par
00114     game_state.window_w = WINDOW_WIDTH;\par
00115     game_state.window_h = WINDOW_HEIGHT;\par
00116     game_state.renderer = NULL;\par
00117 \par
00118     game_state.game_is_running = !initialize_window(&game_state);\par
00119 \par
00120     setup_window(&game_state);\par
00121 \par
00122     {\cf19 while} (game_state.game_is_running) \{\par
00123         process_input_window(&game_state);\par
00124         {\cf19 if} (game_state.to_update) \{\par
00125             update_window(&game_state);\par
00126         \}\par
00127         {\cf19 if} (game_state.to_render) \{\par
00128             render_window(&game_state);\par
00129         \}\par
00130         \par
00131     \}\par
00132     destroy_window(&game_state);\par
00133 \par
00134     {\cf19 return} 0;\par
00135 \}\par
00136 \par
00137 {\cf18 int} initialize_window(game_state_t *game_state)\par
00138 \{\par
00139     {\cf19 if} (SDL_Init(SDL_INIT_EVERYTHING) != 0) \{\par
00140         fprintf(stderr, {\cf22 "%s:%d: [Error] initializing SDL.\\n"}, __FILE__, __LINE__);\par
00141         {\cf19 return} -1;\par
00142     \}\par
00143 \par
00144     game_state->window = SDL_CreateWindow(NULL,\par
00145                               SDL_WINDOWPOS_CENTERED,\par
00146                               SDL_WINDOWPOS_CENTERED,\par
00147                               game_state->window_w,\par
00148                               game_state->window_h,\par
00149                               SDL_WINDOW_RESIZABLE\par
00150                               );\par
00151     {\cf19 if} (!game_state->window) \{\par
00152         fprintf(stderr, {\cf22 "%s:%d: [Error] creating SDL window.\\n"}, __FILE__, __LINE__);\par
00153         {\cf19 return} -1;\par
00154     \}\par
00155 \par
00156     game_state->renderer = SDL_CreateRenderer(game_state->window, -1, 0);\par
00157     {\cf19 if} (!game_state->renderer) \{\par
00158         fprintf(stderr, {\cf22 "%s:%d: [Error] creating SDL renderer.\\n"}, __FILE__, __LINE__);\par
00159         {\cf19 return} -1;\par
00160     \}\par
00161 \par
00162     {\cf19 if} (TTF_Init() == -1) \{\par
00163         fprintf(stderr, {\cf22 "%s:%d: [Error] initializing SDL_ttf.\\n"}, __FILE__, __LINE__);\par
00164         {\cf19 return} -1;\par
00165     \}\par
00166 \par
00167     {\cf19 return} 0;\par
00168 \}\par
00169 \par
00170 {\cf18 void} setup_window(game_state_t *game_state)\par
00171 \{\par
00172 \par
00173     game_state->window_surface = SDL_GetWindowSurface(game_state->window);\par
00174 \par
00175     game_state->window_pixels_mat = mat2D_alloc_uint32(game_state->window_h, game_state->window_w);\par
00176     game_state->inv_z_buffer_mat = mat2D_alloc(game_state->window_h, game_state->window_w);\par
00177 \par
00178     game_state->scene = ae_scene_init(game_state->window_h, game_state->window_w);\par
00179 \par
00180     {\cf20 /*-----------------------------------*/}\par
00181 \par
00182     setup(game_state);\par
00183 \par
00184 \}\par
00185 \par
00186 {\cf18 void} process_input_window(game_state_t *game_state)\par
00187 \{\par
00188     SDL_Event event;\par
00189     {\cf19 while} (SDL_PollEvent(&event)) \{\par
00190         {\cf19 switch} (event.type) \{\par
00191             {\cf19 case} SDL_QUIT:\par
00192                 game_state->game_is_running = 0;\par
00193                 {\cf19 break};\par
00194             {\cf19 case} SDL_KEYDOWN:\par
00195                 {\cf19 if} (event.key.keysym.sym == SDLK_ESCAPE) \{\par
00196                     game_state->game_is_running = 0;\par
00197                 \}\par
00198                 {\cf19 if} (event.key.keysym.sym == SDLK_SPACE) \{\par
00199                     {\cf19 if} (!game_state->space_bar_was_pressed) \{\par
00200                         game_state->to_render = 0;\par
00201                         game_state->to_update = 0;\par
00202                         game_state->space_bar_was_pressed = 1;\par
00203                         {\cf19 break};\par
00204                     \}\par
00205                     {\cf19 if} (game_state->space_bar_was_pressed) \{\par
00206                         game_state->to_render = 1;\par
00207                         game_state->to_update = 1;\par
00208                         game_state->previous_frame_time = SDL_GetTicks();\par
00209                         game_state->space_bar_was_pressed = 0;\par
00210                         {\cf19 break};\par
00211                     \}\par
00212                 \}\par
00213                 {\cf19 if} (event.key.keysym.sym == SDLK_w) \{\par
00214                     MAT2D_AT(game_state->scene.camera.offset_position, 1, 0) -= 0.05;\par
00215                 \}\par
00216                 {\cf19 if} (event.key.keysym.sym == SDLK_s) \{\par
00217                     MAT2D_AT(game_state->scene.camera.offset_position, 1, 0) += 0.05;\par
00218                 \}\par
00219                 {\cf19 if} (event.key.keysym.sym == SDLK_d) \{\par
00220                     MAT2D_AT(game_state->scene.camera.offset_position, 0, 0) += 0.05;\par
00221                 \}\par
00222                 {\cf19 if} (event.key.keysym.sym == SDLK_a) \{\par
00223                     MAT2D_AT(game_state->scene.camera.offset_position, 0, 0) -= 0.05;\par
00224                 \}\par
00225                 {\cf19 if} (event.key.keysym.sym == SDLK_e) \{\par
00226                     MAT2D_AT(game_state->scene.camera.offset_position, 2, 0) += 0.05;\par
00227                 \}\par
00228                 {\cf19 if} (event.key.keysym.sym == SDLK_q) \{\par
00229                     MAT2D_AT(game_state->scene.camera.offset_position, 2, 0) -= 0.05;\par
00230                 \}\par
00231                 {\cf19 if} (event.key.keysym.sym == SDLK_LEFT) \{\par
00232                     game_state->scene.camera.pitch_offset_deg -= 1;\par
00233                 \}\par
00234                 {\cf19 if} (event.key.keysym.sym == SDLK_RIGHT) \{\par
00235                     game_state->scene.camera.pitch_offset_deg += 1;\par
00236                 \}\par
00237                 {\cf19 if} (event.key.keysym.sym == SDLK_UP) \{\par
00238                     game_state->scene.camera.roll_offset_deg += 1;\par
00239                     {\cf19 if} (game_state->scene.camera.roll_offset_deg > 89) \{\par
00240                         game_state->scene.camera.roll_offset_deg = 89;\par
00241                     \}\par
00242                 \}\par
00243                 {\cf19 if} (event.key.keysym.sym == SDLK_DOWN) \{\par
00244                     game_state->scene.camera.roll_offset_deg -= 1;\par
00245                     {\cf19 if} (game_state->scene.camera.roll_offset_deg < -89) \{\par
00246                         game_state->scene.camera.roll_offset_deg = -89;\par
00247                     \}\par
00248                 \}\par
00249                 {\cf19 if} (event.key.keysym.sym == SDLK_r) \{\par
00250                     ae_camera_reset_pos(&(game_state->scene));\par
00251                 \}\par
00252                 {\cf19 break};\par
00253             {\cf19 case} SDL_MOUSEBUTTONDOWN:\par
00254                 {\cf19 if} (event.button.button == SDL_BUTTON_LEFT) \{\par
00255                     game_state->left_button_pressed = 1;\par
00256                 \}\par
00257                 {\cf19 break};\par
00258             {\cf19 case} SDL_MOUSEBUTTONUP:\par
00259                 {\cf19 if} (event.button.button == SDL_BUTTON_LEFT) \{\par
00260                     game_state->left_button_pressed = 0;\par
00261                 \}\par
00262                 {\cf19 break};\par
00263         \}\par
00264     \}\par
00265 \}\par
00266 \par
00267 {\cf18 void} update_window(game_state_t *game_state)\par
00268 \{\par
00269     SDL_GetWindowSize(game_state->window, &(game_state->window_w), &(game_state->window_h));\par
00270 \par
00271     fix_framerate(game_state);\par
00272     game_state->elapsed_time += game_state->delta_time;\par
00273     game_state->fps = 1.0f / game_state->delta_time;\par
00274     game_state->frame_target_time = 1000/game_state->const_fps;\par
00275 \par
00276     {\cf18 char} fps_count[100];\par
00277     {\cf19 if} (!game_state->to_limit_fps) \{\par
00278         sprintf(fps_count, {\cf22 "dt = %5.02f [ms]"}, game_state->delta_time*1000);\par
00279     \} {\cf19 else} \{\par
00280         sprintf(fps_count, {\cf22 "FPS = %5.2f"}, game_state->fps);\par
00281     \}\par
00282 \par
00283     {\cf19 if} (game_state->elapsed_time*10-({\cf18 int})(game_state->elapsed_time*10) < 0.1) \{\par
00284         SDL_SetWindowTitle(game_state->window, fps_count);\par
00285     \}\par
00286 \par
00287     check_window_mat_size(game_state);\par
00288 \par
00289     {\cf20 /*----------------------------------------------------------------------------*/}\par
00290 \par
00291     update(game_state);\par
00292 \par
00293 \}\par
00294 \par
00295 {\cf18 void} render_window(game_state_t *game_state)\par
00296 \{\par
00297     {\cf19 if} (game_state->to_clear_renderer) \{\par
00298         {\cf20 // SDL_SetRenderDrawColor(game_state->renderer, HexARGB_RGBA(0xFF181818));}\par
00299         {\cf20 // SDL_RenderClear(game_state->renderer);}\par
00300         {\cf20 // mat2D_fill(game_state->window_pixels_mat, 0x181818);}\par
00301         memset(game_state->window_pixels_mat.elements, 0x20, {\cf17 sizeof}(uint32_t) * game_state->window_pixels_mat.rows * game_state->window_pixels_mat.cols);\par
00302         {\cf20 /* not using mat2D_fill but using memset because it is way faster, so the buffer needs to be of 1/z */}\par
00303         memset(game_state->inv_z_buffer_mat.elements, 0x0, {\cf17 sizeof}({\cf18 double}) * game_state->inv_z_buffer_mat.rows * game_state->inv_z_buffer_mat.cols);\par
00304     \}\par
00305     {\cf20 /*------------------------------------------------------------------------*/}\par
00306 \par
00307     render(game_state);\par
00308 \par
00309     {\cf20 /*------------------------------------------------------------------------*/}\par
00310 \par
00311     copy_mat_to_surface_RGB(game_state);\par
00312     SDL_UpdateWindowSurface(game_state->window);\par
00313 \par
00314 \}\par
00315 \par
00316 {\cf18 void} destroy_window(game_state_t *game_state)\par
00317 \{\par
00318     mat2D_free_uint32(game_state->window_pixels_mat);\par
00319     mat2D_free(game_state->inv_z_buffer_mat);\par
00320     ae_scene_free(&(game_state->scene));\par
00321 \par
00322     {\cf19 if} (game_state->window_surface) SDL_FreeSurface(game_state->window_surface);\par
00323     {\cf19 if} (game_state->window_texture) SDL_DestroyTexture(game_state->window_texture);\par
00324 \par
00325     SDL_DestroyRenderer(game_state->renderer);\par
00326     SDL_DestroyWindow(game_state->window);\par
00327 \par
00328     SDL_Quit();\par
00329 \par
00330     (void)game_state;\par
00331 \}\par
00332 \par
00333 {\cf18 void} fix_framerate(game_state_t *game_state)\par
00334 \{\par
00335     {\cf18 int} time_ellapsed = SDL_GetTicks() - game_state->previous_frame_time;\par
00336     {\cf18 int} time_to_wait = game_state->frame_target_time - time_ellapsed;\par
00337     {\cf19 if} (time_to_wait > 0 && time_to_wait < game_state->frame_target_time) \{\par
00338         {\cf19 if} (game_state->to_limit_fps) \{\par
00339             SDL_Delay(time_to_wait);\par
00340         \}\par
00341     \}\par
00342     game_state->delta_time = (SDL_GetTicks() - game_state->previous_frame_time) / 1000.0f;\par
00343     game_state->previous_frame_time = SDL_GetTicks();\par
00344 \}\par
00345 \par
00346 {\cf21 #ifndef SETUP}\par
00347 {\cf21 #define SETUP}\par
00348 {\cf18 void} setup(game_state_t *game_state) \{ (void)game_state; \}\par
00349 {\cf21 #endif}\par
00350 \par
00351 {\cf21 #ifndef UPDATE}\par
00352 {\cf21 #define UPDATE}\par
00353 {\cf18 void} update(game_state_t *game_state) \{ (void)game_state; \}\par
00354 {\cf21 #endif}\par
00355 \par
00356 {\cf21 #ifndef RENDER}\par
00357 {\cf21 #define RENDER}\par
00358 {\cf18 void} render(game_state_t *game_state) \{ (void)game_state; \}\par
00359 {\cf21 #endif}\par
00360 \par
00361 {\cf18 void} check_window_mat_size(game_state_t *game_state)\par
00362 \{\par
00363     {\cf19 if} (game_state->window_h != ({\cf18 int})game_state->window_pixels_mat.rows || game_state->window_w != ({\cf18 int})game_state->window_pixels_mat.cols) \{\par
00364         mat2D_free_uint32(game_state->window_pixels_mat);\par
00365         mat2D_free(game_state->inv_z_buffer_mat);\par
00366         SDL_FreeSurface(game_state->window_surface);\par
00367 \par
00368         game_state->window_pixels_mat = mat2D_alloc_uint32(game_state->window_h, game_state->window_w);\par
00369         game_state->inv_z_buffer_mat = mat2D_alloc(game_state->window_h, game_state->window_w);\par
00370         game_state->scene.camera.aspect_ratio = (float)(game_state->window_h) / (float)(game_state->window_w);\par
00371 \par
00372         game_state->window_surface = SDL_GetWindowSurface(game_state->window);\par
00373     \}\par
00374 \}\par
00375 \par
00376 {\cf18 void} copy_mat_to_surface_RGB(game_state_t *game_state)\par
00377 \{\par
00378     SDL_LockSurface(game_state->window_surface);\par
00379 \par
00380     memcpy(game_state->window_surface->pixels, game_state->window_pixels_mat.elements, {\cf17 sizeof}(uint32_t) * game_state->window_pixels_mat.rows * game_state->window_pixels_mat.cols);\par
00381 \par
00382     SDL_UnlockSurface(game_state->window_surface);\par
00383 \}\par
00384 \par
00385 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/include/Matrix2D.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/include/Matrix2D.h}
{\xe \v src/include/Matrix2D.h}
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A single-header C library for simple 2D matrix operations on doubles and uint32_t, including allocation, basic arithmetic, linear algebra, and helpers (LUP, inverse, determinant, DCM, etc.). }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stddef.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <stdbool.h>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <math.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Matrix2D.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matrix2D_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matrix2D_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Mat2D}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of doubles. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Mat2D_uint32}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dense row-major matrix of uint32_t. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Mat2D_Minor}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A minor "view" into a reference matrix. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_MALLOC}\~ malloc\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by the library. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_ASSERT}\~ assert\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by the library for parameter validation. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_AT}(m,  i,  j)\~ (m).elements[i * m.stride_r + j]\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D} (0-based). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_AT_UINT32}(m,  i,  j)\~ (m).elements[i * m.stride_r + j]\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_uint32} (0-based). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b __USE_MISC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b PI}\~ M_PI\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_MINOR_AT}(mm,  i,  j)\~ {\b MAT2D_AT}(mm.ref_mat, mm.rows_list[i], mm.cols_list[j])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_Minor} (0-based), dereferencing into the underlying reference matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_PRINT}(m)\~ {\b mat2D_print}(m, #m, 0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix with its variable name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_PRINT_AS_COL}(m)\~ {\b mat2D_print_as_col}(m, #m, 0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix as a single column with its name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAT2D_MINOR_PRINT}(mm)\~ {\b mat2D_minor_print}(mm, #mm, 0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a minor with its variable name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b mat2D_normalize}(m)\~ {\b mat2D_mult}((m), 1.0 / {\b mat2D_calc_norma}((m)))\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place normalization of all elements so that the Frobenius norm becomes 1. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_rand_double} (void)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pseudo-random double in the range [0, 1]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D} {\b mat2D_alloc} (size_t rows, size_t cols)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of doubles. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_uint32} {\b mat2D_alloc_uint32} (size_t rows, size_t cols)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of uint32_t. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_free} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D} (elements pointer). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_free_uint32} ({\b Mat2D_uint32} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D_uint32} (elements pointer). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b mat2D_offset2d} ({\b Mat2D} m, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b mat2D_offset2d_uint32} ({\b Mat2D_uint32} m, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D_uint32}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_fill} ({\b Mat2D} m, double x)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of doubles with a scalar value. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_fill_sequence} ({\b Mat2D} m, double start, double step)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with an arithmetic sequence laid out in row-major order. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_fill_uint32} ({\b Mat2D_uint32} m, uint32_t x)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of uint32_t with a scalar value. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_rand} ({\b Mat2D} m, double low, double high)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with random doubles in [low, high). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_dot} ({\b Mat2D} dst, {\b Mat2D} a, {\b Mat2D} b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Matrix product: dst = a * b. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_dot_product} ({\b Mat2D} a, {\b Mat2D} b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dot product between two vectors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_cross} ({\b Mat2D} dst, {\b Mat2D} a, {\b Mat2D} b)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
3D cross product: dst = a x b for 3x1 vectors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add} ({\b Mat2D} dst, {\b Mat2D} a)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place addition: dst += a. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add_row_time_factor_to_row} ({\b Mat2D} m, size_t des_r, size_t src_r, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) += factor * row(src_r). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub} ({\b Mat2D} dst, {\b Mat2D} a)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place subtraction: dst -= a. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub_row_time_factor_to_row} ({\b Mat2D} m, size_t des_r, size_t src_r, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) -= factor * row(src_r). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_mult} ({\b Mat2D} m, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place scalar multiplication: m *= factor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_mult_row} ({\b Mat2D} m, size_t r, double factor)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place row scaling: row(r) *= factor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_print} ({\b Mat2D} m, const char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix to stdout with a name and indentation padding. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_print_as_col} ({\b Mat2D} m, const char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix as a flattened column vector to stdout. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_identity} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a square matrix to the identity matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_make_identity} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reduce a matrix to identity via Gauss-Jordan elimination and return the cumulative scaling factor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_rot_mat_x} ({\b Mat2D} m, float angle_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the X-axis. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_rot_mat_y} ({\b Mat2D} m, float angle_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Y-axis. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_rot_mat_z} ({\b Mat2D} m, float angle_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Z-axis. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_set_DCM_zyx} ({\b Mat2D} DCM, float yaw_deg, float pitch_deg, float roll_deg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a 3x3 direction cosine matrix (DCM) from Z-Y-X Euler angles. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_copy} ({\b Mat2D} des, {\b Mat2D} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy all elements from src to des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_copy_mat_to_mat_at_window} ({\b Mat2D} des, {\b Mat2D} src, size_t is, size_t js, size_t ie, size_t je)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a rectangular window from src into des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_get_col} ({\b Mat2D} des, size_t des_col, {\b Mat2D} src, size_t src_col)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a column from src into a column of des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add_col_to_col} ({\b Mat2D} des, size_t des_col, {\b Mat2D} src, size_t src_col)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source column into a destination column: des[:, des_col] += src[:, src_col]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub_col_to_col} ({\b Mat2D} des, size_t des_col, {\b Mat2D} src, size_t src_col)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source column from a destination column: des[:, des_col] -= src[:, src_col]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_swap_rows} ({\b Mat2D} m, size_t r1, size_t r2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swap two rows of a matrix in-place. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_get_row} ({\b Mat2D} des, size_t des_row, {\b Mat2D} src, size_t src_row)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a row from src into a row of des. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_add_row_to_row} ({\b Mat2D} des, size_t des_row, {\b Mat2D} src, size_t src_row)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source row into a destination row: des[des_row, :] += src[src_row, :]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_sub_row_to_row} ({\b Mat2D} des, size_t des_row, {\b Mat2D} src, size_t src_row)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source row from a destination row: des[des_row, :] -= src[src_row, :]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_calc_norma} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the Frobenius norm of a matrix, sqrt(sum(m_ij^2)). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mat2D_mat_is_all_digit} ({\b Mat2D} m, double digit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a matrix equal a given digit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mat2D_row_is_all_digit} ({\b Mat2D} m, double digit, size_t r)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a row equal a given digit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mat2D_col_is_all_digit} ({\b Mat2D} m, double digit, size_t c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a column equal a given digit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_det_2x2_mat} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 matrix. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_triangulate} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Forward elimination to transform a matrix to upper triangular form. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_det} ({\b Mat2D} m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of an NxN matrix via Gaussian elimination. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_LUP_decomposition_with_swap} ({\b Mat2D} src, {\b Mat2D} l, {\b Mat2D} p, {\b Mat2D} u)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute LUP decomposition: P*A = L*U with L unit diagonal. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_transpose} ({\b Mat2D} des, {\b Mat2D} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transpose a matrix: des = src^T. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_invert} ({\b Mat2D} des, {\b Mat2D} src)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Invert a square matrix using Gauss-Jordan elimination. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_solve_linear_sys_LUP_decomposition} ({\b Mat2D} A, {\b Mat2D} x, {\b Mat2D} B)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solve the linear system A x = B using LUP decomposition. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_Minor} {\b mat2D_minor_alloc_fill_from_mat} ({\b Mat2D} ref_mat, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a minor view by excluding row i and column j of ref_mat. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mat2D_Minor} {\b mat2D_minor_alloc_fill_from_mat_minor} ({\b Mat2D_Minor} ref_mm, size_t i, size_t j)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a nested minor view from an existing minor by excluding row i and column j of the minor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_minor_free} ({\b Mat2D_Minor} mm)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the index arrays owned by a minor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mat2D_minor_print} ({\b Mat2D_Minor} mm, const char *name, size_t padding)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a minor matrix to stdout with a name and indentation padding. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_det_2x2_mat_minor} ({\b Mat2D_Minor} mm)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 minor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mat2D_minor_det} ({\b Mat2D_Minor} mm)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a minor via recursive expansion by minors. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A single-header C library for simple 2D matrix operations on doubles and uint32_t, including allocation, basic arithmetic, linear algebra, and helpers (LUP, inverse, determinant, DCM, etc.). \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Storage is contiguous row-major (C-style). The element at row i, column j (0-based) is located at {\f2 elements[i * stride_r + j]} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Dense matrices of {\f2 double}  are represented by {\b Mat2D}, and dense matrices of {\f2 uint32_t}  are represented by {\b Mat2D_uint32}.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some routines assert shape compatibility using MATRIX2D_ASSERT.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Random number generation uses the C library {\f2 rand()} ; it is not cryptographically secure.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Inversion is done via Gauss-Jordan elimination with partial pivoting only when a pivot is zero; this can be numerically unstable for ill-conditioned matrices. See notes below.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To compile the implementation, define MATRIX2D_IMPLEMENTATION in exactly one translation unit before including this header.\par}
\par
Example: #define MATRIX2D_IMPLEMENTATION #include "matrix2d.h"\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This one-file library is heavily inspired by Tsoding's nn.h implementation of matrix creation and operations: {\f2 https://github.com/tsoding/nn.h} and the video: {\f2 https://youtu.be/L1TbWe8bVOc?list=PLpM-Dvs8t0VZPZKggcql-MmjaBdZKeDMw}\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Numerical stability:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is a set of functions for minors that can be used to compute the determinant, but that approach is factorial in complexity and too slow for larger matrices. This library uses Gaussian elimination instead.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inversion function can fail or be unstable if pivot values become very small. Consider preconditioning or using a more robust decomposition (e.g., full pivoting, SVD) for ill-conditioned problems. \par}
}}}{
Definition in file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v __USE_MISC\:Matrix2D.h}
{\xe \v Matrix2D.h\:__USE_MISC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define __USE_MISC}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 151} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_AT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_AT( m,  i,  j)\~ (m).elements[i * m.stride_r + j]}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D} (0-based). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This macro does not perform bounds checking in the fast configuration. Use carefully. \par
}}}{
Definition at line {\b 145} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_AT_UINT32\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_AT_UINT32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_AT_UINT32( m,  i,  j)\~ (m).elements[i * m.stride_r + j]}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_uint32} (0-based). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
This macro does not perform bounds checking in the fast configuration. Use carefully. \par
}}}{
Definition at line {\b 146} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_MINOR_AT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_MINOR_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_MINOR_AT( mm,  i,  j)\~ {\b MAT2D_AT}(mm.ref_mat, mm.rows_list[i], mm.cols_list[j])}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Access element (i, j) of a {\b Mat2D_Minor} (0-based), dereferencing into the underlying reference matrix. }}\par
{
Definition at line {\b 162} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_MINOR_PRINT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_MINOR_PRINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_MINOR_PRINT( mm)\~ {\b mat2D_minor_print}(mm, #mm, 0)}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a minor with its variable name. }}\par
{
Definition at line {\b 177} of file {\b Matrix2D.h}.}\par
}
{\xe \v mat2D_normalize\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_normalize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define mat2D_normalize( m)\~ {\b mat2D_mult}((m), 1.0 / {\b mat2D_calc_norma}((m)))}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place normalization of all elements so that the Frobenius norm becomes 1. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Equivalent to: m *= 1.0 / mat2D_calc_norma(m). \par
}{
Definition at line {\b 184} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_PRINT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_PRINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_PRINT( m)\~ {\b mat2D_print}(m, #m, 0)}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix with its variable name. }}\par
{
Definition at line {\b 167} of file {\b Matrix2D.h}.}\par
}
{\xe \v MAT2D_PRINT_AS_COL\:Matrix2D.h}
{\xe \v Matrix2D.h\:MAT2D_PRINT_AS_COL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAT2D_PRINT_AS_COL( m)\~ {\b mat2D_print_as_col}(m, #m, 0)}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Convenience macro to print a matrix as a single column with its name. }}\par
{
Definition at line {\b 172} of file {\b Matrix2D.h}.}\par
}
{\xe \v MATRIX2D_ASSERT\:Matrix2D.h}
{\xe \v Matrix2D.h\:MATRIX2D_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_ASSERT\~ assert}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assertion macro used by the library for parameter validation. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defaults to C {\f2 assert} . Override by defining MATRIX2D_ASSERT before including this header if you want custom behavior. \par
}{
Definition at line {\b 68} of file {\b Matrix2D.h}.}\par
}
{\xe \v MATRIX2D_MALLOC\:Matrix2D.h}
{\xe \v Matrix2D.h\:MATRIX2D_MALLOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_MALLOC\~ malloc}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocation function used by the library. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defaults to {\f2 malloc} . Override by defining MATRIX2D_MALLOC before including this header if you want to use a custom allocator. \par
}{
Definition at line {\b 56} of file {\b Matrix2D.h}.}\par
}
{\xe \v PI\:Matrix2D.h}
{\xe \v Matrix2D.h\:PI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define PI\~ M_PI}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 154} of file {\b Matrix2D.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v mat2D_add\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a})}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place addition: dst += a. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination matrix to be incremented. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Summand of same shape as dst. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Shapes match. \par
}}}{
Definition at line {\b 496} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_line_itersect_plane()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_add_col_to_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add_col_to_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add_col_to_col ({\b Mat2D}  {\i des}, size_t  {\i des_col}, {\b Mat2D}  {\i src}, size_t  {\i src_col})}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source column into a destination column: des[:, des_col] += src[:, src_col]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same row count as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_col} \cell }{Column index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_col} \cell }{Column index in source. \cell }
{\row }
}
}{
Definition at line {\b 828} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_add_row_time_factor_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add_row_time_factor_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add_row_time_factor_to_row ({\b Mat2D}  {\i m}, size_t  {\i des_r}, size_t  {\i src_r}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) += factor * row(src_r). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_r} \cell }{Destination row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_r} \cell }{Source row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 514} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
}
{\xe \v mat2D_add_row_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_add_row_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_add_row_to_row ({\b Mat2D}  {\i des}, size_t  {\i des_row}, {\b Mat2D}  {\i src}, size_t  {\i src_row})}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a source row into a destination row: des[des_row, :] += src[src_row, :]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same number of columns as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_row} \cell }{Row index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_row} \cell }{Row index in source. \cell }
{\row }
}
}{
Definition at line {\b 897} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_alloc\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_alloc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D} mat2D_alloc (size_t  {\i rows}, size_t  {\i cols})}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of doubles. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{Number of rows (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cols} \cell }{Number of columns (>= 1). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b Mat2D} with contiguous storage; must be freed with mat2D_free. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
m.stride_r == cols. \par
}}}{
Definition at line {\b 278} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D::elements}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D::rows}, and {\b Mat2D::stride_r}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b adl_figure_alloc()}, {\b ae_camera_init()}, {\b ae_curve_project_world2screen()}, {\b ae_line_clip_with_plane()}, {\b ae_line_itersect_plane()}, {\b ae_line_project_world2screen()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_quad_calc_normal()}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_mesh_project_world2screen()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_set_normals()}, {\b ae_quad_transform_to_view()}, {\b ae_scene_init()}, {\b ae_tri_calc_normal()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_project_world2screen()}, {\b ae_tri_set_normals()}, {\b ae_tri_transform_to_view()}, {\b ae_view_mat_set()}, {\b check_window_mat_size()}, {\b mat2D_det()}, {\b mat2D_invert()}, {\b mat2D_set_DCM_zyx()}, {\b mat2D_solve_linear_sys_LUP_decomposition()}, and {\b setup_window()}.}\par
}
{\xe \v mat2D_alloc_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_alloc_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_uint32} mat2D_alloc_uint32 (size_t  {\i rows}, size_t  {\i cols})}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a rows x cols matrix of uint32_t. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{Number of rows (>= 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cols} \cell }{Number of columns (>= 1). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b Mat2D_uint32} with contiguous storage; free with mat2D_free_uint32. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
m.stride_r == cols. \par
}}}{
Definition at line {\b 297} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b Mat2D_uint32::elements}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D_uint32::rows}, and {\b Mat2D_uint32::stride_r}.}\par
{
\ql
Referenced by {\b adl_figure_alloc()}, {\b check_window_mat_size()}, and {\b setup_window()}.}\par
}
{\xe \v mat2D_calc_norma\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_calc_norma}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_calc_norma ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the Frobenius norm of a matrix, sqrt(sum(m_ij^2)). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Frobenius norm. \par
}}}{
Definition at line {\b 931} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_quad_calc_normal()}, {\b ae_tri_calc_normal()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_col_is_all_digit\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_col_is_all_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mat2D_col_is_all_digit ({\b Mat2D}  {\i m}, double  {\i digit}, size_t  {\i c})}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a column equal a given digit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i digit} \cell }{Value to compare. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{Column index. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if every element equals digit, false otherwise. \par
}}}{
Definition at line {\b 985} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_det()}.}\par
}
{\xe \v mat2D_copy\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_copy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_copy ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src})}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy all elements from src to des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Shapes match. \par
}}}{
Definition at line {\b 768} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_quad_set_normals()}, {\b ae_tri_set_normals()}, {\b ae_view_mat_set()}, {\b mat2D_det()}, {\b mat2D_invert()}, and {\b mat2D_LUP_decomposition_with_swap()}.}\par
}
{\xe \v mat2D_copy_mat_to_mat_at_window\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_copy_mat_to_mat_at_window}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_copy_mat_to_mat_at_window ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src}, size_t  {\i is}, size_t  {\i js}, size_t  {\i ie}, size_t  {\i je})}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a rectangular window from src into des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix. Must have size (ie - is + 1) x (je - js + 1). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i is} \cell }{Start row index in src (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i js} \cell }{Start column index in src (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ie} \cell }{End row index in src (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i je} \cell }{End column index in src (inclusive). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= is <= ie < src.rows, 0 <= js <= je < src.cols. \par
}}}{
Definition at line {\b 790} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_cross\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_cross}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_cross ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a}, {\b Mat2D}  {\i b})}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
3D cross product: dst = a x b for 3x1 vectors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{3x1 destination vector. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{3x1 input vector. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{3x1 input vector. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
All matrices have shape 3x1. \par
}}}{
Definition at line {\b 479} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_quad_calc_normal()}, {\b ae_quad_set_normals()}, {\b ae_tri_calc_normal()}, {\b ae_tri_set_normals()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_det\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_det}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_det ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of an NxN matrix via Gaussian elimination. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Square matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(m).\par
}}Copies m internally, triangulates it, and returns the product of diagonal elements (adjusted by any scaling factor as implemented). \par
}{
Definition at line {\b 1052} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_col_is_all_digit()}, {\b mat2D_copy()}, {\b mat2D_free()}, {\b mat2D_row_is_all_digit()}, {\b mat2D_triangulate()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_invert()}.}\par
}
{\xe \v mat2D_det_2x2_mat\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_det_2x2_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_det_2x2_mat ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 matrix. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix (must be 2x2). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(m) = a11 a22 - a12 a21. \par
}}}{
Definition at line {\b 1000} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_det_2x2_mat_minor\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_det_2x2_mat_minor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_det_2x2_mat_minor ({\b Mat2D_Minor}  {\i mm})}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a 2x2 minor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Minor (must be 2x2). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(mm). \par
}}}{
Definition at line {\b 1383} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b MAT2D_MINOR_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D_Minor::rows}.}\par
{
\ql
Referenced by {\b mat2D_minor_det()}.}\par
}
{\xe \v mat2D_dot\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_dot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_dot ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a}, {\b Mat2D}  {\i b})}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Matrix product: dst = a * b. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination matrix (size a.rows x b.cols). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Left matrix (size a.rows x a.cols). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{Right matrix (size a.cols x b.cols). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a.cols == b.rows, dst.rows == a.rows, dst.cols == b.cols. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
dst is overwritten. \par
}}}{
Definition at line {\b 424} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_quad_transform_to_view()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_transform_to_view()}, {\b ae_view_mat_set()}, {\b mat2D_set_DCM_zyx()}, and {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_dot_product\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_dot_product}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_dot_product ({\b Mat2D}  {\i a}, {\b Mat2D}  {\i b})}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dot product between two vectors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Vector (shape n x 1 or 1 x n). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i b} \cell }{Vector (same shape as a). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The scalar dot product sum. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a.rows == b.rows, a.cols == b.cols, and one dimension equals 1. \par
}}}{
Definition at line {\b 450} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_line_itersect_plane()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_fill\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_fill ({\b Mat2D}  {\i m}, double  {\i x})}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of doubles with a scalar value. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Value to assign to every element. \cell }
{\row }
}
}{
Definition at line {\b 362} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_camera_init()}, {\b ae_camera_reset_pos()}, {\b ae_curve_project_world2screen()}, {\b ae_line_itersect_plane()}, {\b ae_line_project_world2screen()}, {\b ae_projection_mat_set()}, {\b ae_quad_mesh_project_world2screen()}, {\b ae_quad_project_world2screen()}, {\b ae_scene_init()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_tri_project_world2screen()}, {\b ae_view_mat_set()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, and {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_fill_sequence\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_fill_sequence}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_fill_sequence ({\b Mat2D}  {\i m}, double  {\i start}, double  {\i step})}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with an arithmetic sequence laid out in row-major order. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i start} \cell }{First value in the sequence. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i step} \cell }{Increment between consecutive elements.\cell }
{\row }
}
Element at linear index k gets value start + step * k. \par
}{
Definition at line {\b 378} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_offset2d()}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_fill_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_fill_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_fill_uint32 ({\b Mat2D_uint32}  {\i m}, uint32_t  {\i x})}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill all elements of a matrix of uint32_t with a scalar value. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Value to assign to every element. \cell }
{\row }
}
}{
Definition at line {\b 391} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b MAT2D_AT_UINT32}, and {\b Mat2D_uint32::rows}.}\par
{
\ql
Referenced by {\b adl_2Dscalar_interp_on_figure()}, and {\b adl_curves_plot_on_figure()}.}\par
}
{\xe \v mat2D_free\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_free ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D} (elements pointer). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix whose elements were allocated via MATRIX2D_MALLOC. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Safe to call with m.elements == NULL. \par
}}}{
Definition at line {\b 314} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::elements}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_camera_free()}, {\b ae_curve_project_world2screen()}, {\b ae_line_clip_with_plane()}, {\b ae_line_itersect_plane()}, {\b ae_line_project_world2screen()}, {\b ae_point_project_view2screen()}, {\b ae_point_project_world2view()}, {\b ae_quad_calc_normal()}, {\b ae_quad_clip_with_plane()}, {\b ae_quad_mesh_project_world2screen()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_set_normals()}, {\b ae_quad_transform_to_view()}, {\b ae_scene_free()}, {\b ae_tri_calc_normal()}, {\b ae_tri_clip_with_plane()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ae_tri_project_world2screen()}, {\b ae_tri_set_normals()}, {\b ae_tri_transform_to_view()}, {\b ae_view_mat_set()}, {\b check_window_mat_size()}, {\b destroy_window()}, {\b mat2D_det()}, {\b mat2D_invert()}, {\b mat2D_set_DCM_zyx()}, and {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_free_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_free_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_free_uint32 ({\b Mat2D_uint32}  {\i m})}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the memory owned by a {\b Mat2D_uint32} (elements pointer). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix whose elements were allocated via MATRIX2D_MALLOC. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Safe to call with m.elements == NULL. \par
}}}{
Definition at line {\b 324} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::elements}.}\par
{
\ql
Referenced by {\b check_window_mat_size()}, and {\b destroy_window()}.}\par
}
{\xe \v mat2D_get_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_get_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_get_col ({\b Mat2D}  {\i des}, size_t  {\i des_col}, {\b Mat2D}  {\i src}, size_t  {\i src_col})}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a column from src into a column of des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same row count as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_col} \cell }{Column index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_col} \cell }{Column index in source. \cell }
{\row }
}
}{
Definition at line {\b 810} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_get_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_get_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_get_row ({\b Mat2D}  {\i des}, size_t  {\i des_row}, {\b Mat2D}  {\i src}, size_t  {\i src_row})}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a row from src into a row of des. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same number of columns as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_row} \cell }{Row index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_row} \cell }{Row index in source. \cell }
{\row }
}
}{
Definition at line {\b 879} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_invert\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_invert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_invert ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src})}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Invert a square matrix using Gauss-Jordan elimination. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same shape as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source square matrix. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
src is square and nonsingular.\par
}}If det(src) == 0, prints an error and sets des to all zeros. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
May be numerically unstable for ill-conditioned matrices. \par
}}}{
Definition at line {\b 1169} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_det()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_mult_row()}, {\b mat2D_set_identity()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_LUP_decomposition_with_swap\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_LUP_decomposition_with_swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_LUP_decomposition_with_swap ({\b Mat2D}  {\i src}, {\b Mat2D}  {\i l}, {\b Mat2D}  {\i p}, {\b Mat2D}  {\i u})}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute LUP decomposition: P*A = L*U with L unit diagonal. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Input matrix A (not modified). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i l} \cell }{Lower triangular matrix with unit diagonal (output). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Permutation matrix (output). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u} \cell }{Upper triangular matrix (output). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
l, p, u are allocated to match src shape; src is square. \par
}}}{
Definition at line {\b 1107} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_copy()}, {\b mat2D_fill()}, {\b mat2D_set_identity()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_solve_linear_sys_LUP_decomposition()}.}\par
}
{\xe \v mat2D_make_identity\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_make_identity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_make_identity ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reduce a matrix to identity via Gauss-Jordan elimination and return the cumulative scaling factor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix reduced in-place to identity (if nonsingular). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The product of row scaling factors applied during elimination. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Intended as a helper for determinant-related operations. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Not robust to singular or ill-conditioned matrices. \par
}}}{
Definition at line {\b 643} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_mult_row()}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_mat_is_all_digit\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_mat_is_all_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mat2D_mat_is_all_digit ({\b Mat2D}  {\i m}, double  {\i digit})}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a matrix equal a given digit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i digit} \cell }{Value to compare. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if every element equals digit, false otherwise. \par
}}}{
Definition at line {\b 949} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_minor_alloc_fill_from_mat\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_alloc_fill_from_mat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_Minor} mat2D_minor_alloc_fill_from_mat ({\b Mat2D}  {\i ref_mat}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a minor view by excluding row i and column j of ref_mat. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ref_mat} \cell }{Reference square matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Excluded row index in ref_mat. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Excluded column index in ref_mat. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b Mat2D_Minor} that references ref_mat. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Free rows_list and cols_list with mat2D_minor_free when done. \par
}}}{
Definition at line {\b 1279} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D_Minor::cols}, {\b Mat2D_Minor::cols_list}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D_Minor::ref_mat}, {\b Mat2D::rows}, {\b Mat2D_Minor::rows}, {\b Mat2D_Minor::rows_list}, and {\b Mat2D_Minor::stride_r}.}\par
}
{\xe \v mat2D_minor_alloc_fill_from_mat_minor\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_alloc_fill_from_mat_minor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Mat2D_Minor} mat2D_minor_alloc_fill_from_mat_minor ({\b Mat2D_Minor}  {\i ref_mm}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocate a nested minor view from an existing minor by excluding row i and column j of the minor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ref_mm} \cell }{Reference minor. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Excluded row index in the minor. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Excluded column index in the minor. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A new {\b Mat2D_Minor} that references the same underlying matrix. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Free rows_list and cols_list with mat2D_minor_free when done. \par
}}}{
Definition at line {\b 1318} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b Mat2D_Minor::cols_list}, {\b MATRIX2D_ASSERT}, {\b MATRIX2D_MALLOC}, {\b Mat2D_Minor::ref_mat}, {\b Mat2D_Minor::rows}, {\b Mat2D_Minor::rows_list}, and {\b Mat2D_Minor::stride_r}.}\par
{
\ql
Referenced by {\b mat2D_minor_det()}.}\par
}
{\xe \v mat2D_minor_det\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_det}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_minor_det ({\b Mat2D_Minor}  {\i mm})}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determinant of a minor via recursive expansion by minors. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Square minor. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
det(mm). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Exponential complexity (factorial). Intended for educational or very small matrices only. \par
}}}{
Definition at line {\b 1396} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b mat2D_det_2x2_mat_minor()}, {\b mat2D_minor_alloc_fill_from_mat_minor()}, {\b MAT2D_MINOR_AT}, {\b mat2D_minor_free()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D_Minor::rows}.}\par
}
{\xe \v mat2D_minor_free\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_minor_free ({\b Mat2D_Minor}  {\i mm})}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free the index arrays owned by a minor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Minor to free. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
After this call, mm.rows_list and mm.cols_list are invalid. \par
}}}{
Definition at line {\b 1353} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols_list}, and {\b Mat2D_Minor::rows_list}.}\par
{
\ql
Referenced by {\b mat2D_minor_det()}.}\par
}
{\xe \v mat2D_minor_print\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_minor_print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_minor_print ({\b Mat2D_Minor}  {\i mm}, const char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a minor matrix to stdout with a name and indentation padding. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mm} \cell }{Minor to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Left padding in spaces. \cell }
{\row }
}
}{
Definition at line {\b 1365} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_Minor::cols}, {\b MAT2D_MINOR_AT}, and {\b Mat2D_Minor::rows}.}\par
}
{\xe \v mat2D_mult\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_mult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_mult ({\b Mat2D}  {\i m}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place scalar multiplication: m *= factor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 557} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_line_itersect_plane()}, {\b ae_quad_calc_normal()}, {\b ae_tri_calc_normal()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_mult_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_mult_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_mult_row ({\b Mat2D}  {\i m}, size_t  {\i r}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place row scaling: row(r) *= factor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 572} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, and {\b mat2D_make_identity()}.}\par
}
{\xe \v mat2D_offset2d\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_offset2d}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t mat2D_offset2d ({\b Mat2D}  {\i m}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Row index (0-based). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Column index (0-based). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The linear offset i * stride_r + j. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= i < rows, 0 <= j < cols (asserted). \par
}}}{
Definition at line {\b 337} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MATRIX2D_ASSERT}, {\b Mat2D::rows}, and {\b Mat2D::stride_r}.}\par
{
\ql
Referenced by {\b mat2D_fill_sequence()}.}\par
}
{\xe \v mat2D_offset2d_uint32\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_offset2d_uint32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t mat2D_offset2d_uint32 ({\b Mat2D_uint32}  {\i m}, size_t  {\i i}, size_t  {\i j})}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compute the linear offset of element (i, j) in a {\b Mat2D_uint32}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{Row index (0-based). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i j} \cell }{Column index (0-based). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The linear offset i * stride_r + j. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 <= i < rows, 0 <= j < cols (asserted). \par
}}}{
Definition at line {\b 351} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D_uint32::cols}, {\b MATRIX2D_ASSERT}, {\b Mat2D_uint32::rows}, and {\b Mat2D_uint32::stride_r}.}\par
}
{\xe \v mat2D_print\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_print ({\b Mat2D}  {\i m}, const char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix to stdout with a name and indentation padding. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Left padding in spaces. \cell }
{\row }
}
}{
Definition at line {\b 585} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_print_as_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_print_as_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_print_as_col ({\b Mat2D}  {\i m}, const char *  {\i name}, size_t  {\i padding})}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print a matrix as a flattened column vector to stdout. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to print (flattened in row-major). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Label to print. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i padding} \cell }{Left padding in spaces. \cell }
{\row }
}
}{
Definition at line {\b 604} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b Mat2D::elements}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_rand\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_rand}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_rand ({\b Mat2D}  {\i m}, double  {\i low}, double  {\i high})}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fill a matrix with random doubles in [low, high). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix to fill. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i low} \cell }{Lower bound (inclusive). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i high} \cell }{Upper bound (exclusive). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
high > low. \par
}}}{
Definition at line {\b 407} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_rand_double()}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_rand_double\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_rand_double}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_rand_double (void )}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pseudo-random double in the range [0, 1]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Uses C library rand() and RAND_MAX. Not cryptographically secure. \par
}}}{
Definition at line {\b 266} of file {\b Matrix2D.h}.}\par
{
\ql
Referenced by {\b mat2D_rand()}.}\par
}
{\xe \v mat2D_row_is_all_digit\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_row_is_all_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mat2D_row_is_all_digit ({\b Mat2D}  {\i m}, double  {\i digit}, size_t  {\i r})}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if all elements of a row equal a given digit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i digit} \cell }{Value to compare. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{Row index. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if every element equals digit, false otherwise. \par
}}}{
Definition at line {\b 968} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_det()}.}\par
}
{\xe \v mat2D_set_DCM_zyx\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_DCM_zyx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_DCM_zyx ({\b Mat2D}  {\i DCM}, float  {\i yaw_deg}, float  {\i pitch_deg}, float  {\i roll_deg})}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Build a 3x3 direction cosine matrix (DCM) from Z-Y-X Euler angles. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i DCM} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i yaw_deg} \cell }{Rotation about Z in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pitch_deg} \cell }{Rotation about Y in degrees. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i roll_deg} \cell }{Rotation about X in degrees.\cell }
{\row }
}
Computes DCM = R_x(roll) * R_y(pitch) * R_z(yaw). \par
}{
Definition at line {\b 743} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b mat2D_alloc()}, {\b mat2D_dot()}, {\b mat2D_free()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, and {\b mat2D_set_rot_mat_z()}.}\par
{
\ql
Referenced by {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_set_identity\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_identity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_identity ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a square matrix to the identity matrix. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix (must be square). \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
m.rows == m.cols. \par
}}}{
Definition at line {\b 619} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_set_rot_mat_x()}, {\b mat2D_set_rot_mat_y()}, and {\b mat2D_set_rot_mat_z()}.}\par
}
{\xe \v mat2D_set_rot_mat_x\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_rot_mat_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_rot_mat_x ({\b Mat2D}  {\i m}, float  {\i angle_deg})}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the X-axis. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Angle in degrees. \cell }
{\row }
}
}{
Definition at line {\b 689} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_set_identity()}, {\b MATRIX2D_ASSERT}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_rotate_Euler_xyz()}, and {\b mat2D_set_DCM_zyx()}.}\par
}
{\xe \v mat2D_set_rot_mat_y\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_rot_mat_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_rot_mat_y ({\b Mat2D}  {\i m}, float  {\i angle_deg})}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Y-axis. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Angle in degrees. \cell }
{\row }
}
}{
Definition at line {\b 706} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_set_identity()}, {\b MATRIX2D_ASSERT}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_tri_mesh_rotate_Euler_xyz()}, and {\b mat2D_set_DCM_zyx()}.}\par
}
{\xe \v mat2D_set_rot_mat_z\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_set_rot_mat_z}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_set_rot_mat_z ({\b Mat2D}  {\i m}, float  {\i angle_deg})}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a 3x3 rotation matrix for rotation about the Z-axis. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{3x3 destination matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i angle_deg} \cell }{Angle in degrees. \cell }
{\row }
}
}{
Definition at line {\b 723} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_set_identity()}, {\b MATRIX2D_ASSERT}, {\b PI}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, and {\b mat2D_set_DCM_zyx()}.}\par
}
{\xe \v mat2D_solve_linear_sys_LUP_decomposition\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_solve_linear_sys_LUP_decomposition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_solve_linear_sys_LUP_decomposition ({\b Mat2D}  {\i A}, {\b Mat2D}  {\i x}, {\b Mat2D}  {\i B})}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solve the linear system A x = B using LUP decomposition. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i A} \cell }{Coefficient matrix (NxN). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Solution vector (N x 1) (output). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i B} \cell }{Right-hand side vector (N x 1).\cell }
{\row }
}
Internally computes LUP and uses explicit inverses of L and U. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Forming inverses explicitly can be less stable; a forward/backward substitution would be preferable for production-quality code. \par
}}}{
Definition at line {\b 1236} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b mat2D_alloc()}, {\b mat2D_dot()}, {\b mat2D_fill()}, {\b mat2D_free()}, {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_sub\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub ({\b Mat2D}  {\i dst}, {\b Mat2D}  {\i a})}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
In-place subtraction: dst -= a. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dst} \cell }{Destination matrix to be decremented. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Subtrahend of same shape as dst. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Shapes match. \par
}}}{
Definition at line {\b 527} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b adl_arrow_draw()}, {\b ae_line_itersect_plane()}, {\b ae_quad_calc_normal()}, {\b ae_quad_project_world2screen()}, {\b ae_quad_set_normals()}, {\b ae_tri_calc_normal()}, {\b ae_tri_project_world2screen()}, {\b ae_tri_set_normals()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_sub_col_to_col\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub_col_to_col}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub_col_to_col ({\b Mat2D}  {\i des}, size_t  {\i des_col}, {\b Mat2D}  {\i src}, size_t  {\i src_col})}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source column from a destination column: des[:, des_col] -= src[:, src_col]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same row count as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_col} \cell }{Column index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_col} \cell }{Column index in source. \cell }
{\row }
}
}{
Definition at line {\b 846} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_sub_row_time_factor_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub_row_time_factor_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub_row_time_factor_to_row ({\b Mat2D}  {\i m}, size_t  {\i des_r}, size_t  {\i src_r}, double  {\i factor})}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Row operation: row(des_r) -= factor * row(src_r). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_r} \cell }{Destination row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_r} \cell }{Source row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i factor} \cell }{Scalar multiplier. \cell }
{\row }
}
}{
Definition at line {\b 545} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, and {\b mat2D_triangulate()}.}\par
}
{\xe \v mat2D_sub_row_to_row\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_sub_row_to_row}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_sub_row_to_row ({\b Mat2D}  {\i des}, size_t  {\i des_row}, {\b Mat2D}  {\i src}, size_t  {\i src_row})}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subtract a source row from a destination row: des[des_row, :] -= src[src_row, :]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (same number of columns as src). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des_row} \cell }{Row index in destination. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src_row} \cell }{Row index in source. \cell }
{\row }
}
}{
Definition at line {\b 915} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
}
{\xe \v mat2D_swap_rows\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_swap_rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_swap_rows ({\b Mat2D}  {\i m}, size_t  {\i r1}, size_t  {\i r2})}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Swap two rows of a matrix in-place. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r1} \cell }{First row index. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r2} \cell }{Second row index. \cell }
{\row }
}
}{
Definition at line {\b 863} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, and {\b MAT2D_AT}.}\par
{
\ql
Referenced by {\b mat2D_invert()}, {\b mat2D_LUP_decomposition_with_swap()}, {\b mat2D_make_identity()}, and {\b mat2D_triangulate()}.}\par
}
{\xe \v mat2D_transpose\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_transpose}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mat2D_transpose ({\b Mat2D}  {\i des}, {\b Mat2D}  {\i src})}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transpose a matrix: des = src^T. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i des} \cell }{Destination matrix (shape src.cols x src.rows). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i src} \cell }{Source matrix. \cell }
{\row }
}
}{
Definition at line {\b 1149} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b MATRIX2D_ASSERT}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b ae_tri_project_world2screen()}, and {\b ae_view_mat_set()}.}\par
}
{\xe \v mat2D_triangulate\:Matrix2D.h}
{\xe \v Matrix2D.h\:mat2D_triangulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double mat2D_triangulate ({\b Mat2D}  {\i m})}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Forward elimination to transform a matrix to upper triangular form. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{Matrix transformed in-place. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Product of row scaling factors (currently 1 in this implementation). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Used as part of determinant computation via triangularization. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Warning\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Not robust for linearly dependent rows or tiny pivots. \par
}}}{
Definition at line {\b 1013} of file {\b Matrix2D.h}.}\par
{
\ql
References {\b Mat2D::cols}, {\b MAT2D_AT}, {\b mat2D_sub_row_time_factor_to_row()}, {\b mat2D_swap_rows()}, and {\b Mat2D::rows}.}\par
{
\ql
Referenced by {\b mat2D_det()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matrix2D.h\par \pard\plain 
{\tc\tcl2 \v src/include/Matrix2D.h}
{\xe \v src/include/Matrix2D.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00039 {\cf21 #ifndef MATRIX2D_H_}\par
00040 {\cf21 #define MATRIX2D_H_}\par
00041 \par
00042 {\cf21 #include <stddef.h>}\par
00043 {\cf21 #include <stdio.h>}\par
00044 {\cf21 #include <stdlib.h>}\par
00045 {\cf21 #include <stdint.h>}\par
00046 {\cf21 #include <stdbool.h>}\par
00047 \par
00055 {\cf21 #ifndef MATRIX2D_MALLOC}\par
00056 {\cf21 #define MATRIX2D_MALLOC malloc}\par
00057 {\cf21 #endif }{\cf20 //MATRIX2D_MALLOC}\par
00058 \par
00066 {\cf21 #ifndef MATRIX2D_ASSERT}\par
00067 {\cf21 #include <assert.h>}\par
00068 {\cf21 #define MATRIX2D_ASSERT assert}\par
00069 {\cf21 #endif }{\cf20 //MATRIX2D_ASSERT}\par
00070 \par
00081 {\cf17 typedef} {\cf17 struct }\{\par
00082     {\cf18 size_t} rows;\par
00083     {\cf18 size_t} cols;\par
00084     {\cf18 size_t} stride_r; {\cf20 /* how many element you need to traves to get to the element underneath */}\par
00085     {\cf18 double} *elements;\par
00086 \} Mat2D;\par
00087 \par
00098 {\cf17 typedef} {\cf17 struct }\{\par
00099     {\cf18 size_t} rows;\par
00100     {\cf18 size_t} cols;\par
00101     {\cf18 size_t} stride_r; {\cf20 /* how many element you need to traves to get to the element underneath */}\par
00102     uint32_t *elements;\par
00103 \} Mat2D_uint32;\par
00104 \par
00119 {\cf17 typedef} {\cf17 struct }\{\par
00120     {\cf18 size_t} rows;\par
00121     {\cf18 size_t} cols;\par
00122     {\cf18 size_t} stride_r; {\cf20 /* how many element you need to traves to get to the element underneath */}\par
00123     {\cf18 size_t} *rows_list;\par
00124     {\cf18 size_t} *cols_list;\par
00125     Mat2D ref_mat;\par
00126 \} Mat2D_Minor;\par
00127 \par
00141 {\cf21 #if 0}\par
00142 {\cf21 #define MAT2D_AT(m, i, j) (m).elements[mat2D_offset2d((m), (i), (j))]}\par
00143 {\cf21 #define MAT2D_AT_UINT32(m, i, j) (m).elements[mat2D_offset2d_uint32((m), (i), (j))]}\par
00144 {\cf21 #else }{\cf20 /* use this macro for batter performance but no assertion */}{\cf21 }\par
00145 {\cf21 #define MAT2D_AT(m, i, j) (m).elements[i * m.stride_r + j]}\par
00146 {\cf21 #define MAT2D_AT_UINT32(m, i, j) (m).elements[i * m.stride_r + j]}\par
00147 {\cf21 #endif}\par
00148 \par
00149 {\cf21 #ifndef PI}\par
00150 {\cf21     #ifndef __USE_MISC}\par
00151 {\cf21     #define __USE_MISC}\par
00152 {\cf21     #endif}\par
00153 {\cf21     #include <math.h>}\par
00154 {\cf21     #define PI M_PI}\par
00155 {\cf21 #endif}\par
00156 \par
00162 {\cf21 #define MAT2D_MINOR_AT(mm, i, j) MAT2D_AT(mm.ref_mat, mm.rows_list[i], mm.cols_list[j])}\par
00167 {\cf21 #define MAT2D_PRINT(m) mat2D_print(m, #m, 0)}\par
00172 {\cf21 #define MAT2D_PRINT_AS_COL(m) mat2D_print_as_col(m, #m, 0)}\par
00177 {\cf21 #define MAT2D_MINOR_PRINT(mm) mat2D_minor_print(mm, #mm, 0)}\par
00184 {\cf21 #define mat2D_normalize(m) mat2D_mult((m), 1.0 / mat2D_calc_norma((m)))}\par
00185 \par
00186 {\cf18 double} mat2D_rand_double({\cf18 void});\par
00187 \par
00188 Mat2D mat2D_alloc({\cf18 size_t} rows, {\cf18 size_t} cols);\par
00189 Mat2D_uint32 mat2D_alloc_uint32({\cf18 size_t} rows, {\cf18 size_t} cols);\par
00190 {\cf18 void} mat2D_free(Mat2D m);\par
00191 {\cf18 void} mat2D_free_uint32(Mat2D_uint32 m);\par
00192 {\cf18 size_t} mat2D_offset2d(Mat2D m, {\cf18 size_t} i, {\cf18 size_t} j);\par
00193 {\cf18 size_t} mat2D_offset2d_uint32(Mat2D_uint32 m, {\cf18 size_t} i, {\cf18 size_t} j);\par
00194 \par
00195 {\cf18 void} mat2D_fill(Mat2D m, {\cf18 double} x);\par
00196 {\cf18 void} mat2D_fill_sequence(Mat2D m, {\cf18 double} start, {\cf18 double} step);\par
00197 {\cf18 void} mat2D_fill_uint32(Mat2D_uint32 m, uint32_t x);\par
00198 {\cf18 void} mat2D_rand(Mat2D m, {\cf18 double} low, {\cf18 double} high);\par
00199 \par
00200 {\cf18 void} mat2D_dot(Mat2D dst, Mat2D a, Mat2D b);\par
00201 {\cf18 double} mat2D_dot_product(Mat2D a, Mat2D b);\par
00202 {\cf18 void} mat2D_cross(Mat2D dst, Mat2D a, Mat2D b);\par
00203 \par
00204 {\cf18 void} mat2D_add(Mat2D dst, Mat2D a);\par
00205 {\cf18 void} mat2D_add_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor);\par
00206 \par
00207 {\cf18 void} mat2D_sub(Mat2D dst, Mat2D a);\par
00208 {\cf18 void} mat2D_sub_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor);\par
00209 \par
00210 {\cf18 void} mat2D_mult(Mat2D m, {\cf18 double} factor);\par
00211 {\cf18 void} mat2D_mult_row(Mat2D m, {\cf18 size_t} r, {\cf18 double} factor);\par
00212 \par
00213 {\cf18 void} mat2D_print(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding);\par
00214 {\cf18 void} mat2D_print_as_col(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding);\par
00215 \par
00216 {\cf18 void} mat2D_set_identity(Mat2D m);\par
00217 {\cf18 double} mat2D_make_identity(Mat2D m);\par
00218 {\cf18 void} mat2D_set_rot_mat_x(Mat2D m, {\cf18 float} angle_deg);\par
00219 {\cf18 void} mat2D_set_rot_mat_y(Mat2D m, {\cf18 float} angle_deg);\par
00220 {\cf18 void} mat2D_set_rot_mat_z(Mat2D m, {\cf18 float} angle_deg);\par
00221 {\cf18 void} mat2D_set_DCM_zyx(Mat2D DCM, {\cf18 float} yaw_deg, {\cf18 float} pitch_deg, {\cf18 float} roll_deg);\par
00222 \par
00223 {\cf18 void} mat2D_copy(Mat2D des, Mat2D src);\par
00224 {\cf18 void} mat2D_copy_mat_to_mat_at_window(Mat2D des, Mat2D src, {\cf18 size_t} is, {\cf18 size_t} js, {\cf18 size_t} ie, {\cf18 size_t} je);\par
00225 \par
00226 {\cf18 void} mat2D_get_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col);\par
00227 {\cf18 void} mat2D_add_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col);\par
00228 {\cf18 void} mat2D_sub_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col);\par
00229 \par
00230 {\cf18 void} mat2D_swap_rows(Mat2D m, {\cf18 size_t} r1, {\cf18 size_t} r2);\par
00231 {\cf18 void} mat2D_get_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row);\par
00232 {\cf18 void} mat2D_add_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row);\par
00233 {\cf18 void} mat2D_sub_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row);\par
00234 \par
00235 {\cf18 double} mat2D_calc_norma(Mat2D m);\par
00236 \par
00237 {\cf18 bool} mat2D_mat_is_all_digit(Mat2D m, {\cf18 double} digit);\par
00238 {\cf18 bool} mat2D_row_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} r);\par
00239 {\cf18 bool} mat2D_col_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} c);\par
00240 \par
00241 {\cf18 double} mat2D_det_2x2_mat(Mat2D m);\par
00242 {\cf18 double} mat2D_triangulate(Mat2D m);\par
00243 {\cf18 double} mat2D_det(Mat2D m);\par
00244 {\cf18 void} mat2D_LUP_decomposition_with_swap(Mat2D src, Mat2D l, Mat2D p, Mat2D u);\par
00245 {\cf18 void} mat2D_transpose(Mat2D des, Mat2D src);\par
00246 {\cf18 void} mat2D_invert(Mat2D des, Mat2D src);\par
00247 {\cf18 void} mat2D_solve_linear_sys_LUP_decomposition(Mat2D A, Mat2D x, Mat2D B);\par
00248 \par
00249 Mat2D_Minor mat2D_minor_alloc_fill_from_mat(Mat2D ref_mat, {\cf18 size_t} i, {\cf18 size_t} j);\par
00250 Mat2D_Minor mat2D_minor_alloc_fill_from_mat_minor(Mat2D_Minor ref_mm, {\cf18 size_t} i, {\cf18 size_t} j);\par
00251 {\cf18 void} mat2D_minor_free(Mat2D_Minor mm);\par
00252 {\cf18 void} mat2D_minor_print(Mat2D_Minor mm, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding);\par
00253 {\cf18 double} mat2D_det_2x2_mat_minor(Mat2D_Minor mm);\par
00254 {\cf18 double} mat2D_minor_det(Mat2D_Minor mm);\par
00255 \par
00256 {\cf21 #endif }{\cf20 // MATRIX2D_H_}\par
00257 \par
00258 {\cf21 #ifdef MATRIX2D_IMPLEMENTATION}\par
00259 {\cf21 #undef MATRIX2D_IMPLEMENTATION}\par
00260 \par
00261 \par
00266 {\cf18 double} mat2D_rand_double({\cf18 void})\par
00267 \{\par
00268     {\cf19 return} ({\cf18 double}) rand() / (double) RAND_MAX;\par
00269 \}\par
00270 \par
00278 Mat2D mat2D_alloc({\cf18 size_t} rows, {\cf18 size_t} cols)\par
00279 \{\par
00280     Mat2D m;\par
00281     m.rows = rows;\par
00282     m.cols = cols;\par
00283     m.stride_r = cols;\par
00284     m.elements = ({\cf18 double}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*rows*cols);\par
00285     MATRIX2D_ASSERT(m.elements != NULL);\par
00286     \par
00287     {\cf19 return} m;\par
00288 \}\par
00289 \par
00297 Mat2D_uint32 mat2D_alloc_uint32({\cf18 size_t} rows, {\cf18 size_t} cols)\par
00298 \{\par
00299     Mat2D_uint32 m;\par
00300     m.rows = rows;\par
00301     m.cols = cols;\par
00302     m.stride_r = cols;\par
00303     m.elements = (uint32_t*)MATRIX2D_MALLOC({\cf17 sizeof}(uint32_t)*rows*cols);\par
00304     MATRIX2D_ASSERT(m.elements != NULL);\par
00305     \par
00306     {\cf19 return} m;\par
00307 \}\par
00308 \par
00314 {\cf18 void} mat2D_free(Mat2D m)\par
00315 \{\par
00316     free(m.elements);\par
00317 \}\par
00318 \par
00324 {\cf18 void} mat2D_free_uint32(Mat2D_uint32 m)\par
00325 \{\par
00326     free(m.elements);\par
00327 \}\par
00328 \par
00337 {\cf18 size_t} mat2D_offset2d(Mat2D m, {\cf18 size_t} i, {\cf18 size_t} j)\par
00338 \{\par
00339     MATRIX2D_ASSERT(i < m.rows && j < m.cols);\par
00340     {\cf19 return} i * m.stride_r + j;\par
00341 \}\par
00342 \par
00351 {\cf18 size_t} mat2D_offset2d_uint32(Mat2D_uint32 m, {\cf18 size_t} i, {\cf18 size_t} j)\par
00352 \{\par
00353     MATRIX2D_ASSERT(i < m.rows && j < m.cols);\par
00354     {\cf19 return} i * m.stride_r + j;\par
00355 \}\par
00356 \par
00362 {\cf18 void} mat2D_fill(Mat2D m, {\cf18 double} x)\par
00363 \{\par
00364     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00365         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00366             MAT2D_AT(m, i, j) = x;\par
00367         \}\par
00368     \}\par
00369 \}\par
00370 \par
00378 {\cf18 void} mat2D_fill_sequence(Mat2D m, {\cf18 double} start, {\cf18 double} step) \{\par
00379     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; i++) \{\par
00380         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; j++) \{\par
00381             MAT2D_AT(m, i, j) = start + step * mat2D_offset2d(m, i, j);\par
00382         \}\par
00383     \}\par
00384 \}\par
00385 \par
00391 {\cf18 void} mat2D_fill_uint32(Mat2D_uint32 m, uint32_t x)\par
00392 \{\par
00393     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00394         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00395             MAT2D_AT_UINT32(m, i, j) = x;\par
00396         \}\par
00397     \}\par
00398 \}\par
00399 \par
00407 {\cf18 void} mat2D_rand(Mat2D m, {\cf18 double} low, {\cf18 double} high)\par
00408 \{\par
00409     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00410         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00411             MAT2D_AT(m, i, j) = mat2D_rand_double()*(high - low) + low;\par
00412         \}\par
00413     \}\par
00414 \}\par
00415 \par
00424 {\cf18 void} mat2D_dot(Mat2D dst, Mat2D a, Mat2D b)\par
00425 \{\par
00426     MATRIX2D_ASSERT(a.cols == b.rows);\par
00427     MATRIX2D_ASSERT(a.rows == dst.rows);\par
00428     MATRIX2D_ASSERT(b.cols == dst.cols);\par
00429 \par
00430     {\cf18 size_t} i, j, k;\par
00431 \par
00432     {\cf19 for} (i = 0; i < dst.rows; i++) \{\par
00433         {\cf19 for} (j = 0; j < dst.cols; j++) \{\par
00434             MAT2D_AT(dst, i, j) = 0;\par
00435             {\cf19 for} (k = 0; k < a.cols; k++) \{\par
00436                 MAT2D_AT(dst, i, j) += MAT2D_AT(a, i, k)*MAT2D_AT(b, k, j);\par
00437             \}\par
00438         \}\par
00439     \}\par
00440 \par
00441 \}\par
00442 \par
00450 {\cf18 double} mat2D_dot_product(Mat2D a, Mat2D b)\par
00451 \{\par
00452     MATRIX2D_ASSERT(a.rows == b.rows);\par
00453     MATRIX2D_ASSERT(a.cols == b.cols);\par
00454     MATRIX2D_ASSERT((1 == a.cols && 1 == b.cols) || (1 == a.rows && 1 == b.rows));\par
00455 \par
00456     {\cf18 double} dot_product = 0;\par
00457 \par
00458     {\cf19 if} (1 == a.cols) \{\par
00459         {\cf19 for} ({\cf18 size_t} i = 0; i < a.rows; i++) \{\par
00460             dot_product += MAT2D_AT(a, i, 0) * MAT2D_AT(b, i, 0);\par
00461         \}\par
00462     \} {\cf19 else} \{\par
00463         {\cf19 for} ({\cf18 size_t} j = 0; j < a.cols; j++) \{\par
00464             dot_product += MAT2D_AT(a, 0, j) * MAT2D_AT(b, 0, j);\par
00465         \}\par
00466     \}\par
00467     \par
00468     {\cf19 return} dot_product;\par
00469     \par
00470 \}\par
00471 \par
00479 {\cf18 void} mat2D_cross(Mat2D dst, Mat2D a, Mat2D b)\par
00480 \{\par
00481     MATRIX2D_ASSERT(3 == dst.rows && 1 == dst.cols);\par
00482     MATRIX2D_ASSERT(3 == a.rows && 1 == a.cols);\par
00483     MATRIX2D_ASSERT(3 == b.rows && 1 == b.cols);\par
00484 \par
00485     MAT2D_AT(dst, 0, 0) = MAT2D_AT(a, 1, 0) * MAT2D_AT(b, 2, 0) - MAT2D_AT(a, 2, 0) * MAT2D_AT(b, 1, 0);\par
00486     MAT2D_AT(dst, 1, 0) = MAT2D_AT(a, 2, 0) * MAT2D_AT(b, 0, 0) - MAT2D_AT(a, 0, 0) * MAT2D_AT(b, 2, 0);\par
00487     MAT2D_AT(dst, 2, 0) = MAT2D_AT(a, 0, 0) * MAT2D_AT(b, 1, 0) - MAT2D_AT(a, 1, 0) * MAT2D_AT(b, 0, 0);\par
00488 \}\par
00489 \par
00496 {\cf18 void} mat2D_add(Mat2D dst, Mat2D a)\par
00497 \{\par
00498     MATRIX2D_ASSERT(dst.rows == a.rows);\par
00499     MATRIX2D_ASSERT(dst.cols == a.cols);\par
00500     {\cf19 for} ({\cf18 size_t} i = 0; i < dst.rows; ++i) \{\par
00501         {\cf19 for} ({\cf18 size_t} j = 0; j < dst.cols; ++j) \{\par
00502             MAT2D_AT(dst, i, j) += MAT2D_AT(a, i, j);\par
00503         \}\par
00504     \}\par
00505 \}\par
00506 \par
00514 {\cf18 void} mat2D_add_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor)\par
00515 \{\par
00516     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00517         MAT2D_AT(m, des_r, j) += factor * MAT2D_AT(m, src_r, j);\par
00518     \}\par
00519 \}\par
00520 \par
00527 {\cf18 void} mat2D_sub(Mat2D dst, Mat2D a)\par
00528 \{\par
00529     MATRIX2D_ASSERT(dst.rows == a.rows);\par
00530     MATRIX2D_ASSERT(dst.cols == a.cols);\par
00531     {\cf19 for} ({\cf18 size_t} i = 0; i < dst.rows; ++i) \{\par
00532         {\cf19 for} ({\cf18 size_t} j = 0; j < dst.cols; ++j) \{\par
00533             MAT2D_AT(dst, i, j) -= MAT2D_AT(a, i, j);\par
00534         \}\par
00535     \}\par
00536 \}\par
00537 \par
00545 {\cf18 void} mat2D_sub_row_time_factor_to_row(Mat2D m, {\cf18 size_t} des_r, {\cf18 size_t} src_r, {\cf18 double} factor)\par
00546 \{\par
00547     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00548         MAT2D_AT(m, des_r, j) -= factor * MAT2D_AT(m, src_r, j);\par
00549     \}\par
00550 \}\par
00551 \par
00557 {\cf18 void} mat2D_mult(Mat2D m, {\cf18 double} factor)\par
00558 \{\par
00559     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00560         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00561             MAT2D_AT(m, i, j) *= factor;\par
00562         \}\par
00563     \}\par
00564 \}\par
00565 \par
00572 {\cf18 void} mat2D_mult_row(Mat2D m, {\cf18 size_t} r, {\cf18 double} factor)\par
00573 \{\par
00574     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00575         MAT2D_AT(m, r, j) *= factor;\par
00576     \}\par
00577 \}\par
00578 \par
00585 {\cf18 void} mat2D_print(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding)\par
00586 \{\par
00587     printf({\cf22 "%*s%s = [\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
00588     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00589         printf({\cf22 "%*s    "}, ({\cf18 int}) padding, {\cf22 ""});\par
00590         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00591             printf({\cf22 "%9.6f "}, MAT2D_AT(m, i, j));\par
00592         \}\par
00593         printf({\cf22 "\\n"});\par
00594     \}\par
00595     printf({\cf22 "%*s]\\n"}, ({\cf18 int}) padding, {\cf22 ""});\par
00596 \}\par
00597 \par
00604 {\cf18 void} mat2D_print_as_col(Mat2D m, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding)\par
00605 \{\par
00606     printf({\cf22 "%*s%s = [\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
00607     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows*m.cols; ++i) \{\par
00608             printf({\cf22 "%*s    "}, ({\cf18 int}) padding, {\cf22 ""});\par
00609             printf({\cf22 "%f\\n"}, m.elements[i]);\par
00610     \}\par
00611     printf({\cf22 "%*s]\\n"}, ({\cf18 int}) padding, {\cf22 ""});\par
00612 \}\par
00613 \par
00619 {\cf18 void} mat2D_set_identity(Mat2D m)\par
00620 \{\par
00621     MATRIX2D_ASSERT(m.cols == m.rows);\par
00622     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00623         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00624             MAT2D_AT(m, i, j) = i == j ? 1 : 0;\par
00625             {\cf20 // if (i == j) \{}\par
00626             {\cf20 //     MAT2D_AT(m, i, j) = 1;}\par
00627             {\cf20 // \}}\par
00628             {\cf20 // else \{}\par
00629             {\cf20 //     MAT2D_AT(m, i, j) = 0;}\par
00630             {\cf20 // \}}\par
00631         \}\par
00632     \}\par
00633 \}\par
00634 \par
00643 {\cf18 double} mat2D_make_identity(Mat2D m)\par
00644 \{\par
00645     {\cf20 /* make identity matrix using Gauss elimination */}\par
00646     {\cf20 /* preforming Gauss elimination: https://en.wikipedia.org/wiki/Gaussian_elimination */}\par
00647     {\cf20 /* returns the factor multiplying the determinant */}\par
00648 \par
00649     {\cf18 double} factor_to_return = 1;\par
00650 \par
00651     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(m.rows-1, m.cols); i++) \{\par
00652         {\cf20 /* check if it is the biggest first number (absolute value) */}\par
00653         {\cf18 size_t} biggest_r = i;\par
00654         {\cf19 for} ({\cf18 size_t} index = i; index < m.rows; index++) \{\par
00655             {\cf19 if} (fabs(MAT2D_AT(m, index, index)) > fabs(MAT2D_AT(m, biggest_r, 0))) \{\par
00656                 biggest_r = index;\par
00657             \}\par
00658         \}\par
00659         {\cf19 if} (i != biggest_r) \{\par
00660             mat2D_swap_rows(m, i, biggest_r);\par
00661             factor_to_return *= -1;\par
00662         \}\par
00663         {\cf19 for} ({\cf18 size_t} j = i+1; j < m.cols; j++) \{\par
00664             {\cf18 double} factor = 1 / MAT2D_AT(m, i, i);\par
00665             mat2D_sub_row_time_factor_to_row(m, j, i, MAT2D_AT(m, j, i) * factor);\par
00666             mat2D_mult_row(m, i, factor);\par
00667             factor_to_return *= factor;\par
00668         \}\par
00669     \}\par
00670     {\cf18 double} factor = 1 / MAT2D_AT(m, m.rows-1, m.cols-1);\par
00671     mat2D_mult_row(m, m.rows-1, factor);\par
00672     factor_to_return *= factor;\par
00673     {\cf19 for} ({\cf18 size_t} c = m.cols-1; c > 0; c--) \{\par
00674         {\cf19 for} ({\cf18 int} r = c-1; r >= 0; r--) \{\par
00675             {\cf18 double} factor = 1 / MAT2D_AT(m, c, c);\par
00676             mat2D_sub_row_time_factor_to_row(m, r, c, MAT2D_AT(m, r, c) * factor);\par
00677         \}\par
00678     \}\par
00679 \par
00680 \par
00681     {\cf19 return} factor_to_return;\par
00682 \}\par
00683 \par
00689 {\cf18 void} mat2D_set_rot_mat_x(Mat2D m, {\cf18 float} angle_deg)\par
00690 \{\par
00691     MATRIX2D_ASSERT(3 == m.cols && 3 == m.rows);\par
00692 \par
00693     {\cf18 float} angle_rad = angle_deg * PI / 180;\par
00694     mat2D_set_identity(m);\par
00695     MAT2D_AT(m, 1, 1) =  cos(angle_rad);\par
00696     MAT2D_AT(m, 1, 2) =  sin(angle_rad);\par
00697     MAT2D_AT(m, 2, 1) = -sin(angle_rad);\par
00698     MAT2D_AT(m, 2, 2) =  cos(angle_rad);\par
00699 \}\par
00700 \par
00706 {\cf18 void} mat2D_set_rot_mat_y(Mat2D m, {\cf18 float} angle_deg)\par
00707 \{\par
00708     MATRIX2D_ASSERT(3 == m.cols && 3 == m.rows);\par
00709 \par
00710     {\cf18 float} angle_rad = angle_deg * PI / 180;\par
00711     mat2D_set_identity(m);\par
00712     MAT2D_AT(m, 0, 0) =  cos(angle_rad);\par
00713     MAT2D_AT(m, 0, 2) = -sin(angle_rad);\par
00714     MAT2D_AT(m, 2, 0) =  sin(angle_rad);\par
00715     MAT2D_AT(m, 2, 2) =  cos(angle_rad);\par
00716 \}\par
00717 \par
00723 {\cf18 void} mat2D_set_rot_mat_z(Mat2D m, {\cf18 float} angle_deg)\par
00724 \{\par
00725     MATRIX2D_ASSERT(3 == m.cols && 3 == m.rows);\par
00726 \par
00727     {\cf18 float} angle_rad = angle_deg * PI / 180;\par
00728     mat2D_set_identity(m);\par
00729     MAT2D_AT(m, 0, 0) =  cos(angle_rad);\par
00730     MAT2D_AT(m, 0, 1) =  sin(angle_rad);\par
00731     MAT2D_AT(m, 1, 0) = -sin(angle_rad);\par
00732     MAT2D_AT(m, 1, 1) =  cos(angle_rad);\par
00733 \}\par
00734 \par
00743 {\cf18 void} mat2D_set_DCM_zyx(Mat2D DCM, {\cf18 float} yaw_deg, {\cf18 float} pitch_deg, {\cf18 float} roll_deg)\par
00744 \{\par
00745     Mat2D RotZ = mat2D_alloc(3,3);\par
00746     mat2D_set_rot_mat_z(RotZ, yaw_deg);\par
00747     Mat2D RotY = mat2D_alloc(3,3);\par
00748     mat2D_set_rot_mat_y(RotY, pitch_deg);\par
00749     Mat2D RotX = mat2D_alloc(3,3);\par
00750     mat2D_set_rot_mat_x(RotX, roll_deg);\par
00751     Mat2D temp = mat2D_alloc(3,3);\par
00752 \par
00753     mat2D_dot(temp, RotY, RotZ);\par
00754     mat2D_dot(DCM, RotX, temp); {\cf20 /* I have a DCM */}\par
00755 \par
00756     mat2D_free(RotZ);\par
00757     mat2D_free(RotY);\par
00758     mat2D_free(RotX);\par
00759     mat2D_free(temp);\par
00760 \}\par
00761 \par
00768 {\cf18 void} mat2D_copy(Mat2D des, Mat2D src)\par
00769 \{\par
00770     MATRIX2D_ASSERT(des.cols == src.cols);\par
00771     MATRIX2D_ASSERT(des.rows == src.rows);\par
00772 \par
00773     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; ++i) \{\par
00774         {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; ++j) \{\par
00775             MAT2D_AT(des, i, j) = MAT2D_AT(src, i, j);\par
00776         \}\par
00777     \}\par
00778 \}\par
00779 \par
00790 {\cf18 void} mat2D_copy_mat_to_mat_at_window(Mat2D des, Mat2D src, {\cf18 size_t} is, {\cf18 size_t} js, {\cf18 size_t} ie, {\cf18 size_t} je)\par
00791 \{\par
00792     MATRIX2D_ASSERT(je > js && ie > is);\par
00793     MATRIX2D_ASSERT(je-js+1 == des.cols);\par
00794     MATRIX2D_ASSERT(ie-is+1 == des.rows);\par
00795 \par
00796     {\cf19 for} ({\cf18 size_t} index = 0; index < des.rows; ++index) \{\par
00797         {\cf19 for} ({\cf18 size_t} jndex = 0; jndex < des.cols; ++jndex) \{\par
00798             MAT2D_AT(des, index, jndex) = MAT2D_AT(src, is+index, js+jndex);\par
00799         \}\par
00800     \}\par
00801 \}\par
00802 \par
00810 {\cf18 void} mat2D_get_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col)\par
00811 \{\par
00812     MATRIX2D_ASSERT(src_col < src.cols);\par
00813     MATRIX2D_ASSERT(des.rows == src.rows);\par
00814     MATRIX2D_ASSERT(des_col < des.cols);\par
00815 \par
00816     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; i++) \{\par
00817         MAT2D_AT(des, i, des_col) = MAT2D_AT(src, i, src_col);\par
00818     \}\par
00819 \}\par
00820 \par
00828 {\cf18 void} mat2D_add_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col)\par
00829 \{\par
00830     MATRIX2D_ASSERT(src_col < src.cols);\par
00831     MATRIX2D_ASSERT(des.rows == src.rows);\par
00832     MATRIX2D_ASSERT(des_col < des.cols);\par
00833 \par
00834     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; i++) \{\par
00835         MAT2D_AT(des, i, des_col) += MAT2D_AT(src, i, src_col);\par
00836     \}\par
00837 \}\par
00838 \par
00846 {\cf18 void} mat2D_sub_col_to_col(Mat2D des, {\cf18 size_t} des_col, Mat2D src, {\cf18 size_t} src_col)\par
00847 \{\par
00848     MATRIX2D_ASSERT(src_col < src.cols);\par
00849     MATRIX2D_ASSERT(des.rows == src.rows);\par
00850     MATRIX2D_ASSERT(des_col < des.cols);\par
00851 \par
00852     {\cf19 for} ({\cf18 size_t} i = 0; i < des.rows; i++) \{\par
00853         MAT2D_AT(des, i, des_col) -= MAT2D_AT(src, i, src_col);\par
00854     \}\par
00855 \}\par
00856 \par
00863 {\cf18 void} mat2D_swap_rows(Mat2D m, {\cf18 size_t} r1, {\cf18 size_t} r2)\par
00864 \{\par
00865     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; j++) \{\par
00866         {\cf18 double} temp = MAT2D_AT(m, r1, j);\par
00867         MAT2D_AT(m, r1, j) = MAT2D_AT(m, r2, j);\par
00868         MAT2D_AT(m, r2, j) = temp;\par
00869     \}\par
00870 \}\par
00871 \par
00879 {\cf18 void} mat2D_get_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row)\par
00880 \{\par
00881     MATRIX2D_ASSERT(src_row < src.rows);\par
00882     MATRIX2D_ASSERT(des.cols == src.cols);\par
00883     MATRIX2D_ASSERT(des_row < des.rows);\par
00884 \par
00885     {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; j++) \{\par
00886         MAT2D_AT(des, des_row, j) = MAT2D_AT(src, src_row, j);\par
00887     \}\par
00888 \}\par
00889 \par
00897 {\cf18 void} mat2D_add_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row)\par
00898 \{\par
00899     MATRIX2D_ASSERT(src_row < src.rows);\par
00900     MATRIX2D_ASSERT(des.cols == src.cols);\par
00901     MATRIX2D_ASSERT(des_row < des.rows);\par
00902 \par
00903     {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; j++) \{\par
00904         MAT2D_AT(des, des_row, j) += MAT2D_AT(src, src_row, j);\par
00905     \}\par
00906 \}\par
00907 \par
00915 {\cf18 void} mat2D_sub_row_to_row(Mat2D des, {\cf18 size_t} des_row, Mat2D src, {\cf18 size_t} src_row)\par
00916 \{\par
00917     MATRIX2D_ASSERT(src_row < src.rows);\par
00918     MATRIX2D_ASSERT(des.cols == src.cols);\par
00919     MATRIX2D_ASSERT(des_row < des.rows);\par
00920 \par
00921     {\cf19 for} ({\cf18 size_t} j = 0; j < des.cols; j++) \{\par
00922         MAT2D_AT(des, des_row, j) -= MAT2D_AT(src, src_row, j);\par
00923     \}\par
00924 \}\par
00925 \par
00931 {\cf18 double} mat2D_calc_norma(Mat2D m)\par
00932 \{\par
00933     {\cf18 double} sum = 0;\par
00934 \par
00935     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00936         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00937             sum += MAT2D_AT(m, i, j) * MAT2D_AT(m, i, j);\par
00938         \}\par
00939     \}\par
00940     {\cf19 return} sqrt(sum);\par
00941 \}\par
00942 \par
00949 {\cf18 bool} mat2D_mat_is_all_digit(Mat2D m, {\cf18 double} digit)\par
00950 \{\par
00951     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; ++i) \{\par
00952         {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00953             {\cf19 if} (MAT2D_AT(m, i, j) != digit) \{\par
00954                 {\cf19 return} {\cf17 false};\par
00955             \}\par
00956         \}\par
00957     \}\par
00958     {\cf19 return} {\cf17 true};\par
00959 \}\par
00960 \par
00968 {\cf18 bool} mat2D_row_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} r)\par
00969 \{\par
00970     {\cf19 for} ({\cf18 size_t} j = 0; j < m.cols; ++j) \{\par
00971         {\cf19 if} (MAT2D_AT(m, r, j) != digit) \{\par
00972             {\cf19 return} {\cf17 false};\par
00973         \}\par
00974     \}\par
00975     {\cf19 return} {\cf17 true};\par
00976 \}\par
00977 \par
00985 {\cf18 bool} mat2D_col_is_all_digit(Mat2D m, {\cf18 double} digit, {\cf18 size_t} c)\par
00986 \{\par
00987     {\cf19 for} ({\cf18 size_t} i = 0; i < m.cols; ++i) \{\par
00988         {\cf19 if} (MAT2D_AT(m, i, c) != digit) \{\par
00989             {\cf19 return} {\cf17 false};\par
00990         \}\par
00991     \}\par
00992     {\cf19 return} {\cf17 true};\par
00993 \}\par
00994 \par
01000 {\cf18 double} mat2D_det_2x2_mat(Mat2D m)\par
01001 \{\par
01002     MATRIX2D_ASSERT(2 == m.cols && 2 == m.rows && {\cf22 "Not a 2x2 matrix"});\par
01003     {\cf19 return} MAT2D_AT(m, 0, 0) * MAT2D_AT(m, 1, 1) - MAT2D_AT(m, 0, 1) * MAT2D_AT(m, 1, 0);\par
01004 \}\par
01005 \par
01013 {\cf18 double} mat2D_triangulate(Mat2D m)\par
01014 \{\par
01015     {\cf20 /* preforming Gauss elimination: https://en.wikipedia.org/wiki/Gaussian_elimination */}\par
01016     {\cf20 /* returns the factor multiplying the determinant */}\par
01017 \par
01018     {\cf18 double} factor_to_return = 1;\par
01019 \par
01020     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(m.rows-1, m.cols); i++) \{\par
01021         {\cf19 if} (!MAT2D_AT(m, i, i)) \{   {\cf20 /* swapping only if it is zero */}\par
01022             {\cf20 /* finding biggest first number (absolute value) */}\par
01023             {\cf18 size_t} biggest_r = i;\par
01024             {\cf19 for} ({\cf18 size_t} index = i; index < m.rows; index++) \{\par
01025                 {\cf19 if} (fabs(MAT2D_AT(m, index, i)) > fabs(MAT2D_AT(m, biggest_r, i))) \{\par
01026                     biggest_r = index;\par
01027                 \}\par
01028             \}\par
01029             {\cf19 if} (i != biggest_r) \{\par
01030                 mat2D_swap_rows(m, i, biggest_r);\par
01031             \}\par
01032         \}\par
01033         {\cf19 for} ({\cf18 size_t} j = i+1; j < m.cols; j++) \{\par
01034             {\cf18 double} factor = 1 / MAT2D_AT(m, i, i);\par
01035             {\cf19 if} (!isfinite(factor)) \{\par
01036                 printf({\cf22 "%s:%d: [Error] unable to transfrom into uperr triangular matrix. Probably some of the rows are not independent.\\n"}, __FILE__, __LINE__);\par
01037             \}\par
01038             {\cf18 double} mat_value = MAT2D_AT(m, j, i);\par
01039             mat2D_sub_row_time_factor_to_row(m, j, i, mat_value * factor);\par
01040         \}\par
01041     \}\par
01042     {\cf19 return} factor_to_return;\par
01043 \}\par
01044 \par
01052 {\cf18 double} mat2D_det(Mat2D m)\par
01053 \{\par
01054     MATRIX2D_ASSERT(m.cols == m.rows && {\cf22 "should be a square matrix"});\par
01055 \par
01056     {\cf20 /* checking if there is a row or column with all zeros */}\par
01057     {\cf20 /* checking rows */}\par
01058     {\cf19 for} ({\cf18 size_t} i = 0; i < m.rows; i++) \{\par
01059         {\cf19 if} (mat2D_row_is_all_digit(m, 0, i)) \{\par
01060             {\cf19 return} 0;\par
01061         \}\par
01062     \}\par
01063     {\cf20 /* checking cols */}\par
01064     {\cf19 for} ({\cf18 size_t} j = 0; j < m.rows; j++) \{\par
01065         {\cf19 if} (mat2D_col_is_all_digit(m, 0, j)) \{\par
01066             {\cf19 return} 0;\par
01067         \}\par
01068     \}\par
01069 \par
01070     {\cf20 /* This is an implementation of naive determinant calculation using minors. This is too slow */}\par
01071 \par
01072     {\cf20 // double det = 0;}\par
01073     {\cf20 // /* TODO: finding beast row or col? */}\par
01074     {\cf20 // for (size_t i = 0, j = 0; i < m.rows; i++) \{ /* first column */}\par
01075     {\cf20 //     if (MAT2D_AT(m, i, j) < 1e-10) continue;}\par
01076     {\cf20 //     Mat2D_Minor sub_mm = mat2D_minor_alloc_fill_from_mat(m, i, j);}\par
01077     {\cf20 //     int factor = (i+j)%2 ? -1 : 1;}\par
01078     {\cf20 //     if (sub_mm.cols != 2) \{}\par
01079     {\cf20 //         MATRIX2D_ASSERT(sub_mm.cols == sub_mm.rows && "should be a square matrix");}\par
01080     {\cf20 //         det += MAT2D_AT(m, i, j) * (factor) * mat2D_minor_det(sub_mm);}\par
01081     {\cf20 //     \} else if (sub_mm.cols == 2 && sub_mm.rows == 2) \{}\par
01082     {\cf20 //         det += MAT2D_AT(m, i, j) * (factor) * mat2D_det_2x2_mat_minor(sub_mm);;}\par
01083     {\cf20 //     \}}\par
01084     {\cf20 //     mat2D_minor_free(sub_mm);}\par
01085     {\cf20 // \}}\par
01086 \par
01087     Mat2D temp_m = mat2D_alloc(m.rows, m.cols);\par
01088     mat2D_copy(temp_m, m);\par
01089     {\cf18 double} factor = mat2D_triangulate(temp_m);\par
01090     {\cf18 double} diag_mul = 1; \par
01091     {\cf19 for} ({\cf18 size_t} i = 0; i < temp_m.rows; i++) \{\par
01092         diag_mul *= MAT2D_AT(temp_m, i, i);\par
01093     \}\par
01094     mat2D_free(temp_m);\par
01095 \par
01096     {\cf19 return} diag_mul / factor;\par
01097 \}\par
01098 \par
01107 {\cf18 void} mat2D_LUP_decomposition_with_swap(Mat2D src, Mat2D l, Mat2D p, Mat2D u)\par
01108 \{\par
01109     {\cf20 /* performing LU decomposition Following the Wikipedia page: https://en.wikipedia.org/wiki/LU_decomposition */}\par
01110 \par
01111     mat2D_copy(u, src);\par
01112     mat2D_set_identity(p);\par
01113     mat2D_fill(l, 0);\par
01114 \par
01115     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(u.rows-1, u.cols); i++) \{\par
01116         {\cf19 if} (!MAT2D_AT(u, i, i)) \{   {\cf20 /* swapping only if it is zero */}\par
01117             {\cf20 /* finding biggest first number (absolute value) */}\par
01118             {\cf18 size_t} biggest_r = i;\par
01119             {\cf19 for} ({\cf18 size_t} index = i; index < u.rows; index++) \{\par
01120                 {\cf19 if} (fabs(MAT2D_AT(u, index, i)) > fabs(MAT2D_AT(u, biggest_r, i))) \{\par
01121                     biggest_r = index;\par
01122                 \}\par
01123             \}\par
01124             {\cf19 if} (i != biggest_r) \{\par
01125                 mat2D_swap_rows(u, i, biggest_r);\par
01126                 mat2D_swap_rows(p, i, biggest_r);\par
01127                 mat2D_swap_rows(l, i, biggest_r);\par
01128             \}\par
01129         \}\par
01130         {\cf19 for} ({\cf18 size_t} j = i+1; j < u.cols; j++) \{\par
01131             {\cf18 double} factor = 1 / MAT2D_AT(u, i, i);\par
01132             {\cf19 if} (!isfinite(factor)) \{\par
01133                 printf({\cf22 "%s:%d: [Error] unable to transfrom into uper triangular matrix. Probably some of the rows are not independent.\\n"}, __FILE__, __LINE__);\par
01134             \}\par
01135             {\cf18 double} mat_value = MAT2D_AT(u, j, i);\par
01136             mat2D_sub_row_time_factor_to_row(u, j, i, mat_value * factor);\par
01137             MAT2D_AT(l, j, i) = mat_value * factor;\par
01138         \}\par
01139         MAT2D_AT(l, i, i) = 1;\par
01140     \}\par
01141     MAT2D_AT(l, l.rows-1, l.cols-1) = 1;\par
01142 \}\par
01143 \par
01149 {\cf18 void} mat2D_transpose(Mat2D des, Mat2D src)\par
01150 \{\par
01151     MATRIX2D_ASSERT(des.cols == src.rows);\par
01152     MATRIX2D_ASSERT(des.rows == src.cols);\par
01153 \par
01154     {\cf19 for} ({\cf18 size_t} index = 0; index < des.rows; ++index) \{\par
01155         {\cf19 for} ({\cf18 size_t} jndex = 0; jndex < des.cols; ++jndex) \{\par
01156             MAT2D_AT(des, index, jndex) = MAT2D_AT(src, jndex, index);\par
01157         \}\par
01158     \}\par
01159 \}\par
01160 \par
01169 {\cf18 void} mat2D_invert(Mat2D des, Mat2D src)\par
01170 \{\par
01171     MATRIX2D_ASSERT(src.cols == src.rows && {\cf22 "should be an NxN matrix"});\par
01172     MATRIX2D_ASSERT(des.cols == src.cols && des.rows == des.cols);\par
01173 \par
01174     Mat2D m = mat2D_alloc(src.rows, src.cols);\par
01175     mat2D_copy(m, src);\par
01176 \par
01177     mat2D_set_identity(des);\par
01178     \par
01179     {\cf19 if} (!mat2D_det(m)) \{\par
01180         mat2D_fill(des, 0);\par
01181         printf({\cf22 "%s:%d: [Error] Can't invert the matrix. Determinant is zero! Set the inverse matrix to all zeros\\n"}, __FILE__, __LINE__);\par
01182         {\cf19 return};\par
01183     \}\par
01184 \par
01185     {\cf19 for} ({\cf18 size_t} i = 0; i < (size_t)fmin(m.rows-1, m.cols); i++) \{\par
01186         {\cf19 if} (!MAT2D_AT(m, i, i)) \{   {\cf20 /* swapping only if it is zero */}\par
01187             {\cf20 /* finding biggest first number (absolute value) */}\par
01188             {\cf18 size_t} biggest_r = i;\par
01189             {\cf19 for} ({\cf18 size_t} index = i; index < m.rows; index++) \{\par
01190                 {\cf19 if} (fabs(MAT2D_AT(m, index, i)) > fabs(MAT2D_AT(m, biggest_r, i))) \{\par
01191                     biggest_r = index;\par
01192                 \}\par
01193             \}\par
01194             {\cf19 if} (i != biggest_r) \{\par
01195                 mat2D_swap_rows(m, i, biggest_r);\par
01196                 mat2D_swap_rows(des, i, biggest_r);\par
01197                 printf({\cf22 "%s:%d: [INFO] swapping row %zu with row %zu.\\n"}, __FILE__, __LINE__, i, biggest_r);\par
01198             \} {\cf19 else} \{\par
01199                 MATRIX2D_ASSERT(0 && {\cf22 "can't inverse"});\par
01200             \}\par
01201         \}\par
01202         {\cf19 for} ({\cf18 size_t} j = i+1; j < m.cols; j++) \{\par
01203             {\cf18 double} factor = 1 / MAT2D_AT(m, i, i);\par
01204             {\cf18 double} mat_value = MAT2D_AT(m, j, i);\par
01205             mat2D_sub_row_time_factor_to_row(m, j, i, mat_value * factor);\par
01206             mat2D_mult_row(m, i, factor);\par
01207 \par
01208             mat2D_sub_row_time_factor_to_row(des, j, i, mat_value * factor);\par
01209             mat2D_mult_row(des, i, factor);\par
01210         \}\par
01211     \}\par
01212     {\cf18 double} factor = 1 / MAT2D_AT(m, m.rows-1, m.cols-1);\par
01213     mat2D_mult_row(m, m.rows-1, factor);\par
01214     mat2D_mult_row(des, des.rows-1, factor);\par
01215     {\cf19 for} ({\cf18 size_t} c = m.cols-1; c > 0; c--) \{\par
01216         {\cf19 for} ({\cf18 int} r = c-1; r >= 0; r--) \{\par
01217             {\cf18 double} factor = 1 / MAT2D_AT(m, c, c);\par
01218             {\cf18 double} mat_value = MAT2D_AT(m, r, c);\par
01219             mat2D_sub_row_time_factor_to_row(m, r, c, mat_value * factor);\par
01220             mat2D_sub_row_time_factor_to_row(des, r, c, mat_value * factor);\par
01221         \}\par
01222     \}\par
01223 \par
01224     mat2D_free(m);\par
01225 \}\par
01226 \par
01236 {\cf18 void} mat2D_solve_linear_sys_LUP_decomposition(Mat2D A, Mat2D x, Mat2D B)\par
01237 \{\par
01238     MATRIX2D_ASSERT(A.cols == x.rows);\par
01239     MATRIX2D_ASSERT(1 == x.cols);\par
01240     MATRIX2D_ASSERT(A.rows == B.rows);\par
01241     MATRIX2D_ASSERT(1 == B.cols);\par
01242 \par
01243     Mat2D y     = mat2D_alloc(x.rows, x.cols);\par
01244     Mat2D l     = mat2D_alloc(A.rows, A.cols);\par
01245     Mat2D p     = mat2D_alloc(A.rows, A.cols);\par
01246     Mat2D u     = mat2D_alloc(A.rows, A.cols);\par
01247     Mat2D inv_l = mat2D_alloc(l.rows, l.cols);\par
01248     Mat2D inv_u = mat2D_alloc(u.rows, u.cols);\par
01249 \par
01250     mat2D_LUP_decomposition_with_swap(A, l, p, u);\par
01251 \par
01252     mat2D_invert(inv_l, l);\par
01253     mat2D_invert(inv_u, u);\par
01254 \par
01255     mat2D_fill(x, 0);   {\cf20 /* x here is only a temp mat*/}\par
01256     mat2D_fill(y, 0);\par
01257     mat2D_dot(x, p, B);\par
01258     mat2D_dot(y, inv_l, x);\par
01259 \par
01260     mat2D_fill(x, 0);\par
01261     mat2D_dot(x, inv_u, y);\par
01262 \par
01263     mat2D_free(y);\par
01264     mat2D_free(l);\par
01265     mat2D_free(p);\par
01266     mat2D_free(u);\par
01267     mat2D_free(inv_l);\par
01268     mat2D_free(inv_u);\par
01269 \}\par
01270 \par
01279 Mat2D_Minor mat2D_minor_alloc_fill_from_mat(Mat2D ref_mat, {\cf18 size_t} i, {\cf18 size_t} j)\par
01280 \{\par
01281     MATRIX2D_ASSERT(ref_mat.cols == ref_mat.rows && {\cf22 "minor is defined only for square matrix"});\par
01282 \par
01283     Mat2D_Minor mm;\par
01284     mm.cols = ref_mat.cols-1;\par
01285     mm.rows = ref_mat.rows-1;\par
01286     mm.stride_r = ref_mat.cols-1;\par
01287     mm.cols_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mat.cols-1));\par
01288     mm.rows_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mat.rows-1));\par
01289     mm.ref_mat = ref_mat;\par
01290 \par
01291     MATRIX2D_ASSERT(mm.cols_list != NULL && mm.rows_list != NULL);\par
01292 \par
01293     {\cf19 for} ({\cf18 size_t} index = 0, temp_index = 0; index < ref_mat.rows; index++) \{\par
01294         {\cf19 if} (index != i) \{\par
01295             mm.rows_list[temp_index] = index;\par
01296             temp_index++;\par
01297         \}\par
01298     \}\par
01299     {\cf19 for} ({\cf18 size_t} jndex = 0, temp_jndex = 0; jndex < ref_mat.rows; jndex++) \{\par
01300         {\cf19 if} (jndex != j) \{\par
01301             mm.cols_list[temp_jndex] = jndex;\par
01302             temp_jndex++;\par
01303         \}\par
01304     \}\par
01305 \par
01306     {\cf19 return} mm;\par
01307 \}\par
01308 \par
01318 Mat2D_Minor mat2D_minor_alloc_fill_from_mat_minor(Mat2D_Minor ref_mm, {\cf18 size_t} i, {\cf18 size_t} j)\par
01319 \{\par
01320     MATRIX2D_ASSERT(ref_mm.cols == ref_mm.rows && {\cf22 "minor is defined only for square matrix"});\par
01321 \par
01322     Mat2D_Minor mm;\par
01323     mm.cols = ref_mm.cols-1;\par
01324     mm.rows = ref_mm.rows-1;\par
01325     mm.stride_r = ref_mm.cols-1;\par
01326     mm.cols_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mm.cols-1));\par
01327     mm.rows_list = ({\cf18 size_t}*)MATRIX2D_MALLOC({\cf17 sizeof}({\cf18 double})*(ref_mm.rows-1));\par
01328     mm.ref_mat = ref_mm.ref_mat;\par
01329 \par
01330     MATRIX2D_ASSERT(mm.cols_list != NULL && mm.rows_list != NULL);\par
01331 \par
01332     {\cf19 for} ({\cf18 size_t} index = 0, temp_index = 0; index < ref_mm.rows; index++) \{\par
01333         {\cf19 if} (index != i) \{\par
01334             mm.rows_list[temp_index] = ref_mm.rows_list[index];\par
01335             temp_index++;\par
01336         \}\par
01337     \}\par
01338     {\cf19 for} ({\cf18 size_t} jndex = 0, temp_jndex = 0; jndex < ref_mm.rows; jndex++) \{\par
01339         {\cf19 if} (jndex != j) \{\par
01340             mm.cols_list[temp_jndex] = ref_mm.cols_list[jndex];\par
01341             temp_jndex++;\par
01342         \}\par
01343     \}\par
01344 \par
01345     {\cf19 return} mm;\par
01346 \}\par
01347 \par
01353 {\cf18 void} mat2D_minor_free(Mat2D_Minor mm)\par
01354 \{\par
01355     free(mm.cols_list);\par
01356     free(mm.rows_list);\par
01357 \}\par
01358 \par
01365 {\cf18 void} mat2D_minor_print(Mat2D_Minor mm, {\cf17 const} {\cf18 char} *name, {\cf18 size_t} padding)\par
01366 \{\par
01367     printf({\cf22 "%*s%s = [\\n"}, ({\cf18 int}) padding, {\cf22 ""}, name);\par
01368     {\cf19 for} ({\cf18 size_t} i = 0; i < mm.rows; ++i) \{\par
01369         printf({\cf22 "%*s    "}, ({\cf18 int}) padding, {\cf22 ""});\par
01370         {\cf19 for} ({\cf18 size_t} j = 0; j < mm.cols; ++j) \{\par
01371             printf({\cf22 "%f "}, MAT2D_MINOR_AT(mm, i, j));\par
01372         \}\par
01373         printf({\cf22 "\\n"});\par
01374     \}\par
01375     printf({\cf22 "%*s]\\n"}, ({\cf18 int}) padding, {\cf22 ""});\par
01376 \}\par
01377 \par
01383 {\cf18 double} mat2D_det_2x2_mat_minor(Mat2D_Minor mm)\par
01384 \{\par
01385     MATRIX2D_ASSERT(2 == mm.cols && 2 == mm.rows && {\cf22 "Not a 2x2 matrix"});\par
01386     {\cf19 return} MAT2D_MINOR_AT(mm, 0, 0) * MAT2D_MINOR_AT(mm, 1, 1) - MAT2D_MINOR_AT(mm, 0, 1) * MAT2D_MINOR_AT(mm, 1, 0);\par
01387 \}\par
01388 \par
01396 {\cf18 double} mat2D_minor_det(Mat2D_Minor mm)\par
01397 \{\par
01398     MATRIX2D_ASSERT(mm.cols == mm.rows && {\cf22 "should be a square matrix"});\par
01399 \par
01400     {\cf18 double} det = 0;\par
01401     {\cf20 /* TODO: finding beast row or col? */}\par
01402     {\cf19 for} ({\cf18 size_t} i = 0, j = 0; i < mm.rows; i++) \{ {\cf20 /* first column */}\par
01403         {\cf19 if} (MAT2D_MINOR_AT(mm, i, j) < 1e-10) {\cf19 continue};\par
01404         Mat2D_Minor sub_mm = mat2D_minor_alloc_fill_from_mat_minor(mm, i, j);\par
01405         {\cf18 int} factor = (i+j)%2 ? -1 : 1;\par
01406         {\cf19 if} (sub_mm.cols != 2) \{\par
01407             MATRIX2D_ASSERT(sub_mm.cols == sub_mm.rows && {\cf22 "should be a square matrix"});\par
01408             det += MAT2D_MINOR_AT(mm, i, j) * (factor) * mat2D_minor_det(sub_mm);\par
01409         \} {\cf19 else} {\cf19 if} (sub_mm.cols == 2 && sub_mm.rows == 2) \{\par
01410             det += MAT2D_MINOR_AT(mm, i, j) * (factor) * mat2D_det_2x2_mat_minor(sub_mm);;\par
01411         \}\par
01412         mat2D_minor_free(sub_mm);\par
01413     \}\par
01414     {\cf19 return} det;\par
01415 \}\par
01416 \par
01417 \par
01418 {\cf21 #endif }{\cf20 // MATRIX2D_IMPLEMENTATION}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/teapot_example.c File Reference\par \pard\plain 
{\tc\tcl2 \v src/teapot_example.c}
{\xe \v src/teapot_example.c}
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "./include/display.c"}\par
{\f2 #include "./include/Matrix2D.h"}\par
{\f2 #include "./include/Almog_Draw_Library.h"}\par
{\f2 #include "./include/Almog_Engine.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for teapot_example.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "teapot__example_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SETUP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UPDATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RENDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_ENGINE_IMPLEMENTATION}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ALMOG_DRAW_LIBRARY_IMPLEMENTATION\:teapot_example.c}
{\xe \v teapot_example.c\:ALMOG_DRAW_LIBRARY_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b teapot_example.c}.}\par
}
{\xe \v ALMOG_ENGINE_IMPLEMENTATION\:teapot_example.c}
{\xe \v teapot_example.c\:ALMOG_ENGINE_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_ENGINE_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b teapot_example.c}.}\par
}
{\xe \v MATRIX2D_IMPLEMENTATION\:teapot_example.c}
{\xe \v teapot_example.c\:MATRIX2D_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b teapot_example.c}.}\par
}
{\xe \v RENDER\:teapot_example.c}
{\xe \v teapot_example.c\:RENDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RENDER}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b teapot_example.c}.}\par
}
{\xe \v SETUP\:teapot_example.c}
{\xe \v teapot_example.c\:SETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SETUP}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1} of file {\b teapot_example.c}.}\par
}
{\xe \v UPDATE\:teapot_example.c}
{\xe \v teapot_example.c\:UPDATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UPDATE}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2} of file {\b teapot_example.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v render\:teapot_example.c}
{\xe \v teapot_example.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b teapot_example.c}.}\par
{
\ql
References {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b Tri_mesh_array::elements}, {\b Scene::in_world_tri_meshes}, {\b game_state_t::inv_z_buffer_mat}, {\b Tri_mesh::length}, {\b Tri_mesh_array::length}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, and {\b game_state_t::window_pixels_mat}.}\par
}
{\xe \v setup\:teapot_example.c}
{\xe \v teapot_example.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b teapot_example.c}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b ae_tri_mesh_appand_copy()}, {\b ae_tri_mesh_get_from_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b Tri_mesh_array::elements}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh::length}, {\b Tri_mesh_array::length}, {\b Scene::original_tri_meshes}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, and {\b game_state_t::to_limit_fps}.}\par
}
{\xe \v update\:teapot_example.c}
{\xe \v teapot_example.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b teapot_example.c}.}\par
{
\ql
References {\b AE_LIGHTING_FLAT}, {\b ae_projection_mat_set()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_view_mat_set()}, {\b Camera::aspect_ratio}, {\b Scene::camera}, {\b Tri_mesh_array::elements}, {\b Camera::fov_deg}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh_array::length}, {\b Scene::proj_mat}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, {\b Scene::up_direction}, {\b Scene::view_mat}, {\b game_state_t::window_h}, {\b game_state_t::window_w}, {\b Camera::z_far}, and {\b Camera::z_near}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
teapot_example.c\par \pard\plain 
{\tc\tcl2 \v src/teapot_example.c}
{\xe \v src/teapot_example.c}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #define SETUP}\par
00002 {\cf21 #define UPDATE}\par
00003 {\cf21 #define RENDER}\par
00004 {\cf21 #include "./include/display.c"}\par
00005 {\cf21 #define MATRIX2D_IMPLEMENTATION}\par
00006 {\cf21 #include "./include/Matrix2D.h"}\par
00007 {\cf21 #define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00008 {\cf21 #include "./include/Almog_Draw_Library.h"}\par
00009 {\cf21 #define ALMOG_ENGINE_IMPLEMENTATION}\par
00010 {\cf21 #include "./include/Almog_Engine.h"}\par
00011 \par
00012 {\cf18 void} setup(game_state_t *game_state)\par
00013 \{\par
00014     game_state->to_limit_fps = 0;\par
00015 \par
00016     ada_init_array(Tri_mesh, game_state->scene.original_tri_meshes);\par
00017     ada_init_array(Tri_mesh, game_state->scene.in_world_tri_meshes);\par
00018     ada_init_array(Tri_mesh, game_state->scene.projected_tri_meshes);\par
00019 \par
00020     {\cf18 char} file_path[MAX_LEN_LINE];\par
00021     strncpy(file_path, {\cf22 "./teapot.stl"}, MAX_LEN_LINE);\par
00022 \par
00023     Tri_mesh teapot_mesh = ae_tri_mesh_get_from_file(file_path);\par
00024     {\cf20 // ae_tri_mesh_flip_normals(teapot_mesh);   }\par
00025     ada_appand(Tri_mesh, game_state->scene.original_tri_meshes, teapot_mesh);\par
00026 \par
00027     printf({\cf22 "[INFO] number of meshes: %zu\\n"}, game_state->scene.original_tri_meshes.length);\par
00028     {\cf18 size_t} sum = 0;\par
00029     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.original_tri_meshes.length; i++) \{\par
00030         printf({\cf22 "[INFO] mesh number %zu: %zu\\n"}, i, game_state->scene.original_tri_meshes.elements[i].length);\par
00031         sum += game_state->scene.original_tri_meshes.elements[i].length;\par
00032     \}\par
00033     printf({\cf22 "[INFO] total number of triangles: %zu\\n"}, sum);\par
00034 \par
00035 \par
00036     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.original_tri_meshes.length; i++) \{\par
00037         ae_tri_mesh_normalize(game_state->scene.original_tri_meshes.elements[i]);\par
00038     \}\par
00039     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.original_tri_meshes.length; i++) \{\par
00040         ae_tri_mesh_appand_copy(&(game_state->scene.in_world_tri_meshes), game_state->scene.original_tri_meshes.elements[i]);\par
00041         ae_tri_mesh_appand_copy(&(game_state->scene.projected_tri_meshes), game_state->scene.original_tri_meshes.elements[i]);\par
00042         game_state->scene.projected_tri_meshes.elements[i].length = 0;\par
00043     \}\par
00044 \par
00045     ae_tri_mesh_rotate_Euler_xyz(game_state->scene.in_world_tri_meshes.elements[0], -90, 0, 180);\par
00046 \par
00047     {\cf20 // ae_translate_mesh(game_state->scene.in_world_tri_meshes.elements[0], 0, 0, 2);}\par
00048 \}\par
00049 \par
00050 {\cf18 void} update(game_state_t *game_state)\par
00051 \{\par
00052     ae_projection_mat_set(game_state->scene.proj_mat, game_state->scene.camera.aspect_ratio, game_state->scene.camera.fov_deg, game_state->scene.camera.z_near, game_state->scene.camera.z_far);\par
00053     ae_view_mat_set(game_state->scene.view_mat, game_state->scene.camera, game_state->scene.up_direction);\par
00054 \par
00055     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.in_world_tri_meshes.length; i++) \{\par
00056         ae_tri_mesh_project_world2screen(game_state->scene.proj_mat, game_state->scene.view_mat, &(game_state->scene.projected_tri_meshes.elements[i]), game_state->scene.in_world_tri_meshes.elements[i], game_state->window_w, game_state->window_h, &(game_state->scene), AE_LIGHTING_FLAT);\par
00057     \}\par
00058 \par
00059 \}\par
00060 \par
00061 {\cf18 void} render(game_state_t *game_state)\par
00062 \{\par
00063     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.projected_tri_meshes.length; i++) \{\par
00064         adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal(game_state->window_pixels_mat, game_state->inv_z_buffer_mat, game_state->scene.projected_tri_meshes.elements[i], 0xffffffff, ADL_DEFAULT_OFFSET_ZOOM);\par
00065     \}\par
00066 \par
00067     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.in_world_tri_meshes.length; i++) \{\par
00068         game_state->scene.projected_tri_meshes.elements[i].length = 0;\par
00069     \}\par
00070 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/temp.c File Reference\par \pard\plain 
{\tc\tcl2 \v src/temp.c}
{\xe \v src/temp.c}
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "./include/display.c"}\par
{\f2 #include "./include/Matrix2D.h"}\par
{\f2 #include "./include/Almog_Draw_Library.h"}\par
{\f2 #include "./include/Almog_Engine.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for temp.c:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "temp_8c__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SETUP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UPDATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RENDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MATRIX2D_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ALMOG_ENGINE_IMPLEMENTATION}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ({\b game_state_t} *game_state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ({\b game_state_t} *game_state)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ALMOG_DRAW_LIBRARY_IMPLEMENTATION\:temp.c}
{\xe \v temp.c\:ALMOG_DRAW_LIBRARY_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b temp.c}.}\par
}
{\xe \v ALMOG_ENGINE_IMPLEMENTATION\:temp.c}
{\xe \v temp.c\:ALMOG_ENGINE_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ALMOG_ENGINE_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b temp.c}.}\par
}
{\xe \v MATRIX2D_IMPLEMENTATION\:temp.c}
{\xe \v temp.c\:MATRIX2D_IMPLEMENTATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MATRIX2D_IMPLEMENTATION}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b temp.c}.}\par
}
{\xe \v RENDER\:temp.c}
{\xe \v temp.c\:RENDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RENDER}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b temp.c}.}\par
}
{\xe \v SETUP\:temp.c}
{\xe \v temp.c\:SETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SETUP}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1} of file {\b temp.c}.}\par
}
{\xe \v UPDATE\:temp.c}
{\xe \v temp.c\:UPDATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UPDATE}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2} of file {\b temp.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v render\:temp.c}
{\xe \v temp.c\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void render ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b temp.c}.}\par
{
\ql
References {\b ADL_DEFAULT_OFFSET_ZOOM}, {\b adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal()}, {\b Tri_mesh_array::elements}, {\b game_state_t::inv_z_buffer_mat}, {\b Tri_mesh_array::length}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, and {\b game_state_t::window_pixels_mat}.}\par
{
\ql
Referenced by {\b render_window()}.}\par
}
{\xe \v setup\:temp.c}
{\xe \v temp.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b temp.c}.}\par
{
\ql
References {\b ada_appand}, {\b ada_init_array}, {\b ae_tri_mesh_appand_copy()}, {\b ae_tri_mesh_get_from_file()}, {\b ae_tri_mesh_normalize()}, {\b ae_tri_mesh_rotate_Euler_xyz()}, {\b ASM_MAX_LEN_LINE}, {\b Tri_mesh_array::elements}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh::length}, {\b Tri_mesh_array::length}, {\b Scene::original_tri_meshes}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, and {\b game_state_t::to_limit_fps}.}\par
{
\ql
Referenced by {\b setup_window()}.}\par
}
{\xe \v update\:temp.c}
{\xe \v temp.c\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void update ({\b game_state_t} *  {\i game_state})}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b temp.c}.}\par
{
\ql
References {\b AE_LIGHTING_FLAT}, {\b ae_projection_mat_set()}, {\b ae_tri_mesh_project_world2screen()}, {\b ae_view_mat_set()}, {\b Camera::aspect_ratio}, {\b Scene::camera}, {\b Tri_mesh_array::elements}, {\b Camera::fov_deg}, {\b Scene::in_world_tri_meshes}, {\b Tri_mesh_array::length}, {\b Scene::proj_mat}, {\b Scene::projected_tri_meshes}, {\b game_state_t::scene}, {\b Scene::up_direction}, {\b Scene::view_mat}, {\b game_state_t::window_h}, {\b game_state_t::window_w}, {\b Camera::z_far}, and {\b Camera::z_near}.}\par
{
\ql
Referenced by {\b update_window()}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
temp.c\par \pard\plain 
{\tc\tcl2 \v src/temp.c}
{\xe \v src/temp.c}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #define SETUP}\par
00002 {\cf21 #define UPDATE}\par
00003 {\cf21 #define RENDER}\par
00004 {\cf21 #include "./include/display.c"}\par
00005 {\cf21 #define MATRIX2D_IMPLEMENTATION}\par
00006 {\cf21 #include "./include/Matrix2D.h"}\par
00007 {\cf21 #define ALMOG_DRAW_LIBRARY_IMPLEMENTATION}\par
00008 {\cf21 #include "./include/Almog_Draw_Library.h"}\par
00009 {\cf21 #define ALMOG_ENGINE_IMPLEMENTATION}\par
00010 {\cf21 #include "./include/Almog_Engine.h"}\par
00011 \par
00012 {\cf18 void} setup(game_state_t *game_state)\par
00013 \{\par
00014     game_state->to_limit_fps = 0;\par
00015 \par
00016     ada_init_array(Tri_mesh, game_state->scene.original_tri_meshes);\par
00017     ada_init_array(Tri_mesh, game_state->scene.in_world_tri_meshes);\par
00018     ada_init_array(Tri_mesh, game_state->scene.projected_tri_meshes);\par
00019 \par
00020     {\cf18 char} file_path[ASM_MAX_LEN_LINE];\par
00021     strncpy(file_path, {\cf22 "./teapot.stl"}, ASM_MAX_LEN_LINE);\par
00022 \par
00023     Tri_mesh tri_mesh = ae_tri_mesh_get_from_file(file_path);\par
00024 \par
00025     ada_appand(Tri_mesh, game_state->scene.original_tri_meshes, tri_mesh);\par
00026 \par
00027     printf({\cf22 "[INFO] number of meshes: %zu\\n"}, game_state->scene.original_tri_meshes.length);\par
00028     {\cf18 size_t} sum = 0;\par
00029     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.original_tri_meshes.length; i++) \{\par
00030         printf({\cf22 "[INFO] mesh number %zu: %zu\\n"}, i, game_state->scene.original_tri_meshes.elements[i].length);\par
00031         sum += game_state->scene.original_tri_meshes.elements[i].length;\par
00032     \}\par
00033     printf({\cf22 "[INFO] total number of triangles: %zu\\n"}, sum);\par
00034 \par
00035 \par
00036     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.original_tri_meshes.length; i++) \{\par
00037         ae_tri_mesh_normalize(game_state->scene.original_tri_meshes.elements[i]);\par
00038     \}\par
00039     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.original_tri_meshes.length; i++) \{\par
00040         ae_tri_mesh_appand_copy(&(game_state->scene.in_world_tri_meshes), game_state->scene.original_tri_meshes.elements[i]);\par
00041         ae_tri_mesh_appand_copy(&(game_state->scene.projected_tri_meshes), game_state->scene.original_tri_meshes.elements[i]);\par
00042         game_state->scene.projected_tri_meshes.elements[i].length = 0;\par
00043     \}\par
00044 \par
00045     ae_tri_mesh_rotate_Euler_xyz(game_state->scene.in_world_tri_meshes.elements[0], -90, 0, 180);\par
00046 \par
00047 \}\par
00048 \par
00049 {\cf18 void} update(game_state_t *game_state)\par
00050 \{\par
00051     {\cf20 // MAT2D_PRINT(game_state->scene.camera.current_position);}\par
00052     {\cf20 // MAT2D_PRINT(game_state->scene.light_direction);}\par
00053 \par
00054     ae_projection_mat_set(game_state->scene.proj_mat, game_state->scene.camera.aspect_ratio, game_state->scene.camera.fov_deg, game_state->scene.camera.z_near, game_state->scene.camera.z_far);\par
00055     ae_view_mat_set(game_state->scene.view_mat, game_state->scene.camera, game_state->scene.up_direction);\par
00056 \par
00057     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.in_world_tri_meshes.length; i++) \{\par
00058         ae_tri_mesh_project_world2screen(game_state->scene.proj_mat, game_state->scene.view_mat, &(game_state->scene.projected_tri_meshes.elements[i]), game_state->scene.in_world_tri_meshes.elements[i], game_state->window_w, game_state->window_h, &(game_state->scene), AE_LIGHTING_FLAT);\par
00059     \}\par
00060 \par
00061 \}\par
00062 \par
00063 {\cf18 void} render(game_state_t *game_state)\par
00064 \{\par
00065     {\cf19 for} ({\cf18 size_t} i = 0; i < game_state->scene.projected_tri_meshes.length; i++) \{\par
00066         adl_tri_mesh_fill_Pinedas_rasterizer_interpolate_normal(game_state->window_pixels_mat, game_state->inv_z_buffer_mat, game_state->scene.projected_tri_meshes.elements[i], 0xffffffff, ADL_DEFAULT_OFFSET_ZOOM);\par
00067     \}\par
00068 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}